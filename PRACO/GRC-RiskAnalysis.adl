CONTEXT NRM_RiskAnalysis IN ENGLISH
-----------------------------------------------------------
-- For different RLITypes (e.g. 'LMH', '1..9' e.a.) there are separate include files.
-----------------------------------------------------------
PROCESS "Risks and their computations"
{-Risks are related to BusinessFunctions, because these are the entities that have obligations and expectations. That does not necessarily mean that risks should be managed by BusinessFunctions, since BFs are not accountable (just responsible). Here, we do not care about the management.-}

rliBF :: RLI * BusinessFunction [UNI] --**[TOT] moet erbij**--
MEANING "Every RLI belongs to one BusinessFunction."

PURPOSE RELATION bfRLIType IN ENGLISH
{+A BusinessFunction must be allowed to choose its own representation for risks, likelihoods and impacts (RLIs). By registering (and depending on) this choice, it may become possible to automatically compute risks from the likelihoods and impacts.+}
bfRLIType :: BusinessFunction * RLIType [UNI]
PRAGMA "" " uses RLIs of type "
MEANING "Within a BusinessFunction, risks, likelihoods and impacts (RLIs) may be classified as some RLIType."

PURPOSE RELATION rliType
{+There are various ways in which risks, likelihoods and impacts (RLIs) can be related to one another. One well-known way is the so-called 'LMH-matrix', but there are others. In order to automatically compute a risk level from its likelihood and impact, but also in order to compare risk levels, it is necessary to know of which type an RLI is. Specifying the RLIType that a BusinessFunction uses is not an obligation, but then such computations and comparisons have to be done manually.+}
rliType :: RLI * RLIType [UNI]
MEANING "An RLI may be typed."

PURPOSE RULE "Automatically classifying RLIs"
{+The type of an RLI can be automatically inferred if the BusinessFunction that owns the RLI has specified the RLIType that he uses.+}
ROLE ExecEngine MAINTAINS "Automatically classifying RLIs"
RULE "Automatically classifying RLIs": rliBF;bfRLIType |- rliType
MEANING "If a BusinessFunction uses an RLIType, then all RLIs he owns must be of that type."
VIOLATION (TXT "{EX} InsPair;rliType;RLI;", SRC I, TXT ";RLIType;", TGT I)

PURPOSE RULE "Automatically declassifying RLIs"
{+The type of an RLI is fixed for as long as the BusinessFunction that owns the RLI has specified the RLIType that he uses.+}
ROLE ExecEngine MAINTAINS "Automatically declassifying RLIs"
RULE "Automatically declassifying RLIs": (I /\ rliBF;rliBF~);rliType |- rliBF;bfRLIType
MEANING "The RLIType of an RLI must have been selected by its BusinessFunction (owner)."
VIOLATION (TXT "{EX} DelPair;rliType;RLI;", SRC I, TXT ";RLIType;", TGT I)

PURPOSE RELATION bfRiskAppetite
{+An BusinessFunction may define a 'default acceptable risk level', which is the risk level that every new RLI will be assigned as its initial acceptable risk level.+}
bfRiskAppetite :: BusinessFunction * Risk [UNI]
MEANING "The default acceptable risk level of a BusinessFunction may be specified."

riskTypeOf :: Risk * RLIType
MEANING "A Risk may be typed (in multiple risk-systems)."

PURPOSE RULE "Default acceptable risk level integrity"
{+An BusinessFunction must specify his default acceptable risk level as a value that belongs with the RLIType that he uses. Whenever that is not the case, the default acceptable risk level must be voided. In particular, this is not the case when the BusinessFunction has not specified (or inherited) the RLIType that he uses.+}
ROLE ExecEngine MAINTAINS "Default acceptable risk level integrity"
RULE "Default acceptable risk level integrity" : bfRiskAppetite |- bfRLIType;riskTypeOf~
MEANING "An BusinessFunction must specify the value of his default acceptable risk level in terms of the RLIType that he uses."
VIOLATION (TXT "{EX} DelPair;bfRiskAppetite;BusinessFunction;", SRC I, TXT ";Risk;", TGT I)

PURPOSE RELATION rliRiskAppetite
{+Every RLI may have set a value for its acceptable risk, so that it can be signalled whether or not risk treatment is appropriate.+}
rliRiskAppetite :: RLI * Risk [UNI]
MEANING "Het highest acceptable risk level for an RLI may be specified."

PURPOSE RELATION rliHasNonDefaultRiskAppetite
{+It should be possible for specific risks to have a different risk appetite than what is default. We model this explicitly, because it ensures that the risk owner knowingly takes this decision.+} --$Also, it is nice because it avoids some editing issues we currently have in the generator tooling 
rliHasNonDefaultRiskAppetite :: RLI * RLI [PROP]
MEANING "The risk appetite of an RLI can be set to a non-default value"

PURPOSE RULE "Determining the initial acceptable risk level"
{+If a BusinessFunction has specified a default acceptable risk level (which implies that an RLIType has been specified as well), then every RLI has a default risk appetite (= acceptable risk level), except if it is explicitly stated that deviations are allowed.+}
ROLE ExecEngine MAINTAINS "Determining the initial acceptable risk level"
RULE "Determining the initial acceptable risk level": 
  (I /\ -rliHasNonDefaultRiskAppetite);rliBF;bfRiskAppetite |- rliRiskAppetite
MEANING "An RLI whose owning BusinessFunction has defined a default acceptable risk level, must have its acceptable risk level specified."
VIOLATION (TXT "{EX} InsPair;rliRiskAppetite;RLI;", SRC I, TXT ";Risk;", TGT I)

PURPOSE RULE "Acceptable risk level integrity"
{+If an acceptable risk level value of an RLI is no longer consistent with what its RLIType specifies, its value will be automatically removed.+}
ROLE ExecEngine MAINTAINS "Acceptable risk level integrity"
RULE "Acceptable risk level integrity" : (I /\ rliType;rliType~);rliRiskAppetite |- rliType;riskTypeOf~
MEANING "An RLI that is typed can only have an acceptable risk level as specified by its RLIType."
VIOLATION (TXT "{EX} DelPair;rliRiskAppetite;RLI;", SRC I, TXT ";Risk;", TGT I)

PURPOSE RULE "Automated determination of risk levels"
{+If an RLI has values for the Likelihood and Impact, then the associated Risk level can be computed according to the well-known formula Risk = Likelihood X Impact.+}
ROLE ExecEngine MAINTAINS "Automated determination of risk levels"
RULE "Automated determination of risk levels":
(rliType;argRLIType~ /\ rliImpact;argImpact~ /\ rliLikelihood;argLikelihood~);resRisk |- rliRisk
MEANING "If an RLI has values for the Likelihood and Impact, then the risk level will be computed."
VIOLATION (TXT "{EX} InsPair;rliRisk;RLI;", SRC I, TXT ";Risk;", TGT I)

rliRisk :: RLI * Risk [UNI]
PURPOSE RULE "Automatically remove RLI-Risk"
{+If the risk level of an RLI is no longer consistent with what its RLIType specifies, its value will be automatically removed.+}
ROLE ExecEngine MAINTAINS "Automatically remove RLI-Risk"
RULE "Automatically remove RLI-Risk": rliRisk |- rliType;riskTypeOf~
MEANING "A Risk level in an RLI may only have a value that is allowed by its RLIType."
VIOLATION (TXT "{EX} DelPair;rliRisk;RLI;", SRC I, TXT ";Risk;", TGT I)

likelihoodTypeOf :: Likelihood * RLIType
MEANING "A Likelihood may be typed (in multiple risk-systems)."

rliLikelihood :: RLI * Likelihood [UNI]
PURPOSE RULE "Automatically remove RLI-Likelihood"
{+If the likelihood of an RLI is no longer consistent with what its RLIType specifies, its value will be automatically removed.+}
ROLE ExecEngine MAINTAINS "Automatically remove RLI-Likelihood"
RULE "Automatically remove RLI-Likelihood": rliLikelihood |- rliType;likelihoodTypeOf~
MEANING "A Likelihood in an RLI may only have a value that is allowed by its RLIType."
VIOLATION (TXT "{EX} DelPair;rliLikelihood;RLI;", SRC I, TXT ";Likelihood;", TGT I)

impactTypeOf :: Impact * RLIType
MEANING "An Impact may be typed (in multiple risk-systems)."

rliImpact :: RLI * Impact [UNI]
PURPOSE RULE "Automatically remove RLI-Impact"
{+If the impact of an RLI is no longer consistent with what its RLIType specifies, its value will be automatically removed.+}
ROLE ExecEngine MAINTAINS "Automatically remove RLI-Impact"
RULE "Automatically remove RLI-Impact": rliImpact |- rliType;impactTypeOf~
MEANING "An Impact in an RLI may only have a value that is allowed by its RLIType."
VIOLATION (TXT "{EX} DelPair;rliImpact;RLI;", SRC I, TXT ";Impact;", TGT I)

PURPOSE RULE "RLIType integrity"
{+An BusinessFunction may only use an RLIType that is predefined, because only then risk computations and comparisons can be computed automatically.+}
ROLE Transactor MAINTAINS "RLIType integrity"
RULE "RLIType integrity": -- invariant
bfRLIType |- bfRLIType;(impactTypeOf~;impactTypeOf /\ likelihoodTypeOf~;likelihoodTypeOf /\ riskTypeOf~;riskTypeOf)
MEANING "An BusinessFunction may only use a predefined RLIType"
VIOLATION (SRC I, TXT " attempts to use the non predefined RLIType '", TGT I, TXT "'")

PURPOSE RELATION rliIsUnacceptable
{+For all RLIs it must be established whether or not its risk is acceptable, allowing the risks that are unacceptable to be treated.+}
rliIsUnacceptable :: RLI * RLI [PROP]
MEANING "An RLI may have the property that its risk-level is unacceptably high."

PURPOSE RULE "Automatic determination of the property 'rliIsUnacceptable'"
{+For every RLI of a specific RLIType, where both the risk level and the acceptable risk level have been established, it can be automatically determined whether or not the RLI poses an unacceptable risk.+}
ROLE ExecEngine MAINTAINS "Automatic determination of the property 'rliIsUnacceptable'"
RULE "Automatic determination of the property 'rliIsUnacceptable'": 
  (rliRisk;rGTleftArg~ /\ rliRiskAppetite;rGTrightArg~ /\ rliType;rGTtypeArg~);rGTresult |- rliIsUnacceptable;V
VIOLATION (TXT "{EX} InsPair;rliIsUnacceptable;RLI;", SRC I, TXT ";RLI;", SRC I)

ROLE ExecEngine MAINTAINS "Automatic revocation of the property 'rliIsUnacceptable'"
RULE "Automatic revocation of the property 'rliIsUnacceptable'": 
  rliIsUnacceptable |- (rliRisk;rGTleftArg~ /\ rliRiskAppetite;rGTrightArg~ /\ rliType;rGTtypeArg~);rGTresult;V
VIOLATION (TXT "{EX} DelPair;rliIsUnacceptable;RLI;", SRC I, TXT ";RLI;", SRC I)

rliNote :: RLI * Note
MEANING "Risks may be annotated."

ROLE ExecEngine MAINTAINS "Create RLI notes"
RULE "Create RLI notes": I[RLI] |- rliNote;(I /\ -(noteText;noteText~));rliNote~
MEANING "Make sure there is an empty note for every RLI"
VIOLATION (TXT "{EX} NewStruct;Note;rliNote;RLI;", SRC I, TXT ";Note;NULL")

noteText :: Note * Blob [UNI]
MEANING "A Note consists of a (possibly large) text"

noteDatim :: Note * DateTime [UNI]
ROLE ExecEngine MAINTAINS "Timestamping Notes"
RULE "Timestamping Notes": I /\ noteText;noteText~ |- noteDatim;noteDatim~
MEANING "All notes that have texts must be timestamped"
VIOLATION (TXT "{EX} InsPair;noteDatim;Note;", SRC I, TXT ";DateTime;{php}gmdate('d-m-Y H:i T')")
--VIOLATION (TXT "{EX} SetToday;noteDatim;Note;", SRC I, TXT ";DateTime;", TGT noteDatim, TXT ";'d-m-Y G:i:s'")

noteAuthor :: Note * Person [UNI]
ROLE Transactor MAINTAINS "Notes must have text and specify the author"
RULE "Notes must have text and specify the author":
    I /\ noteText;noteText~  = I /\ noteAuthor;noteAuthor~
MEANING "Notes must have text and specify the author."

ROLE ExecEngine MAINTAINS "Authoring Notes"
RULE "Authoring Notes": I /\ noteText;noteText~  |- noteAuthor;noteAuthor~
MEANING "All notes that have texts must have an (authenticated) author"
VIOLATION (TXT "{EX} InsPair;noteAuthor;Note;", SRC I, TXT ";Person;", TGT V;'_SESSION'[SESSION];(sessionUser \/ (I /\ -(sessionUser;sessionUser~));V;'[not specified]'[Person]))

ENDPROCESS
-----------------------------------------------------------
INTERFACE "RLI Estimation" (rliLikelihood,rliImpact,rliRiskAppetite,rliHasNonDefaultRiskAppetite, rliNote,noteText,noteAuthor,noteDatim) : I[RLI]
ROWS[ "Risk" : I
    COLS[ "Risk level" : I <RLIshow>
        , "Likelihood" : rliLikelihood
        , "Impact" : rliImpact
        , "Risk" : V;' '[Message] -- create some space
        , "Appetite" : rliRiskAppetite
        , "Modified?" : rliHasNonDefaultRiskAppetite <RLIproperty>
        ]
    , "Note(s)" : rliNote
    COLS[ "Note" : noteText
        , "Author" : noteAuthor
        , "Date" : I;noteDatim -- Should not edit this field, even though 'noteDatim' itself must be editable in order to delete a note.
        ]
    , "Meta" : I
    COLS[ "Risk Owner": rliBF
        , "Risk Type" : rliType
        , "Default appetite" : rliBF;bfRiskAppetite
        ]
    ]
-----------------------------------------------------------
PROCESS "Risks for BusinessFunctions"

PURPOSE RELATION ctrlExpRLI
{+A Control poses an E-risk (expectation risk) for the owner of the Control, being that the implementer does not yield the effects that the Control owner expects. Therefore, it must be possible that the risk level from the perspective of the Control owner is assessed.+}
ctrlExpRLI :: Control * RLI [UNI]
PRAGMA "The E-risk for the owner of Control " " is " 
MEANING "A Control poses an E-risk (expectation risk) for its owner."

PURPOSE RULE "Automatically create ctrlExpRLIs"
{+A Control poses an E-risk (expectation risk) for the owner of the Control, being that the implementer does not yield the effects that the Control owner expects. Therefore, it must be possible that the risk level from the perspective of the Control owner is assessed. The associated RLI can be created automatically.+}
ROLE ExecEngine MAINTAINS "Automatically create ctrlExpRLIs"
RULE "Automatically create ctrlExpRLIs": I[Control] /\ ctrlIsOwnedByExpOfBF;ctrlIsOwnedByExpOfBF~ |- ctrlExpRLI;ctrlExpRLI~
MEANING "Every Control has a ctrlExpRLI."
VIOLATION (TXT "{EX} NewStruct;RLI"
          ,TXT ";ctrlExpRLI;Control;", SRC I, TXT ";RLI;NULL"
          ,TXT ";rliBF;RLI;NULL;BusinessFunction;", SRC ctrlIsOwnedByExpOfBF
          )
--$Verwijderen van RLI's moet nog, maar hangt af van welke andere relaties een RLI nog zou kunnen hebben. Als alternatief zou je een dergelijk RLI een property 'CtrlOwnerRLI' kunnen geven, en dan voor die RLIs een RULE kunnen maken om die dingen op te ruimen.

PURPOSE RELATION ctrlOblRLI
{+A Control poses an O-risk (obligation risk) for the BusinessFunction that must implement the Control, being that he will not be able to achieve the effects of the BusinessFunction that expects the Control to be implemented.. Therefore, it must be possible that the risk level from the perspective of the Control implementer is assessed.+}
ctrlOblRLI :: Control * RLI [UNI]
PRAGMA "The O-risk for the BusinessFunction that must implement " " is " 
MEANING "A Control is associated with an O-Risk for the BusinessFunction that must implement it."

PURPOSE RULE "Automatically create ctrlOblRLIs"
{+A Control is an obligation for the BusinessFunction that must implement it. Hence, it must be possible to register the associated O-risk. The associated RLI can be created automatically.+}
ROLE ExecEngine MAINTAINS "Automatically create ctrlOblRLIs"
RULE "Automatically create ctrlOblRLIs": I[Control] /\ ctrlIsImpldByOblOfBF;ctrlIsImpldByOblOfBF~ |- ctrlOblRLI;ctrlOblRLI~
MEANING "Every Control has an Obligation-RLI."
VIOLATION (TXT "{EX} NewStruct;RLI"
          ,TXT ";ctrlOblRLI;Control;", SRC I, TXT ";RLI;NULL"
          ,TXT ";rliBF;RLI;NULL;BusinessFunction;", SRC ctrlIsImpldByOblOfBF
          )
--$Verwijderen van RLI's moet nog, maar hangt af van welke andere relaties een RLI nog zou kunnen hebben. Als alternatief zou je een dergelijk RLI een property 'implementerRLI' kunnen geven, en dan voor die RLIs een RULE kunnen maken om die dingen op te ruimen.

ENDPROCESS
-----------------------------------------------------------
--$ For elk soort RLItype moeten de computations 'CalcRisk' and 'CalcGT' uitgevoerd kunnen worden. For relatief eenvoudige RLITypes kan dit gewoon middels populaties. For de wat complexere zijn wellicht ook regels nodig.  

--$Een 'CalcRisk' computation berekent Risk = Likelihood * Impact
IDENT CalcRisks: CalcRisk (argRLIType, argImpact, argLikelihood)
argRLIType    :: CalcRisk * RLIType    [UNI] --**[TOT] moet erbij**--
argImpact     :: CalcRisk * Impact     [UNI] --**[TOT] moet erbij**--
argLikelihood :: CalcRisk * Likelihood [UNI] --**[TOT] moet erbij**--
resRisk       :: CalcRisk * Risk       [UNI]

--$Een 'CalcGT' computation toetst of het linkerargument groter is dan (niet: gelijk aan) het rechterargument
IDENT CalcGTs: CalcGT(rGTtypeArg, rGTleftArg,rGTrightArg)
rGTtypeArg    :: CalcGT * RLIType  [UNI] --**[TOT] moet erbij**--
rGTleftArg    :: CalcGT * Risk     [UNI] --**[TOT] moet erbij**--
rGTrightArg   :: CalcGT * Risk     [UNI] --**[TOT] moet erbij**--
rGTresult     :: CalcGT * GTresult [UNI] 

----------------------------------------------------------------------
--[Glossary]--
PURPOSE CONCEPT RLIType
{+There are different ways to denote risks, likelihoods and impacts. A well-known way is to use characters such as 'L'=Low, 'M'=Medium and 'H'=igh. Another way is to use real numbers in the interval [0..1], or integer values in a specific intervals, e.g. [1..5], [1..9], or [2..10]. For every way, it must be clear:
\begin{itemize}
\item which values are allowed for risks, likelihoods and impacts respectively;
\item what the computation is to compute a risk level from a likelihood and an impact;
\item how the various risk levels compare (smaller than, greater than, equal).
\end{itemize}
-}
CONCEPT RLIType "een klasse (type) van risk-, likelihood- and impact-waardes"

PURPOSE CONCEPT RLI
{+In order to ease risk related computations, we utilize a construct that we call RLI. This construct consists of at least a risk, a likelihood and an impact. Also, every such construct may be typed (i.e.: have an RLIType), which allows the risk to be computed from the likelihood and impact values, and risk levels of different RLIs of the same type, to be compared.+}
CONCEPT RLI "the combination of (assessments for) Risk, Likelihood and Impact"

PURPOSE CONCEPT Risk IN ENGLISH
{+In order to be succesful, the uncertainty in business objectives must be assessed, so that any unacceptable uncertainties can be made more predictable. To do so requires an assessment of the damages that are likeli to occur as a result of an uncertainty in (business) expectations or obligations (business objectives).+}
CONCEPT Risk "the assessment of damages that are likeli to occur as a result of an uncertainty in (business) expectations or obligations (business objectives)"

PURPOSE CONCEPT Likelihood
{+In order to assess the damages that are likeli to occur as a result of an uncertainty in (business) expectations or obligations (business objectives), it is necessary to assess the likelihood that such expectations and obligations are not met (fulfilled).+}
CONCEPT Likelihood "an assessment of the likelihood that such expectations and obligations are not met (fulfilled)"

PURPOSE CONCEPT Impact
{+In order to assess the damages that are likeli to occur as a result of an uncertainty in (business) expectations or obligations (business objectives), it is necessary to assess the maximum damage as a result of expectations and obligations not being met (fulfilled)+}
CONCEPT Impact "an assessment of the maximum damage as a result of expectations and obligations not being met (fulfilled)"
-----------------------------------------------------------
ENDCONTEXT