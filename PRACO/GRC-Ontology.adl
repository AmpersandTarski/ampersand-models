CONTEXT GRCOntology IN ENGLISH

--[BusinessFunctions, OrgUnits and Organizations]--
PROCESS {-**Was: PATTERN**-} "BusinessFunctions and OrgUnits"
PURPOSE PROCESS {-**Was: PATTERN**-} "BusinessFunctions and OrgUnits"
{+Governance, risk management and compliance (GRC) within an Organization is rooted in its BusinessFunctions, as they specify and implement the necessary controls. Therefore, it must be possible to talk about the functional architecture of and within an organization. This pattern introduces the required terminology.+}

PURPOSE CONCEPT BusinessFunction
{+An organization exists to fulfill its purpose and mission. As more work needs to be done, we see a division of that work in functional units such as business processes, services, systems, and so on. We use the generic term of BusinessFunction to denote such a functional unit. BusinessFunctions may be characterized as follows:
\begin{itemize}
\item they can consist out of subordinate BusinessFunctions. For example, an HRM proces can have subprocesses such as 'Start employment', 'Educate Employees', as well as (subordinate) supporting systems, which in turn can consist of subordinate BusinessFunctions.
\item they can have a relation with BusinessFunctions 'at the same level', i.e. with BusinessFunctions that are not subordinate. For example, an HRM process may have a relation with other business processes e.g. one that defines the business roles that people may play, and the competences that such people should posess or learn. 
\item the actual work in a BusinessFunction can be done by people and/or machines. For example, in a governance process, decisions are taken by people (e.g. managers), whereas governance information is being kept track of in a system (such as GRCengine).
\item they exist to fulfill specific business objectives of the OrgUnit that is accountable for them.
\end{itemize}
-}
CONCEPT BusinessFunction "a collection of people and means that are used to realise a set of (business) objectives"

PURPOSE CONCEPT OrgUnit
{+Organizational Units (OrgUnits) are BusinessFunctions that have the property of being accountable, both for themselves and possibly for others (such as business processes, applications, systems, networks, etc.). OrgUnits are organized in an organizational hierarchy, where (the manager of) an OrgUnit that is subsidiary to another OrgUnit is accountable to (the manager of) that other OrgUnit. Note that we assume an OrgUnit to be some kind of scope that is under direct control of its manager. Subsidiary OrgUnits are 'carved out' of that scope, and the manager relies on the managers of subsidiary OrgUnits to control such 'carvings out'.+}
CONCEPT OrgUnit "a BusinessFunction that is a named part of an organizational hierarchy"
CLASSIFY OrgUnit ISA BusinessFunction

PURPOSE CONCEPT Organization
{+Organizations are Organizational Units (and therefore also: BusinessFunctions) that are not subsidiary to other OrgUnits within the organizational hierarchy of which it is part (i.e.: which it heads). Organizations are accountable to the outside world for whatever is done by/in any of the OrgUnits within its organizational hierarchy.+}
CONCEPT Organization "an OrgUnit that is heads, and represents, a hierarchy of OrgUnits"
CLASSIFY Organization ISA OrgUnit

PURPOSE RELATION bfAbbrID
{+Identifiers that are used within the scope of a BusinessFunction must sometimes be used outside that scope. In order to disambiguate such identifiers with the same identifiers that are used in other scopes, it is sometimes necessary to precede such identifiers with a reference to the scope in which they belong. To this end, such scopes - in this case BusinessFunctions - must be referrable, preferably with a (very) short text. Such texts must be available for every BusinessFunction.+}
bfAbbrID :: BusinessFunction * BusinessFunctionAbbr [UNI,TOT]
MEANING "Every BusinessFunction has a (short) ID by which it can be referred in composite identifiers"

PURPOSE RELATION bfFullID
{+A BusinessFunction must be identifiable by people.+}
bfFullID :: BusinessFunction * BusinessFunctionID [UNI,TOT]
MEANING "Every BusinessFunction has an ID by which it can be identified"

bfPurpose :: BusinessFunction * Text [UNI] --! Perhaps 'Text' should be replaced with 'Control'?
MEANING "A BusinessFunction may have a purpose (its mission, the reason for its existence)."

bfManager :: BusinessFunction * Person [UNI]
MEANING "A BusinessFunction may have a manager, i.e. a person that is responsible/accountable for its proper functioning."

PURPOSE RELATION isPartialFunctionOf
{+BusinessFunctions may exist at different levels. For example 'Human Resource Management' is a high level BusinessFunction that may be split up into parts such as 'Recruitment', 'Starting employment', 'Continuous education', 'Termination of employment', etc. Splitting up BusinessFunctions does not imply that the BusinessFunction that owns the high level BusinessFunction also owns the lower level BusinessFunctions. The owner of the latter BusinessFunction may very well be in another Organization, e.g. as in outsourcing.

This version of the GRCengine does not have a specific need for BusinessFunction-hierarchies, other than to mimic the real world where they do exist.-}
isPartialFunctionOf :: BusinessFunction * BusinessFunction [ASY,IRF]
PRAGMA "" " is a part of  "
MEANING "A BusinessFunction may be part of other BusinessFunctions, to which it is subsidiary."

--[OrgUnits]

ouIsPartOfOU :: OrgUnit * OrgUnit [ASY,IRF]
MEANING "An OrgUnit may be subsidiary (part of) to another OrgUnit."

PURPOSE RELATION bfAccountableOU
{+For all BusinessFunctions, it should be unambiguously clear which OrgUnit is accountable for its operations (and its malfunctions).+}
bfAccountableOU :: BusinessFunction * OrgUnit [UNI] --**[TOT] moet erbij**--
PRAGMA "For " " is " " accountable"
MEANING "For whatever happens in a BusinessFunction, a specific BusinessFunction is accountable."

ROLE ExecEngine MAINTAINS "OrgUnits are accountable for themselves"
RULE "OrgUnits are accountable for themselves": I[OrgUnit] |- bfAccountableOU
MEANING "Every OrgUnit owns (is accountable for) itself."
VIOLATION (TXT "{EX} InsPair;bfAccountableOU;BusinessFunction;", SRC I, TXT ";OrgUnit;", TGT I)

--[Organizations]--

bfOrganization :: BusinessFunction * Organization [UNI] --**[TOT] moet erbij**--
MEANING "Every BusinessFunction is part of an Organization."

ROLE ExecEngine MAINTAINS "Organizations belong to themselves"
RULE "Organizations belong to themselves": I[Organization] |- bfOrganization
MEANING "Every Organization belongs to itself."
VIOLATION (TXT "{EX} InsPair;bfOrganization;BusinessFunction;", SRC I, TXT ";Organization;", TGT I)

RULE "A functional hierarchy may only exist within a single organization": 
   bfOrganization~;isPartialFunctionOf;bfOrganization |- I
MEANING "A Business Function can only be subsidiary to Business Functions of the same Organization."

RULE "An organizational hierarchy may only exist within a single organization": 
   bfOrganization~;ouIsPartOfOU;bfOrganization |- I
MEANING "An OrgUnit can only be part of an OrgUnit of the same Organization."

ENDPROCESS {-**Was: PATTERN**-}

--[NormTexts, Norms and NormHierarchies]--
PROCESS {-**Was: PATTERN**-} "NormText(Text)s"
PURPOSE PROCESS {-**Was: PATTERN**-} "NormText(Text)s"
{+A NormHierarchy is a collection of Norms that are organized in a hierarchical (tree-like) fashion.This pattern introduceds the terminology that is necessary to express the basic properties about Norms, and being compliant with them.+}

PURPOSE RELATION normtextNH
{+In order to assess compliance with a NormHierarchy, it is necessary to know which Norms are part of it.+}
--! Eigenlijk moet een NormText in een (abstract) document zijn vervat dat een NormHierarchie documenteert
--! N.B.: de relatie 'nhSourceDoc' gaat over een concreet Document en is hiervoor dus niet per se bruikbaar
normtextNH :: NormText * NormHierarchy [UNI] --! hier moet ,TOT] bij, maar voor debuggen tijdelijk weggewerkt
PRAGMA "" " belongs to "
MEANING "Every NormText is traceable to one NormHierarchy."

PURPOSE RELATION normtextText
{+Norms are represented by legible texts, that should be available in the system.+}
normtextText :: NormText * Blob [UNI] -- Titles or chapters may not have a text.
PRAGMA "" " says: '" "'."
MEANING "A NormText is expressed through a text."

PURPOSE RELATION normtextSortID
{+In NormHierarchy documents (particularly: in laws), Norms are usually written down as sequences of texts (paragraphs), each of which may or may not be referrable to (for which we use the concept 'NormID'). However, in order to accommodate for the sequencing of text paragraphs, and also to allow for the inclusion of texts that have no 'NormID', such as notes, explanations, etc., we need another, sortable ID. Note that since this sortable ID does not (or: is not supposed to) be displayed in INTERFACEs there is quite some freedom in specifying its values.+}
normtextSortID :: NormText * SortID [UNI] --! hier moet ,TOT] bij, maar voor debuggen tijdelijk weggewerkt
MEANING "Every NormText has a (sortable) ID, which can be used to determine the order of displaying them." 

{-Texts in standards, laws etc. cannot always be complied with. Examples include (foot)notes, introductory texts, etc. In order to distinguish texts that can and cannot be complied with, we introduce the specialization 'Norm'.-}
CLASSIFY Norm ISA NormText

PURPOSE RELATION normFullID
{+Every Norm must have a text that globally identifies it. For example, the ISO standaard that states the requirements for an information security management system may be referenced as 'ISO/IEC 27001:2013'.+}
normFullID :: Norm * NormID [UNI,TOT]
MEANING "Every Norm has a full name (text)."

PURPOSE RELATION normAbbrID
{+Every Norm must have a (short) identifying text for referral purpoases. For example, the ISO standaard that states the requirements for an information security management system may be referenced as 'ISO 27001'.+}
normAbbrID :: Norm * NormAbbr [UNI,TOT]
MEANING "Every Norm has a short name (label, text)."

PURPOSE IDENT Norms
{+A NormText in a NormHierarchy is referrable by the reference to that NormHierarchy and the reference that is used within this NormHierarcy for that NormText.+}
IDENT Norms: NormText(normtextNH,normAbbrID)

PURPOSE RELATION isSubsidiaryToNorm
{+Norms may exist at different levels. An example is 'Human resource security" (ISO 27001:2013 A.7). In order to operationalize such a NormText, it is split into various parts, each of which with a tighter focus and some more detail. The example NormText is split into the parts 'Prior to employment', 'During employment' and 'Termination and change of employment'.+}
isSubsidiaryToNorm :: NormText * Norm [UNI]
PRAGMA "" " is subsidiary to "
MEANING "A NormText can be subsidiary to a Norm."

PURPOSE RELATION normPurpose
{+The reason for the existence of a Norm is the purpose that its author seeks to realize. In other words: whoever complies with the Norm has a better chance of realizing such goals that who does not comply. Therefore, it should be clear what purpose a Norm serves.+}
normPurpose :: Norm * Text [UNI]
MEANING "The purpose that a Norm serves may be known."

PURPOSE RELATION normMotivation
{+Knowing the motivation for the existence of a Norm may contribute to the motivation of those that should comply with it.+}
normMotivation :: Norm * Text [UNI]
MEANING "The motivation for the existence of a Norm may be known."

PURPOSE RELATION normIsNotApplicableForBF
{+It should be possible for a BusinessFunction to specify why a NormText that it should comply with, is not applicable.+}
normIsNotApplicableForBF :: Norm * BusinessFunction
MEANING "For a NormText, it can be decided that it is not applicable to an BusinessFunction."

PURPOSE RELATION bfWantsToBeCompliantWithNorm
{+An BusinessFunction must be able to register its wish to become and/or remain compliant with a NormText from an intrisic motivation.+}
bfWantsToBeCompliantWithNorm :: BusinessFunction * Norm
PRAGMA "" " wants to be compliant with "
MEANING "For every BusinessFunction it is known with which Norms it wants to be compliant."

PURPOSE RELATION bfMustComplyWithNorm
{+In order to ascertain what needs to be done (again) to be(come) compliant, for every BusinessFunction it must be known to which Norms compliance is required.+}
bfMustComplyWithNorm :: BusinessFunction * Norm
PRAGMA "" " must be compliant with "
MEANING "For every BusinessFunction it is known with which Norms it must be compliant."

PURPOSE RELATION bfIsCompliantWithNorm
{+It must be possible to assess which BusinessFunctions are compliant with what Norms.+}
bfIsCompliantWithNorm :: BusinessFunction * Norm
PRAGMA "" " is compliant with "
MEANING "For every BusinessFunction it is known with which Norms it is compliant."

ENDPROCESS {-**Was: PATTERN**-}

--[NormHierarchies]--
PROCESS {-**Was: PATTERN**-} "NormHierarchies"
PURPOSE PROCESS {-**Was: PATTERN**-} "NormHierarchies"
{+In order to be(come) compliant, it must be established with what one would want to be compliant. This may concern standards, laws, contracts (SLA's), policy documents, maturity level specifications, etc. Such documents contain texts that are organized in a hierarchical fashion (chapters, sections, etc., or clauses, sub-clauses, or articles, items, etc.), and that have the property that one may be(come) compliant with that text. We use the term 'NormHierarchy' to refer to hierarchies of such texts (which we call 'NormText's).+}

CLASSIFY NormHierarchy ISA Norm

PURPOSE RELATION nhAccountableBF
{+Whenever a problem arises when be(com)ing compliant with some NormHierarchy, it may be useful to know the BusinessFunction that is accountable for the (texts within that) NormHierarchy, as it opens up the possibility to get in touch, discuss, and resolve any issues. This can be useful e.g. for NormHierarchies such as contracts and SLA's.+}
nhAccountableBF :: NormHierarchy * BusinessFunction [UNI] --$Note that an Organization is also an BusinessFunction
PRAGMA "" " has been issued by "
MEANING "For every NormHierarchy, its issueing BusinessFunction may be known."

PURPOSE IDENT NormHierarchies {+Every NormHierarchy must be identifiable. To do so, we use a combination of its ID and its version."+}
IDENT NormHierarchies: NormHierarchy(normAbbrID,nhVersion)

PURPOSE RELATION nhVersion
{+NormHierarchies are regularly being reviewed, which leads to changes in both their structure and their content. Thus, it must be possible to refer to the individiual revisions of a NormHierarchy.+}
nhVersion :: NormHierarchy * NHVersion [UNI] --**[TOT] moet erbij**--
MEANING "Every NormHierarchy has a version."

PURPOSE RELATION nhSourceDoc
{+A NormHierarchy is usually contained in some Document, that may contain information that may be useful for those wanting to comply with it. Exmamples of such content are: an introduction, the scope of application, best practices, etc. Therefore, (a reference to) the location of such documents may need to be registered.+}
nhSourceDoc :: NormHierarchy * Document [UNI]
MEANING "A NormHierarchy is described in a (source)document."

ENDPROCESS {-**Was: PATTERN**-}

--[Controls]--
PROCESS {-**Was: PATTERN**-} "Controls"
PURPOSE PROCESS {-**Was: PATTERN**-} "Controls"
{+One of the ways that a BusinessFunction has to arrange for compliance with a NormText, is to specify Controls (which describe the measures that the BusinessFunction takes). If a BusinessFunction wants to be compliant with a NormHierarchy, the BusinessFunction must in principle comply with every NormText of that NormHierarchy. The GRCengine specifies that for every such NormText, there must be (at least) one Control that specifies how this is achieved. This pattern specifies the terminology and constraints that are needed for this.+}
PURPOSE PROCESS {-**Was: PATTERN**-} "Controls"
{+Controls by themselves need not be very specific. In particular, control templates as can be found in standards such as ISO 27002, are not very specific. An example is that 'strong passwords' are required when logging into some system. For different BusinessFunctions (systems, in the example) this may mean different things. Hence, before a Control can be implemented in a BusinessFunction, the specifics have to be specified. This pattern introduces the terminology that is needed to adapt the generic texts of Controls into specific requierments for BusinessFunctions.+}

--IDENT Controls: Control(ctrlIsOwnedByExpOfBF,ctrlIsImpldByOblOfBF,ctrlID) --$Note that relations other than the ID refer  to dirty identifiers (that are unique). Therefore the specified combination is unique

ctrlID :: Control * Text [UNI,TOT]
MEANING "A Control as a name (ID)"

PURPOSE RELATION ctrlAuthor
{+Controls are being authored. In order to ask for further explanation, the author must be known.+}
ctrlAuthor :: Control * Person [UNI]
MEANING "A Control has been authored by a Person"

PURPOSE RELATION ctrlSpecification
{+Whenever a Control applies to a BusinessFunction, the requirements that the Control poses to that particular  BusinessFunction must be made specific.+}
ctrlSpecification :: Control * Blob [UNI]
PRAGMA "The requirement text of " " is "
MEANING "Controls should provide text that specifies the requirement it poses."

PURPOSE RELATION ctrlCoversCtrl
{+A Control can exist for the purpose of (partially) 'covering' or satisfying (the requirement or specification of) another Control. In such cases, that other control must be registered.+}
ctrlCoversCtrl :: Control * Control [UNI,IRF,ASY]
PRAGMA "" " is a detailed requirement (partial coverage) of Control "
MEANING "Controls can exist for the purpose of satisfying another Control."

RULE "Integrity of covering obligations": ctrlIsOwnedByExpOfBF~;ctrlCoversCtrl;ctrlIsImpldByOblOfBF |- I
MEANING "A Control that covers another control is an expectation of the BF that has this other Control as an obligation"

PURPOSE RELATION ctrlNorm
{+Every Control may exist for the purpose of complying with one (or more) NormText(s). Whenever a BusinessFunction must comply with Norms in  different NormHierarchies that are more or less alike, such Norms may be covered by the same Control(s).+}
ctrlNorm :: Control * NormText
MEANING "A Control may exist to comply with one (or more) ormText(s)"

PURPOSE RELATION ctrlNAReason
{+If the owner of a BusinessFunction has good reasons for not implemening (the requirements of) a Control, it must be able to administer those.+}
ctrlNAReason :: Control * Blob [UNI]
MEANING "The decision to declare a Control 'not applicable', has a reason."

PURPOSE RULE "Integrity of NAReasoning"
{+A Control can have a reason for being not applicable, in any of the following circumstances:
\begin{itemize}
\item if the Control exists for compliance with a Control. In this case, the NAReason says why the Control is not applicable to the ctrlRequester.
\item if the Control exists to satisfy another control. In this case, the NAReason says why it does not contribute to the satisfaction of the other control.
\end{itemize}
-}
RULE "Integrity of NAReasoning": I[Control] /\ ctrlNAReason;ctrlNAReason~ |- ctrlNorm;ctrlNorm~ \/ ctrlCoversCtrl;ctrlCoversCtrl~
MEANING "Controls may only be assigned an NAReason if there is a Norm to which that applies, or if the Control exists to satisfy another Control"

PURPOSE RULE "Non-applicability reasons must be kept together"
{+If a NormText is not applicable for a BusinessFunction, all reasons for that must be mentioned in a single Control. Note that this implies that when a BusinessFunction has multiple Controls to comply with a NormText, the NormText cannot be not-applicable.+}
RULE "Non-applicability reasons must be kept together":
   (ctrlNorm;ctrlNorm~ /\ ctrlIsImpldByOblOfBF;ctrlIsImpldByOblOfBF~);-I[Control] |- -(ctrlNAReason;V)
MEANING "If a NormText is not applicable to a BusinessFunction, there is a single Control that mentions all reasons for that."
VIOLATION (SRC ctrlIsOwnedByExpOfBF, TXT " may have only 1 Control for NormText ", TGT ctrlNorm, TXT ", because the NormText is not applicable for it.")

PURPOSE RELATION ctrlIsOwnedByExpOfBF
{+A Control expresses a specification that one BusinessFunction expects another BusinessFunction to implement. that specifies a Control, and hence is accountable for the implementation of its specifications in the associated BusinessFunction, and the correct functioning thereof, is called the owner of the Control.+}
ctrlIsOwnedByExpOfBF :: Control * BusinessFunction [UNI] --**[TOT] moet erbij**--
PRAGMA "For controlling (the realization) of " ", " " is accountable."
MEANING "For controlling (the realization) of a Control, one BusinessFunction is accountable."

PURPOSE RELATION ctrlKEI
{+The correct functioning of a Control (from the perspective of its Owner) can best be judged by the effects that the owner expects that the Control must have. A Key Effect Indicator (KEI) specifies such an effect. If done correctly, KEIs do not refer to implementation details.+}
ctrlKEI :: Control * Blob [UNI]
MEANING "A Control may specify KEIs for the assessment (by its owner) of its proper functioning."

PURPOSE RELATION ctrlIsImpldByOblOfBF
{+A Control exists, amongst others, to register the requirements for a specific BusinessFunction as they follow from a specific Control. Therefore, we must know the BusinessFunction to which the Control applies.+}
ctrlIsImpldByOblOfBF :: Control * BusinessFunction [UNI] --**[TOT] moet erbij**--
PRAGMA "" " is a requirement to BusinessFunction "
MEANING "Controls are requirements to one specific BusinessFunction."

PURPOSE RELATION ctrlKPI
{+The correct functioning of a Control (from the perspective of its implementer) can best be judged by the performance that the implementer expects the Control to have. A Key Performance Indicator (KEI) specifies the kind of performance. KPI's may, or may not, refer to implementation details.+}
ctrlKPI :: Control * Blob [UNI]
MEANING "A Control may specify KPIs for the assessment (by its implementer) of its proper implementation."

RULE "Controls must be assigned an Implementor BF before setting properties": ctrlIsAccepted \/ ctrlIsImplemented \/ (I /\ ctrlNAReason;ctrlNAReason~) |- ctrlIsImpldByOblOfBF;ctrlIsImpldByOblOfBF~
MEANING "A Control can only be N/A, accepted, or implemented if there is a BusinessFunction that is responsible for this."

PURPOSE RELATION ctrlIsInternal -- is: gewetensvraag
{+A Control that is specified by a BusinessFunction on behalf of itself, is called an 'internal Control' (it is internal to the BusinessFunction). Knowing about this property is relevant because such Controls cannot be 'N/A' as this is incoherent.+}
ctrlIsInternal :: Control * Control [PROP]
MEANING "A Control may have the property of being internal to its owning BusinessFunction."

PURPOSE RELATION ctrlIsSpecified
{+In order to monitor progress towards fully functional Controls, an auditor may test the specifications, implementations and proper functioning of Controls. Therefore, it must be possible te establish that the specifications are available for implementing the Control.+}
ctrlIsSpecified :: Control * Control [PROP]
MEANING "A Control may have the property that it is specified."

RULE "Internal Controls cannot have a NAReason": ctrlIsInternal |- -(ctrlNAReason;ctrlNAReason~)
MEANING "Internal Controls cannot have a NAReason"
MESSAGE "Internal Controls that have a NAReason:"
VIOLATION (TXT "Internal control ", SRC I, TXT " may not have a reason for being N/A.")

PURPOSE RELATION ctrlIsAccepted
{+A Control may be specified by a BusinessFunction, but that does not mean that it will be accepted by (the owner of) the BusinessFunction at which it is aimed. Therefore, we need to be able to explicitly register this.+}
ctrlIsAccepted :: Control * Control [PROP]
MEANING "A Control may or may not be accepted by (the owner of) the BusinessFunction at which it is aimed."

RULE "Acceptance and N/A are mutually exclusive": -(ctrlIsAccepted /\ ctrlNAReason;ctrlNAReason~)
MEANING "Acceptance of an Obligation and having an N/A Reason at the same time, is inconsistent."
VIOLATION (TXT "Control ", SRC I, TXT " cannot be marked as Accepted and have a N/A-Reason at the same time.")

RULE "Internal Controls must always have the property of being accepted.": ctrlIsInternal |- ctrlIsAccepted
MEANING "Internal Controls must always have the property of being accepted."
MESSAGE "Internal Controls that do not have the property of being accepted:"
VIOLATION (TXT "Internal control ", SRC I, TXT " does not have the property of being accpeted.")

ctrlIsAnIssue :: Control * Control [PROP]
MEANING "A Control may or may not be an issue between its owner and implementer."

RULE "Internal Controls may NOT have the property of being an issue.": ctrlIsInternal |- -ctrlIsAnIssue
MEANING "Internal Controls may NOT have the property of being an issue."
MESSAGE "Internal Controls that have the property of being an issue:"
VIOLATION (TXT "Internal control ", SRC I, TXT " has the property of being an issue.")

PURPOSE RELATION ctrlIsNotApplicable
{+If either a Control is not specified, or there are reasons for the owner of a BusinessFunction to declare a Control as being not applicable, we say that this BusinessFunction has the property of being not applicable.+}
ctrlIsNotApplicable :: Control * Control [PROP]
MEANING "The Control has the property of being not applicable to the BusinessFunction that should have implemented the control."

PURPOSE RULE "Integrity of Control properties is violated (see documentation for details)."
{+Checking the consistency/coherence of Control properties in the case wehre the Control is specified, allows us to validate the behaviour of the ExecEngine and/or manual modification of such properties.+}
RULE "Integrity of Control properties is violated (see documentation for details).": 
    ctrlIsSpecified |-
        (-ctrlIsNotApplicable /\  ctrlIsAccepted /\ -ctrlIsAnIssue)
     \/                        (-ctrlIsAccepted /\  ctrlIsAnIssue) -- Deze term is afgeleid uit:
--   \/ (-ctrlIsNotApplicable /\ -ctrlIsAccepted /\  ctrlIsAnIssue)
--   \/ ( ctrlIsNotApplicable /\ -ctrlIsAccepted /\  ctrlIsAnIssue)
MEANING "If a Control is specified, properties may be set only in specific constellations."
MESSAGE "Specified Controls that violate the integrity of their properties:"
VIOLATION (TXT "Control ", SRC I
          ,TXT ": N/A=",   SRC ctrlIsNotApplicable;V;'T'[Message] \/ -ctrlIsNotApplicable;V;'F'[Message]
          ,TXT ", accpt=", SRC ctrlIsAccepted     ;V;'T'[Message] \/ -ctrlIsAccepted     ;V;'F'[Message]
          ,TXT ", issue=", SRC ctrlIsAnIssue      ;V;'T'[Message] \/ -ctrlIsAnIssue      ;V;'F'[Message]
          ,TXT ", intrn=", SRC ctrlIsInternal     ;V;'T'[Message] \/ -ctrlIsInternal     ;V;'F'[Message]
          )

--PURPOSE RULE "Integrity of unspecified Control properties" {+Checking the consistency/coherence of Control properties in the case wehre the Control is not specified, allows us to validate the behaviour of the ExecEngine and/or manual modification of such properties.+}
RULE "If a Control is NOT specified, other properties may not be set.": 
--RULE "Integrity of unspecified Control properties": 
   I /\ -ctrlIsSpecified |- ctrlIsNotApplicable /\ -ctrlIsAccepted /\ -ctrlIsAnIssue
MEANING "If a Control is NOT specified, other properties may not be set."
MESSAGE "UNspecified Controls that violate the integrity of their properties:"
VIOLATION (TXT "Control ", SRC I
          ,TXT ": N/A=",   SRC ctrlIsNotApplicable;V;'T'[Message] \/ -ctrlIsNotApplicable;V;'F'[Message]
          ,TXT ", accpt=", SRC ctrlIsAccepted     ;V;'T'[Message] \/ -ctrlIsAccepted     ;V;'F'[Message]
          ,TXT ", issue=", SRC ctrlIsAnIssue      ;V;'T'[Message] \/ -ctrlIsAnIssue      ;V;'F'[Message]
          ,TXT ", intrn=", SRC ctrlIsInternal     ;V;'T'[Message] \/ -ctrlIsInternal     ;V;'F'[Message]
          )

PURPOSE RELATION ctrlAuditStatus
{+In order to see which Controls are in need of attention, the audit status of such Controls must be registered.+}
ctrlAuditStatus :: Control * AuditStatus [UNI]
MEANING "A Control may have an AuditStatus"

PURPOSE RELATION ctrlIsImplemented
{+In order to monitor progress towards fully functional Controls, an auditor may test the specifications, implementations and proper functioning of Controls. Therefore, it must be possible te establish that the Control is implemented.+}
ctrlIsImplemented :: Control * Control [PROP]
MEANING "A Control may have the property that it is implemented."

PURPOSE RELATION ctrlIsEffective
{+In order to monitor progress towards fully functional Controls, an auditor may test the specifications, implementations and proper functioning of Controls. Therefore, it must be possible te establish the effectiveness of the Control.+}
ctrlIsEffective :: Control * Control [PROP]
MEANING "A Control may have the property that it is effective."

RULE "Effectiveness of a Control can only be established AFTER it has been implemented.": ctrlIsEffective |- ctrlIsImplemented
MEANING "Effectiveness of a Control can only be established AFTER it has been implemented."

ENDPROCESS {-**Was: PATTERN**-}

--[Glossary]--

CONCEPT Blob "a long text" TYPE "Blob"

PURPOSE CONCEPT Control
{+Implementing a single Control usually touches upon multiple BusinessFunctions that do different things. Therefore, requirements need to be registered for every pair (Control,BusinessFunction) for which it is true that the BusinessFunction (partly) implements that Control; such requirements are specific for both the Control and the BusinessFunction. We use the term 'Control' to generically refer to such pairs.+}
CONCEPT Control "a pair (Control,BusinessFunction) for which it is true that the BusinessFunction (partly) implements that Control"

PURPOSE CONCEPT BusinessFunctionID
{+BusinessFunctions must be identifiable.+}
CONCEPT BusinessFunctionID "an identifying text (the name) for a BusinessFunction"

PURPOSE CONCEPT Control
{+An BusinessFunction may comply with a NormText by deciding about (additional) requirements for selected BusinessFunctions, such that when these requirements are satisfied, the BusinessFunction complies with the NormText. Alternatively, the BusinessFunction may provide reasons why the NormText is not applicable, thus explaining its non-compliance.+}
CONCEPT Control "an administrative object, owned by a BusinessFunction and pertaining to one or more Norms, that administrates requirements to BusinessFunctions for compliance with such Norms, or reasons for the non-applicability of the NormText for the BusinessFunction"

PURPOSE CONCEPT NHVersion
{+The content of NormHierarchies may change in the course of time as they are continually revised. Therefore, it is necessary to be able to refer to a specific version of a NormHierarchy.+}
CONCEPT NHVersion "a text that allows one to distinguish between different verions of a NormHierarchy"

PURPOSE CONCEPT NormHierarchy
{+BusinessFunctions use GRCengine to become and remain compliant to norms as specified in standards, laws and regulations, maturity levels etc. They do so because the want to achieve the goal set forth by such standards, such as the improvement of their security, maturity, quality etc., or because compliance entitles them to a certificate that they may show to their customers. Such standards, laws, etc. have in common that they are hierarchies of Norms. +}
CONCEPT NormHierarchy "a hierarchically structured set of Norms, compliance with which aims to fulfill a certain goal"

PURPOSE CONCEPT NormHierarchyFullID
{+Every NormHierarchy must have a short identifying text with which it can be referenced.+}
CONCEPT NormHierarchyFullID "a (short) text that identifies a NormHierarchy"

PURPOSE CONCEPT NormText
{+Standards, laws and regulations, policies, contracts etc. contain texts (measures, rules, guidelines) that must be complied with. Such texts (that can be complied with) is called a NormText. Note that it is not necessary for a NormText that it is unambiguously clear when it is (or is not) complied with.+}
CONCEPT NormText "a (possibly composite) text (measure, rule, guideline), that a BusinessFunction may comply with"

CONCEPT Text "data in the form of words or alphabetic characters"
ENDCONTEXT