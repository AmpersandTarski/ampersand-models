CONTEXT Events LATEX

PATTERN Events
CONCEPT Event "An event is a change of the state of an information system."
CONCEPT Item "An item is a thing that resides in an information system. Items are the elements of the state of a system."

PURPOSE CONCEPT Event
{+Each event yields a new state.
To identify Events with states means that the creation of a new event
implicitly creates a new state. This simplifies the theory, because relations `to[Event*Event]`
and `from[Event*Event]` come together in one relation `pred[Event*Event]`.
+}

PURPOSE RELATION prec
{+Events are ordered partially in time.
For that purpose the relation $e_1\ \id{prec}\ e_2$ represents the fact that event $e_1$ immediately precedes event $e_2$.
+}
RELATION prec[Event*Event]
 =[ ("E1", "E2"); ("E2", "E3"); ("E2", "E4"); ("E4", "E5") ]

ENDPATTERN

PATTERN "States"
PURPOSE RELATION state
{+Since events are meant to change states, the state left by the event is represented by a relation, state[Event*State].
+}
RELATION state[Event*State] [UNI]
 = [("E1","S1")]
RULE totState : I |- state;state~
PURPOSE RELATION delta
{+The change caused by an event e is represented by a function, delta:Event->Delta.
+}
RELATION delta[Event*Delta] [UNI]
 = [("E1","D1"), ("E2","D2"), ("E3","D3"), ("E4","D4"), ("E5","D5")]

RULE totDelta : I |- delta;delta~

RELATION l[Oplus*State] [UNI]
RELATION r[Oplus*Delta] [UNI]
RELATION oplus[Oplus*State] [UNI]

PURPOSE RULE calcState
{+A new event gets a new state, which can be computed by means of the delta.
+}
RULE calcState : state~;prec;delta |- l~;r
VIOLATION (TXT "{EX} NewStruct;Oplus"
               ,TXT ";l;Oplus;_NEW;State;", SRC I
               ,TXT ";r;Oplus;_NEW;Delta;", TGT I
)
PURPOSE RULE changeOfState
{+An event causes a change of state, which is enforced by the following rule
+}
RULE changeOfState : prec~;state;l~ /\ delta;r~ |- state;oplus~
VIOLATION (TXT "{EX} NewStruct;State"
               ,TXT ";state;Event;", SRC I,TXT ";State;_NEW"
               ,TXT ";oplus;Oplus;", TGT I,TXT ";State;_NEW"
)
ROLE ExecEngine MAINTAINS calcState, changeOfState
ENDPATTERN

PATTERN "Transitive Closure"

precCopy :: Event*Event -- a copy of prec allows us to determine the (de)population events.
precPLUS :: Event*Event -- the transitive closure of both prec and precCopy

ROLE ExecEngine MAINTAINS "precTransitiveClosure"
RULE "precTransitiveClosure": prec = precCopy
VIOLATION (TXT "{EX} TransitiveClosure;prec;Event;precCopy;precPLUS")

-- Note that the following is true if precPLUS is transitive, but it does not guarantee that this is the smallest closure of prec
--RULE "precPLUS is reflexive":  I |- precPLUS
RULE "precPLUS is antisymmetric":  precPLUS/\precPLUS~ |- I
RULE "precPLUS is transitive":  precPLUS;precPLUS |- precPLUS

ENDPATTERN

INTERFACE Event : I[Event]
BOX   [ Event    : I
      , precedes : prec
      , succedes : prec~       
      , precPLUS : precPLUS cRud
      , state    : state    cRud
      , delta    : delta    CRUd
      ]

INTERFACE Events : "_SESSION"
BOX   [ "" : V[SESSION*Event]
COLS  [ Event    : I
      , state    : state    cRud
      , delta    : delta    CRUd
      ]
      ]
ENDCONTEXT