CONTEXT Scopes IN ENGLISH
{-There are many use cases where texts, meaning, semantics etc. have to be scoped. 
Examples include case-management, judicial cases, a reasoning argument,
the setting up of contracts (transactions), and more.

This module provides a mechanism for grouping all sorts of things.
We use the concept `Scope` to distinguish between such groups,
so a `Scope` is a set of 'structured contents'.
In order to work with Scopes, we introduce the following attributes:
- the name or ID of the scope (`scopeID`)
- the owner of a scope (`scopeOwnerAcc`), i.e. the Account that controls the scope
- a description (`scopeDescr`), i.e. free text for the scope owner to fill.

The structured contents of a Scope can be Atoms of any kind.
Prerequisite for associating such Atoms to a Scope is
the existence of a relation that links such Atoms to a Scope.
An example for `TText`s is the existence of the relation `ttScope`.

`scopeIII[Scope*Scope]` says that SRC Scope 'Is Included In' TGT Scope (similar to a is-subset-of relation)
So everything in SRC Scope is in TGT Scope, but not the other way around.
Additions in SRC Scope propagate to the TGT Scope, but modifications and deletions do not.
See file "TText_Inclusion.svc" and file "Scope_Inclusion.svc" for details/examples.

`scopeIsaCC[Scope]` is a [PROP]-relation that says the Scope is a Carbon Copy of some other scope,
meaning that it occurs as TGT in some (SRC,TGT) in precisely one scopeIII. The CC-property then ensures
that deletions in that SRC scope will then also propagate to every of its 'carbon copies'.
Note that a carbon copied scope may still contain other stuff that is specific to that scope,
as long as that stuff has no bearing with the scope of which it is a carbon copy.
Examples/details can be found in the file "TText_CarbonCopy.svc" and "Scope_CarbonCopy.svc".
-}
META "authors" "Rieks Joosten (rieks.joosten@tno.nl)"

--[TText Scopes]
-- We do not specify (e.g.) IDENT Scopes: Scope(scopeOwnerAcc,scopeID) so as to enable other uses, that require a different IDENT 
RELATION scopeID[Scope*ScopeID] [UNI] -- a short name that helps (its owner) to refer to the Scope.
RELATION scopeOwnerAcc[Scope*Account] [UNI] -- The Account that is authorized to change and/or delete the Scope. We define it here becuase it is in the IDENT statement, which cannot be updated easily...
--**NOTE that adding/changing relations here below requires adjustment of the ScopeCopying service.**--
RELATION scopeDescr[Scope*ScopeDescr] [UNI] -- descriptive text or purpose of the Scope (may be used e.g. in (popup) helptexts)

--[Declarations for relations used in extensions]
-- Because we have no conditional source file texts (e.g. as in #IF ($scopeinclusion) <some lines of source code> #ENDIF), we supply the declaration of some relations here unconditionally
RELATION scopeIII[Scope] [IRF,ASY] -- SRC Scope 'Is Included In' the TGT Scope (see Scope_Inclusion.svc, TText_Inclusion.svc for details).
MEANING "The structured content of a (SRC) Scope may be included in that of a (TGT) Scope"
RELATION scopeIsaCC[Scope] [PROP] -- A Scope may have the property of being a Carbon Copy (CC) - see the comments at the beginning of the file.
MEANING "A Scope may have the property of being a carbon copy of another Scope"

--[Glossary]

CONCEPT Scope "a set of TTexts (or other Atoms) that are controlled by a single authority and (together) serve a particular purpose"

CONCEPT ScopeID "a short name that helps to refer to the Scope"
REPRESENT ScopeID TYPE ALPHANUMERIC

CONCEPT ScopeDescr "descriptive text or purpose of the Scope"
REPRESENT ScopeDescr TYPE ALPHANUMERIC

ENDCONTEXT