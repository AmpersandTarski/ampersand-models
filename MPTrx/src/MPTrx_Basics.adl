CONTEXT MPTrx_Basics IN ENGLISH
{-See the `README` file for an introduction to the basic ideas behind Multi-Party transactions.-}

--[Multi-Party Transactions - TText Extensions]

IDENT MPTrxs: Scope(scopeOwnerAcc,scopeID,(mptrxObjName;ttValue~ /\ ttScope~))

mptrxIsaCasus :: Scope * Scope  [PROP] -- a MPTrx can have the property of being a case/casus (rather than a template).
mptrxObjName  :: Scope * TTValue [UNI] -- Reference to the Subject/Object of the MPTrx

ROLE ExecEngine MAINTAINS "Auto create TransactionObject TText"
RULE "Auto create TransactionObject TText": mptrxObjName |- ttScope~;ttValue
VIOLATION (TXT "{EX} InsAtom;TText"
             ,TXT "{EX} InsPair;ttScope;TText;_NEW;Scope;", SRC I[Scope]
             ,TXT "{EX} InsPair;ttName;TText;_NEW;TTName;TransactionObject"
             ,TXT "{EX} InsPair;ttValue;TText;_NEW;TTValue;", TGT I
          )

--[TText extensions - Objectives]--
ttIsaObjective :: TText * TText [PROP] -- a TText may have the property of being an objective of a party/organization with the (associated) risk of not achieving it
RULE "Objectives must have a name": ttIsaObjective |- ttName;ttName~ -- so that they can be referred to (e.g. in Interfaces).
RULE "Every Objective must be relevant for the 'promise' and/or 'accept' decision": ttIsaObjective |- ttPromise \/ ttAccept
RULE "Template Objectives cannot be addressed": ttIsaObjective-ttIsaCasus |- -objIsAddressed

PURPOSE RELATION objIsDisabled 
{+ You cannot delete an objective if it is a copy (with an unchanged meaning), as it will automatically be re-created.
Still, in a casus, the owner of an objective should be able to choose not to pursue the objective.
This allows template owners to supply many objectives that may be useful, but can be disabled in a casus.
Thus, we need a way to disable such objectives. +}
objIsDisabled :: TText * TText [PROP] -- a TText may have the property that it is a disabled objective.
ROLE ExecEngine MAINTAINS "Only Objectives that are a copy of a template objective with unchanged meaning can be disabled"
RULE "Only Objectives that are a copy of a template objective with unchanged meaning can be disabled":
   objIsDisabled -- A TText can only be disabled
|- ttIsaObjective -- if it is an objective that is a copy with unchanged meaning, i.e.:
   /\ ttICO;(ttDescr<>ttDescr~) -- its description has not changed and 
   /\ ttICO;(ttTemplate<>ttTemplate~) -- its template has not changed
VIOLATION (TXT "{EX} DelPair;objIsDisabled;TText;", SRC I[TText], TXT ";TText;", TGT I[TText])

objIsEnabled :: TText * TText [PROP] -- a TText may have the property that it is an enabled objective.
ROLE ExecEngine MAINTAINS "InsPair objIsEnabled"
RULE "InsPair objIsEnabled": ttIsaObjective-objIsDisabled |- objIsEnabled
VIOLATION (TXT "{EX} InsPair;objIsEnabled;TText;", SRC I[TText], TXT ";TText;", TGT I[TText])
ROLE ExecEngine MAINTAINS "DelPair objIsEnabled"
RULE "DelPair objIsEnabled": objIsEnabled |- ttIsaObjective-objIsDisabled
VIOLATION (TXT "{EX} DelPair;objIsEnabled;TText;", SRC I[TText], TXT ";TText;", TGT I[TText])

objSHRoleName :: TText * TTName [UNI] -- We need this because ttName is not [UNI] and we do not want users in INTERFACES to be able to have multiple stakeholder (names) as value suppliers.
ROLE ExecEngine MAINTAINS "Initialize ttValSupName for Objectives"
RULE "Initialize ttValSupName for Objectives": 
   (ttIsaObjective - ttValSupName;ttValSupName~);objSHRoleName |- ttValSupName
VIOLATION (TXT "{EX} InsPair;ttValSupName;TText;", SRC I[TText], TXT ";TTName;", TGT I[TTName])
ROLE ExecEngine MAINTAINS "ttValSupNames for Objectives must be the same as the objOfSHRName for that Objective"
RULE "ttValSupNames for Objectives must be the same as the objOfSHRName for that Objective": 
   ttIsaObjective;ttValSupName |- objSHRoleName
VIOLATION (TXT "{EX} DelPair;ttValSupName;TText;", SRC I[TText], TXT ";TTName;", TGT I[TTName])

--[Addressing Objectives]--
objIsAddressed :: TText * TText [PROP] -- A objective may have the property that it has been addressed.
RULE "Only Objectives that are enabled can be addressed": objIsAddressed |- objIsEnabled
{- Whether or not a Objective is addressed must be reflected in its TTValue, for the following purposes:
1. the validity of TTexts is determined by the fact that such a value exists.
2. it creates a (chain of) Assignment(s), by which the history can be traced.
   Future functionality that allows the recovery of the last value will also be needing this
-}
objCheckFlg :: TText * TText [PROP] -- TTValue has been set to 'checked'
objClearFlg :: TText * TText [PROP] -- TTValue has been set to 'unchecked'
ROLE ExecEngine MAINTAINS "Set Objective TTValue to 'disabled'"
RULE "Set Objective TTValue to 'disabled'": objIsDisabled |- (I-objCheckFlg)-objClearFlg
VIOLATION (TXT "{EX} DelPair;objCheckFlg;TText;", SRC I[TText], TXT ";TText;", TGT I[TText]
          ,TXT "{EX} DelPair;objClearFlg;TText;", SRC I[TText], TXT ";TText;", TGT I[TText]
          ,TXT "{EX} InsPair;ttValue;TText;", SRC I[TText], TXT ";TTValue;" 
                , SRC ttName
                , TXT " (disabled)"
          )
ROLE ExecEngine MAINTAINS "Set Objective TTValue to 'checked'"
RULE "Set Objective TTValue to 'checked'": objIsEnabled /\ objIsAddressed |- objCheckFlg-objClearFlg
VIOLATION (TXT "{EX} InsPair;objCheckFlg;TText;", SRC I[TText], TXT ";TText;", TGT I[TText]
          ,TXT "{EX} DelPair;objClearFlg;TText;", SRC I[TText], TXT ";TText;", TGT I[TText]
          ,TXT "{EX} InsPair;ttValue;TText;", SRC I[TText], TXT ";TTValue;" 
                , SRC ttName
                , TXT " (ok)"
          )
ROLE ExecEngine MAINTAINS "Set Objective TTValue to 'unchecked'"
RULE "Set Objective TTValue to 'unchecked'": objIsEnabled-objIsAddressed |- objClearFlg-objCheckFlg
VIOLATION (TXT "{EX} InsPair;objClearFlg;TText;", SRC I[TText], TXT ";TText;", TGT I[TText]
          ,TXT "{EX} DelPair;objCheckFlg;TText;", SRC I[TText], TXT ";TText;", TGT I[TText]
          ,TXT "{EX} InsPair;ttValue;TText;", SRC I[TText], TXT ";TTValue;" 
                , SRC ttName
                , TXT " (NOT ok)"
          )

--[TText extensions - Variables]--
{- Every TText that is not an objective, and that is used by (another) TText, is a Variable
The property of (not) being a Variable is automatically maintained.
Note that a TText can be both a Variable and a TTParty - this is disjunct from being an Objective.
The property of (not) being a TTParty is also automatically maintained (by the TText module, in file "../TText/TTParty.adl")
-}
ttIsaVariable :: TText * TText [PROP] -- a TText may have the property of being a Variable
RULE "Every Variable must be relevant for the 'promise' and/or 'accept' decision": ttIsaVariable |- ttPromise \/ ttAccept

ROLE ExecEngine MAINTAINS "Set 'ttIsaVariable'"
RULE "Set 'ttIsaVariable'": (I[TText]-ttIsaObjective) /\ ttIsUsedBy;ttIsUsedBy~ |- ttIsaVariable
VIOLATION (TXT "{EX} InsPair;ttIsaVariable;TText;", SRC I[TText], TXT ";TText;", TGT I[TText])
ROLE ExecEngine MAINTAINS "Clear 'ttIsaVariable'"
RULE "Clear 'ttIsaVariable'": ttIsaVariable |- (I[TText]-ttIsaObjective) /\ ttIsUsedBy;ttIsUsedBy~
VIOLATION (TXT "{EX} DelPair;ttIsaVariable;TText;", SRC I[TText], TXT ";TText;", TGT I[TText])

--[TText extensions - relations]--
ttObjective :: TText * TTObjective   -- the Objective(s) that the satisfaction of the term aims to contribute to
--ttType      :: TText * Concept [UNI] -- Property/Type/Unit that defines everything about the TText
ttIsaCasus  :: TText * TText [PROP]  -- TText is a runtime TText (not a template).
ttPromise   :: TText * TText [PROP]  -- Property that the TText must be given a valid value in order to decide on Promise
ttAccept    :: TText * TText [PROP]  -- Property that the TText must be given a valid value in order to decide on Acceptance

--[[Multi-Party Transactions - the Real Stuff]]--
--[Propagation of Objectives]-- nice for e.g. Privacy ('doelbinding')
-- ** hier moet nog wat over worden nagedacht (of het wel goed/compleet is) en mogelijk aangepast **
--$één mogelijkheid zou kunnen zijn dat we een nieuwe relatie `ttInheritedObjective` introduceren, en `ttObjective` dan alleen voor Objectives laten gelden.
ROLE ExecEngine MAINTAINS "Determine TTObjective for dependent TTexts"
RULE "Determine TTObjective for dependent TTexts": 
   I[TText];ttIsUsedBy;ttObjective |- ttObjective
VIOLATION (TXT "{EX}_;InsPair_;ttObjective_;TText_;", SRC I, TXT "_;TTObjective_;", TGT I) -- -}
ROLE ExecEngine MAINTAINS "Release TTObjective for dependent TTexts"
RULE "Release TTObjective for dependent TTexts": 
   (I[TText]-ttIsaObjective);ttObjective |- ttIsUsedBy;ttObjective
VIOLATION (TXT "{EX}_;DelPair_;ttObjective_;TText_;", SRC I[TText], TXT "_;TTObjective_;", TGT I) -- -}

--[Transaction Templates]--
RELATION ttIsaCasus[TText*TText] [PROP] -- a TText can have the property of being a case/casus (rather than a template).
ROLE ExecEngine MAINTAINS "Assign ttIsaCasus property"
RULE "Assign ttIsaCasus property": I /\ ttScope;mptrxIsaCasus;ttScope~ |- ttIsaCasus
VIOLATION (TXT "{EX} InsPair;ttIsaCasus;TText;", SRC I, TXT ";TText;", TGT I)
ROLE ExecEngine MAINTAINS "Revoke ttIsaCasus property"
RULE "Revoke ttIsaCasus property": ttIsaCasus |- I /\ ttScope;mptrxIsaCasus;ttScope~
VIOLATION (TXT "{EX} DelPair;ttIsaCasus;TText;", SRC I, TXT ";TText;", TGT I)

--[Promisability]--
ttPromise   :: TText * TText [PROP] -- Property that the TText must be given a valid value in order to decide on Promise
ROLE ExecEngine MAINTAINS "Objectives without Promise or Accept property are assigned the Promise property"
RULE "Objectives without Promise or Accept property are assigned the Promise property":
   ttIsaObjective-ttAccept |- ttPromise
VIOLATION (TXT "{EX} InsPair;ttPromise;TText;", SRC I, TXT ";TText;", TGT I)

ROLE ExecEngine MAINTAINS "A TText must have the ttPromise property if it is used by a TText that has the ttPromise property"
RULE "A TText must have the ttPromise property if it is used by a TText that has the ttPromise property":
   ttIsUsedBy;ttPromise |- ttPromise;ttIsUsedBy
VIOLATION (TXT "{EX} InsPair;ttPromise;TText;", SRC I, TXT ";TText;", SRC I)

mptrxIsPromisable :: Scope * Scope [PROP]
MEANING "All objectives in the MPTrx that are marked as being relevant for the 'promise' decision, are satisfied"
ROLE ExecEngine MAINTAINS "Detect MPTrx is promisable"
RULE "Detect MPTrx is promisable": 
   I[Scope]-(ttScope~;(objIsEnabled /\ (ttPromise-objIsAddressed));ttScope) -- MPTrxs with all enabled promise-objectives are satisfied
   /\ ttScope~;(objIsEnabled /\ ttPromise);ttScope -- MPTrxs that have at least one enabled promise-objective
|- mptrxIsPromisable
VIOLATION (TXT "{EX} InsPair;mptrxIsPromisable;Scope;", SRC I, TXT ";Scope;", TGT I)
ROLE ExecEngine MAINTAINS "Revoke MPTrx is promisable"
RULE "Revoke MPTrx is promisable":
   mptrxIsPromisable 
|- I[Scope]-(ttScope~;(objIsEnabled /\ (ttPromise-objIsAddressed));ttScope) -- MPTrxs with all promise-objectives are satisfied
   /\ ttScope~;(objIsEnabled /\ ttPromise);ttScope -- MPTrxs that have at least one promise-objective
VIOLATION (TXT "{EX} DelPair;mptrxIsPromisable;Scope;", SRC I, TXT ";Scope;", TGT I) -- -}

--[Acceptability]--
ttAccept    :: TText * TText [PROP] -- Property that the TText must be given a valid value in order to decide on Acceptance
ROLE ExecEngine MAINTAINS "A TText must have the ttAccept property if it is used by a TText that has the ttAccept property"
RULE "A TText must have the ttAccept property if it is used by a TText that has the ttAccept property":
   ttIsUsedBy;ttAccept |- ttAccept;ttIsUsedBy
VIOLATION (TXT "{EX} InsPair;ttAccept;TText;", SRC I, TXT ";TText;", SRC I)

mptrxIsAcceptable :: Scope * Scope [PROP]
ROLE ExecEngine MAINTAINS "Detect MPTrx is acceptable"
RULE "Detect MPTrx is acceptable": 
   I[Scope]-(ttScope~;(objIsEnabled /\ (ttAccept-objIsAddressed));ttScope) -- MPTrxs with all accept-objectives are satisfied
   /\ ttScope~;(objIsEnabled /\ ttAccept);ttScope -- MPTrxs that have at least one accept-objective
|- mptrxIsAcceptable
MEANING "All criteria in the MPTrx are satisfied"
VIOLATION (TXT "{EX} InsPair;mptrxIsAcceptable;Scope;", SRC I, TXT ";Scope;", TGT I)
ROLE ExecEngine MAINTAINS "Revoke MPTrx is acceptable"
RULE "Revoke MPTrx is acceptable":
   mptrxIsAcceptable
|- I[Scope]-(ttScope~;(objIsEnabled /\ (ttAccept-objIsAddressed));ttScope) -- MPTrxs with all accept-objectives are satisfied
   /\ ttScope~;(objIsEnabled /\ ttAccept);ttScope -- MPTrxs that have at least one accept-objective
VIOLATION (TXT "{EX} DelPair;mptrxIsAcceptable;Scope;", SRC I, TXT ";Scope;", TGT I)

ENDCONTEXT