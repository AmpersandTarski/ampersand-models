CONTEXT "MPTrxUserInterfaces" IN ENGLISH

--[Overviews]--
INTERFACE "{Transactions}" FOR User: '_SESSION'[SESSION];sessionAccount cRud TABS
   [ "My cases": I[Account] cRud BOX <ROWSNL>
      [ "Create new case": I[Account] /\ sessionAccount~;'_SESSION';sessionAccount cRud BOX <COLSNL>
         [ "Required arguments": I[Account] cRud COLS
            [ "CasusID": accNewCasusID cRUd
            , "Template": accMPTrxTemplate cRUd
            ]
         , "Buttons": I cRud BOX <ROWSNL>
            [ "empty line": I-I cRud
            , "another empty line": I-I cRud
            , "Setup new transaction":  I[Account] cRud BOX <PropBtnPrimary> 
               [ "property": accCreateCasusReq cRUd
               , "disabled": I-(accMPTrxTemplate;V;accNewCasusID~) cRud
      --       , "popovertext": V;'To enable, fill in the Template and CasusID fields'[IfcText] cRud
               ]
            ]
         ]
      , "Only show cases when there is somtheing to whow":
         I /\ (tPartyAcc~;ttScope \/ scopeOwner~);mptrxIsaCasus;V cRud BOX <ROWSNL>
         [ "Header": V;'Cases in which I participate:'[IfcText] cRud <STRONG>
         , "Cases in which I participate": (tPartyAcc~;ttScope \/ scopeOwner~);mptrxIsaCasus cRud INTERFACE "{ShowMPTrxSummary}"
         ]
      ]
   , "Cases I may join":                     -- First, we look for TParties (seats, SHRoles) where 
      ( ( V;(I-tPartyReqdOrg;tPartyReqdOrg~) -- either the TParty does not require a specific organization
        \/ accOrg;tPartyReqdOrg~             -- or the user(account) is one of a req'd organization
        );(ttIsaTParty-tPartyAcc;tPartyAcc~) -- Then, the TParty must still be unoccupied
        ;ttScope;mptrxIsaCasus               -- and it must be a TParty in an MPTrx-casus
      - (tPartyAcc~;ttScope \/ scopeOwner~)  -- and we exclude cases in which the user is already a TParty or owner
      ) cRud INTERFACE "{ShowMPTrxSummary}"
   ]
POPULATION IfcText CONTAINS [ "Cases in which I participate:"]

INTERFACE "{ShowMPTrxSummary}" FOR User: I[Scope] cRud BOX <ROWSNL>
   [ "First, we show the MPTrx summary": I[Scope] cRud COLS
      [ "MPTrx" :  I[Scope] cRud LINKTO INTERFACE "{MPTrxCasus}"
      , "Description" : scopeDescr cRud
      , "Status" : I[Scope] cRud <MPTrxStatus>
--      , "My Auth.Level" : V[Scope*SESSION];'_SESSION' cRud BOX <ROWSNL> 
--         [ "ALvl": sessionAuthISOLevel cRud <ShowISOLevel> ]
      ]
--   , "Next, we instruct the user (when needed) to select a Party": I[Scope] INTERFACE "{OptionalParticipationWarning}"
   ]     

INTERFACE "{OptionalParticipationWarning}" FOR User: I[Scope] cRud BOX <ROWSNL>
   [ "This is to warn the user that he should select a Party":
        (V[Scope*SESSION]-(ttScope~;tPartyAcc;sessionAccount~;'_SESSION'))
        ;V;'If you want to participate, please claim a Party for yourself'[IfcText] <STRONG>
   ]     
POPULATION IfcText CONTAINS [ "If you want to participate, please claim a Party for yourself" ]

INTERFACE "{TransactionIsPromisedNotification}" FOR User: I[Scope] cRud BOX <ROWSNL>
   [ "This is to notify the user that the transaction has been promised":
        mptrxIsPromisable;V;'All parties have committed to the transaction'[IfcText] <STRONG>
   ]     
POPULATION IfcText CONTAINS [ "All parties have committed to the transaction" ]

--[MPTrx cases]--
INTERFACE "{MPTrxCasus}" FOR User: mptrxIsaCasus cRud TABS
   [ "Parties" : I[Scope] cRud BOX <ROWSNL> 
      [ "Transaction": I cRud INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable cRud INTERFACE "{TransactionIsPromisedNotification}"
      , "If we are not done": I-mptrxIsPromisable cRud INTERFACE "{TPartyManagement}"
      ]
   , "My to-do list" : I[Scope] cRud BOX <ROWSNL>
      [ "If we are not done": I-mptrxIsPromisable cRud BOX <ROWSNL>
         [ "Only show unevaluatable Variables if they exist":
              I /\ V;'_SESSION'
                   ;(  sessionAuthISOLevel;-isoLevelGTE;ttReqdLoA~
                    /\ sessionAccount;ttValSupAcc~
                    )
                   ;ttScope cRud BOX <ROWSNL>
            [ "Unevaluatable Variables": I cRud INTERFACE "{UnEvaluatableVariables}"
            ]
         , "Only show to-do Variables if they exist":
              I /\ 
                ttScope~ -- All TTexts in the MPTrx
                ;(  (ttIsaVariable-ttValue;ttValue~) -- with the property that they are a Variable without an assigned value
                 /\ V[TText*SESSION];'_SESSION'  -- and the user is authenticated with a LoA that is
                    ;(  sessionAuthISOLevel;isoLevelGTE;ttReqdLoA~ -- sufficiently large to allow editing
                     /\ sessionAccount;ttValSupAcc~ -- and the user occupies the SHRole that must provide the value
                 )   )
                 ;V
              cRud BOX <ROWSNL>
            [ "My to-do Variables": 
                ttScope~ -- All TTexts in the MPTrx
                ;(  (ttIsaVariable-ttValue;ttValue~) -- with the property that they are a Variable without an assigned value
                 /\ V[TText*SESSION];'_SESSION'  -- and the user is authenticated with a LoA that is
                    ;(  sessionAuthISOLevel;isoLevelGTE;ttReqdLoA~ -- sufficiently large to allow editing
                     /\ sessionAccount;ttValSupAcc~ -- and the user occupies the SHRole that must provide the value
                 )   ) 
                  cRud INTERFACE "{FillInVariables}"
            ]
         , "Only show to-do Objectives if they exist": 
              I /\ ttScope~ -- All TTexts in the MPTrx
                   ;(objvIsEnabled-objvIsAddressed) -- with the property that they are enabled, unaddressed Objectives
                   ;ttValSupAcc;sessionAccount~;'_SESSION' -- and the user occupies the SHRole that must provide the value
                   ;V
              cRud BOX <ROWSNL>
            [ "Objectives": 
                ttScope~ -- All TTexts in the MPTrx
                ;(objvIsEnabled-objvIsAddressed) -- with the property that they are enabled, unaddressed Objectives
                 cRud INTERFACE "{EvaluateObjective}" -- Ownership is considered by the interface.
            ]
         ]
      , "Transaction": I cRud INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable cRud INTERFACE "{TransactionIsPromisedNotification}"
      ]
   , "Revise/Supply Data" : I[Scope] cRud BOX <ROWSNL> -- These are only TTexts that the user must supply values for
      [ "If we are not done": I-mptrxIsPromisable cRud BOX <ROWSNL>
         [ "Only show evaluatable Variables if they exist":
              I /\ V;'_SESSION'
                   ;(  sessionAuthISOLevel;isoLevelGTE;ttReqdLoA~
                    /\ sessionAccount;ttValSupAcc~
                    )
                   ;ttScope cRud BOX <ROWSNL>
            [ "Variables to be valuated": I cRud INTERFACE "{EvaluatableVariables}"
            ]
         , "Only show unevaluatable Variables if they exist":
              I /\ V;'_SESSION'
                   ;(  sessionAuthISOLevel;-isoLevelGTE;ttReqdLoA~
                    /\ sessionAccount;ttValSupAcc~
                    )
                   ;ttScope cRud BOX <ROWSNL>
            [ "Current authentication level": V[Scope*SESSION];'_SESSION' cRud ROWS [ "You are authenticated at level" : sessionAuthISOLevel cRud <ShowISOLevel> ]
            , "Unevaluatable Variables": I cRud INTERFACE "{UnEvaluatableVariables}"
            ]
         ]
      , "Transaction": I cRud INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable cRud INTERFACE "{TransactionIsPromisedNotification}"
      ]
   , "(Re)evaluate Objectives" : I[Scope] cRud BOX <ROWSNL> -- These are objectives the user must evaluate
      [ "If we are not done": I-mptrxIsPromisable cRud BOX <ROWSNL>
         [ "Only show Objectives if they exist": I /\ ttScope~;(objvIsEnabled /\ ttValSupAcc;sessionAccount~;'_SESSION';V);ttScope cRud BOX <ROWSNL>
            [ "Objectives" : ttScope~;objvIsEnabled cRuD INTERFACE "{EvaluateObjective}"
            ]
         ]
      , "Transaction": I cRud INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable cRud INTERFACE "{TransactionIsPromisedNotification}"
      ]
{-
   , "Data transfers & Privacy" : I[Scope] cRud BOX <ROWSNL>
      [ "Only show DataTransfers if they exist for the user": 
         I /\ dtrfScope~;(dtrfSrc\/dtrfTgt)
              ;tPartyAcc;sessionAccount~;'_SESSION';V 
         cRud BOX <ROWSNL>
         [ "Data transfers" : I[Scope] cRud INTERFACE "ShowDataTransfers"
         ]
      , "Transaction": I cRud INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable cRud INTERFACE "{TransactionIsPromisedNotification}"
      ]
   , "Revise Objective Semantics" : I[Scope] cRud BOX <ROWSNL> -- These are objectives owned by the user in his capacity as a TParty
      [ "My Seat(s)" : ttScope~;(ttIsaTParty /\ tPartyAcc;sessionAccount~;'_SESSION';V) 
         cRud BOX <ROWSNL>
         [ "TParty header": I cRud BOX <COLSNL>
            [ "TParty text": V;'SHRole:'[IfcText] cRud
            , "TParty name": I cRud
            , "New objective text": V;'New objective:'[IfcText] cRud
            , "New objective name": tPartyNewObjectiveName cRUd
            ]
         ]
      , "My Objectives" : 
           ttScope~;(ttIsaTParty /\ tPartyAcc;sessionAccount~;'_SESSION';V) -- this is the list of TParties/SHRoles/seats that the user occupies
           ;ttValSupplier~;ttIsaObjective
         cRud INTERFACE "{EditMyObjectives}" -- The INTERFACE selects the objectives owned by the user
      , "My Variables": 
           ttScope~;(ttIsaTParty /\ tPartyAcc;sessionAccount~;'_SESSION';V)  -- RULE "Re-assign variable ownership" ensures appropriate ownership of variables
           ;tPartyAcc;(I /\ V;'_SESSION';sessionAccount);ttOwner~;ttIsaVariable
         cRud INTERFACE "{EditTemplateVariables}" -- The INTERFACE selects the variables owned by the user
      , "My ValSuppliers" : 
           ttScope~;(ttIsaTParty /\ ttOwner;sessionAccount~;'_SESSION';V) -- this is the list of TParties/SHRoles/seats that the user occupies
         cRud BOX <SHCOLS>
         [ "Name" : ttName cRUd
         , "Description" : ttDescr cRUd
         , "Req'd Org(s)" : tPartyReqdOrg cRUd
      -- , "Owner" : ttOwner cRud -- This is automatically filled in to be the session user
         , "ValSupplier for": ttValSupplier~ cRud 
         ]
      , "Transaction": I cRud INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable cRud INTERFACE "{TransactionIsPromisedNotification}"
      ]
-}
   ]
POPULATION IfcText CONTAINS [ "SHRole:", "New objective:"]
POPULATION IfcText CONTAINS [ "    Include/import template"]

--[TParties]--
INTERFACE "{TPartyManagement}" FOR User: ttScope~;ttIsaTParty cRud BOX <SHCOLS>
   [ " ": ttIsaTParty /\ ttScope;(I-mptrxIsPromisable);ttScope~ cRud BOX <COLSNL> -- Buttons, but only when transaction is NOT yet promised
      [  "Claim Role": -- user can claim a SHRole if...
            I-(tPartyAcc;tPartyAcc~)  -- the SHRole is not occupied
            /\ ( (ttIsaTParty-(tPartyReqdOrg;tPartyReqdOrg~)) -- and either no specific organization is required for this TParty
               \/ V;'_SESSION';sessionOrg;tPartyReqdOrg~ -- or the user is in (one of) the required organization(s).
               )
            cRud BOX <PropBtnSuccess> [ "property": tPartyClaimSeatReq cRUd ]
      , "Leave Role": -- user can leave a SHRole if... 
            I /\ tPartyAcc;sessionAccount~;'_SESSION';V -- (s)he occupies that SHRole
            cRud BOX <PropBtnWarning> [ "property": tPartyLeaveSeatReq cRUd, "popovertext": ttName cRud ]
      , "Kick Party": -- user can kick another party/user off a SHRole if...
            I /\ tPartyAcc;-I;sessionAccount~;'_SESSION';V -- it is another part that occupies the SHRole
              /\ ttScope;scopeOwner;sessionAccount~;'_SESSION';V -- and the user himself owns the Casus
            cRud BOX <PropBtnDanger> [ "property" : tPartyLeaveSeatReq cRUd, "popovertext": ttName cRud ]
      , "Reserved": -- user cannot claim the (unoccupied) SHRole, because he does not belong to a required organization
            I-(tPartyAcc;tPartyAcc~)  -- the SHRole is not occupied
            /\ tPartyReqdOrg;tPartyReqdOrg~ -- and the SHRole requires someone from a specific organization
            /\ V;'_SESSION';-(sessionOrg;tPartyReqdOrg~) -- and the user is not of such an organization.
            cRud BOX <PropBtnLink> [ "property": tPartyLeaveSeatReq cRUd, "popovertext": V;'You are not in one of the required organizations'[PopOverText] cRud ]
      ]
   , "Name": ttName cRud
   , "Description": ttDescr cRud
   ]
POPULATION PopOverText CONTAINS [ "You are not in one of the required organizations" ] REPRESENT PopOverText TYPE ALPHANUMERIC

--[Objectives]--
INTERFACE "{EditMyObjectives}" FOR User: -- A (runtime) Objective is mine iff I play the objvSHRrole
   ttIsaObjective /\ ttIsaCasus /\ ttValSupAcc;sessionAccount~;'_SESSION';V
   cRuD BOX <SHCOLS> -- Adding objectives must be done with a request, because all sorts of other stuff needs to be initialized at the same time.
   [ " ":    (ttIsaObjective-ttICO;ttICO~)                 -- You can delete an objective if it is not a copy, 
          \/ (ttIsaObjective /\ ttICO;ttDescr;-I;ttDescr~) -- or if it is a copy and its meaning (description or template) has been altered.
          \/ (ttIsaObjective /\ ttICO;ttTemplate;-I;ttTemplate~)
         cRud BOX <ROWSNL>
      [ "Delete": I cRud BOX <PropBtnPrimary> 
         [ "property": ttDelObjectiveReq cRUd
         , "disabled": ttIsaObjective-(V;'_SESSION';sessionAccount;ttOwner~) cRud
         ]
      ]
   , "  ": ttIsaObjective -- You can enable/disable an objective if it is a copy with unchanged meaning, i.e.:
          /\ ttICO;(ttDescr<>ttDescr~) -- its description has not changed and 
          /\ ttICO;(ttTemplate<>ttTemplate~) -- its template has not changed
         cRud BOX <COLSNL>
      [ "Disable": I-objvIsDisabled cRud BOX <PropBtnPrimary> 
         [ "property": objvIsDisabled cRUd
         , "disabled": ttIsaObjective-(V;'_SESSION';sessionAccount;ttOwner~) cRud
         ]
      , "Enable": objvIsDisabled cRud BOX <PropBtnPrimary> 
         [ "property": objvIsDisabled cRUd
         , "disabled": ttIsaObjective-(V;'_SESSION';sessionAccount;ttOwner~) cRud
         ]
      ]
   , "Objective" : ttName cRUd -- rough description of the objective
   , "Specification" : ttTemplate cRUd -- criteria by which SHRole decides whether or not the objective is addressed
--   , "Prm" : ttPromise cRUd <TTextCheckbox> -- evt. nog een template met uitleg over 'Prm'
--   , "Acc" : ttAccept cRUd <TTextCheckbox> -- evt. nog een template met uitleg over 'Acc'
   ]
POPULATION IfcText CONTAINS [ "SHRole:", "LOA:"]

INTERFACE "{EvaluateObjective}" FOR User:
   ttIsaCasus
   /\ objvIsEnabled
   /\ ttValSupAcc;sessionAccount~;'_SESSION';V cRud 
   BOX <SCOLS>
   [ " " : I cRud BOX <COLSNL>
      [ "Mark as Addressed": I-objvIsAddressed cRud BOX <PropBtnPrimary>  [ "property": objvIsAddressed cRUd, "popovertext": V;'Clicking the button indicates that you have decided that this objective is addressed'[PopOverText] cRud ]
      , "Reopen Objective" :   objvIsAddressed cRud BOX <PropBtnSecondary> [ "property": objvIsAddressed cRUd, "popovertext": V;'If you decide that this objective is NOT satisfied, you should click this button'[PopOverText] cRud ]
      ]
   , "Objective": I cRud
   , "Specification" : I cRud <TTextShowInstance>
--   , "PAVS": I cRud <PAVS> -- Promise, Accept, Valid, Satisfied
   ] 
POPULATION PopOverText CONTAINS [ "Clicking the button indicates that you have decided that this objective is addressed" ]
POPULATION PopOverText CONTAINS [ "If you decide that this objective is NOT satisfied, you should click this button" ]

--[Variables]--
INTERFACE "{EditTemplateVariables}" FOR User: -- Allows you to specify variables for generic stakeholders.
   ttIsaVariable /\ ttOwner;sessionAccount~;'_SESSION';V cRud BOX <SHCOLS>
   [ "Variable" : ttName cRud -- name of the variables
   , "ValSupplier": ttValSupName cRUd -- SHRole that decides whether or not the objective is addressed
   , "Specification" : ttTemplate cRUd -- criteria by which SHRole decides whether or not the objective is addressed
   , "Reqd LoA" : ttReqdLoA cRUd
--   , "Needed by" : ttIsUsedBy cRud
   ]

INTERFACE "{FillInVariables}" FOR User: ttIsaVariable-ttIsaTParty cRud BOX <SCOLS>
   [ "Variable": I[TText] cRud
   , "Value": ttValue cRUd
   , "Specification": I[TText] cRud <TTextShowInstance>
   ] 

INTERFACE "{EvaluatableVariables}" FOR User: I[Scope] cRud BOX <ROWSNL>
   [ "Headerline 1": V;'Variables to be filled in'[IfcText] cRud <STRONG>
   , "Variables to be filled in": 
        ttScope~ -- All TTexts in the MPTrx
           ;(  (ttIsaVariable) -- with the property that they are a Variable
            /\ V[TText*SESSION];'_SESSION'  -- and the user is authenticated with a LoA that is
               ;(  sessionAuthISOLevel;isoLevelGTE;ttReqdLoA~ -- sufficiently large to allow editing
                /\ sessionAccount;ttValSupAcc~ -- and the user occupies the SHRole that must provide the value
            )   )
        cRud INTERFACE "{FillInVariables}"
   ]
POPULATION IfcText CONTAINS [ "Variables to be filled in" ]

INTERFACE "{UnEvaluatableVariables}" FOR User: -- Unevaluatable because TParty LoA is too low
   ttScope~;V;'_SESSION'
   ;(  sessionAuthISOLevel;-isoLevelGTE;ttReqdLoA~
    /\ sessionAccount;ttValSupAcc~
    );ttIsaVariable cRud BOX <SCOLS>
   [ "LoA required": ttReqdLoA cRud <ShowISOLevelRed>
   , "for Variable": I[TText] cRud
   , "Specification" : I[TText] cRud <TTextShowInstance>
   ] 

ENDCONTEXT