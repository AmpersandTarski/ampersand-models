CONTEXT "MPTrxDEMOInterfaces" IN ENGLISH

-- The idea here is that these interfaces are simpler than the 'user'-interfaces
-- so that it becomes easier to demonstrate what MPTrx is all about.
-- But that has to be redone...

--[Overviews]--
INTERFACE "{Transactions}" FOR User: "_SESSION"[SESSION];sessionAccount cRud  BOX <TABS>
   [ "My cases": I[Account] cRud BOX <RAW>
      [ "Create new case": I[Account] /\ sessionAccount~;"_SESSION";sessionAccount cRud BOX <TABLE noHeader>
         [ "Required arguments": I[Account] cRud BOX <TABLE>
            [ "CasusID": accNewCasusID cRUd
            , "Template": I[Account] cRud BOX <OBJECTDROPDOWN> -- You should use <VALUEDROPDOWN> if the concept is an ALPHANUMERIC, INTEGER, DATE, ...
               [ "selectfrom": V;(I-mptrxIsaCasus) cRud -- <SomeView>
               , "setrelation": accMPTrxTemplate cRUd -- If the relation is [UNI], a newly selected object will replace the existing population.
               , "instruction": TXT "select transaction type" -- Text that shows when nothing is selected yet
               --, "selectflag": selectEventFlag cRUd -- [PROP]-type relation that toggles when OBJECT is selected
               --, "deselectflag": deselectEventFlag cRUd -- [PROP]-type relation that toggles when NO OBJECT is selected
               ]
            , "My SHRole": I[Account] /\ accMPTrxTemplate;accMPTrxTemplate~ cRud BOX <OBJECTDROPDOWN> -- You should use <VALUEDROPDOWN> if the concept is an ALPHANUMERIC, INTEGER, DATE, ...
               [ "selectfrom":
               accMPTrxTemplate;ttScope~;ttIsaTTParty -- the template has TTexts that are a TTParty that
               ;( (I-ttPartyReqdPartyRef;ttPartyReqdPartyRef~) -- either doesn't require a specific organization to perform that role
                \/ V;"_SESSION";sessionPartyRef;ttPartyReqdPartyRef~ -- or the user belongs to an organization that may perform that role
                );ttName cRud -- <SomeView>
               , "setrelation": accMySHRoleName cRUd -- If the relation is [UNI], a newly selected object will replace the existing population.
               , "instruction": TXT "select SHRole to perform" -- Text that shows when nothing is selected yet
               --, "selectflag": selectEventFlag cRUd -- [PROP]-type relation that toggles when OBJECT is selected
               --, "deselectflag": deselectEventFlag cRUd -- [PROP]-type relation that toggles when NO OBJECT is selected
               ]
            , " ": I cRud BOX <RAW>
               [ "Setup new transaction": I[Account] cRud BOX <PROPBUTTON>
                  [ "property": accCreateCasusReq cRUd
                  , "disabled": I-(  accMPTrxTemplate;accMPTrxTemplate~
                                  /\ accNewCasusID;accNewCasusID~
                                  /\ accMySHRoleName;accMySHRoleName~
                                  ) cRud
                  , "disabledpopovertext": TXT "To enable, fill in a CasusID, pick a Template and select the role you want to perform."
                  ]
               ]
            ]
         ]
      , "Only show cases when there is somtheing to whow":
         I /\ (ttPartyAcc~;ttScope \/ scopeOwnerAcc~);mptrxIsaCasus;V cRud BOX <RAW>
         [ "Header": V;"Cases in which I participate:"[IfcText] cRud <STRONG>
         , "Cases in which I participate": (ttPartyAcc~;ttScope \/ scopeOwnerAcc~);mptrxIsaCasus INTERFACE "{ShowMPTrxSummary}"
         ]
      ]
   , "Cases I may join":                     -- First, we look for TTParties (seats, SHRoles) where
      ( ( V;(I-ttPartyReqdPartyRef;ttPartyReqdPartyRef~) -- either the TTParty does not require a specific organization
        \/ accPartyRef;ttPartyReqdPartyRef~             -- or the user(account) is one of a req'd organization
        );(ttIsaTTParty-ttPartyAcc;ttPartyAcc~) -- Then, the TTParty must still be unoccupied
        ;ttScope;mptrxIsaCasus               -- and it must be a TTParty in an MPTrx-casus
      - (ttPartyAcc~;ttScope \/ scopeOwnerAcc~)  -- and we exclude cases in which the user is already a TTParty or owner
      ) INTERFACE "{ShowMPTrxSummary}"
   ]
POPULATION IfcText CONTAINS [ "Cases in which I participate:"]

INTERFACE "{ShowMPTrxSummary}" FOR User: I[Scope] cRud BOX <RAW>
   [ "First, we show the MPTrx summary": I[Scope] cRud BOX <TABLE>
      [ "MPTrx" :  I[Scope] LINKTO INTERFACE "{MPTrxCasus}"
      , "Description" : scopeDescr cRud
      , "Status" : I[Scope] cRud <MPTrxStatus>
--      , "My Auth.Level" : V[Scope*SESSION];"_SESSION" cRud BOX <RAW>
--         [ "ALvl": sessionAuthLoA cRud <ShowLoA> ]
      ]
--   , "Next, we instruct the user (when needed) to select a Party": I[Scope] INTERFACE "{OptionalParticipationWarning}"
   ]

INTERFACE "{OptionalParticipationWarning}" FOR User: I[Scope] cRud BOX <RAW>
   [ "This is to warn the user that he should select a Party":
        (V[Scope*SESSION]-(ttScope~;ttPartyAcc;sessionAccount~;"_SESSION"))
        ;V;"If you want to participate, please claim a Party for yourself"[IfcText] <STRONG>
   ]
POPULATION IfcText CONTAINS [ "If you want to participate, please claim a Party for yourself" ]

INTERFACE "{TransactionIsPromisedNotification}" FOR User: I[Scope] cRud BOX <RAW>
   [ "This is to notify the user that the transaction has been promised":
        mptrxIsPromisable;V;"All parties have committed to the transaction"[IfcText] <STRONG>
   ]
POPULATION IfcText CONTAINS [ "All parties have committed to the transaction" ]

--[MPTrx cases]--
INTERFACE "{MPTrxCasus}" FOR User: mptrxIsaCasus cRud  BOX <TABS>
   [ "Parties" : I[Scope] cRud BOX <RAW>
      [ "Transaction": I INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable INTERFACE "{TransactionIsPromisedNotification}"
      , "If we are not done": I-mptrxIsPromisable INTERFACE "{TTPartyManagement}"
      ]
   , "My to-do list" : I[Scope] cRud BOX <RAW>
      [ "If we are not done": I-mptrxIsPromisable cRud BOX <RAW>
         [ "Only show unevaluatable Variables if they exist":
              I /\ V;"_SESSION"
                   ;(  sessionAuthLoA;-loaGTE;ttReqdLoA~
                    /\ sessionAccount;ttValSupAcc~
                    )
                   ;ttScope cRud BOX <RAW>
            [ "Unevaluatable Variables": I INTERFACE "{UnEvaluatableVariables}"
            ]
         , "Only show to-do Variables if they exist":
              I /\
                ttScope~ -- All TTexts in the MPTrx
                ;(  (ttIsaVariable-ttValue;ttValue~) -- with the property that they are a Variable without an assigned value
                 /\ V[TText*SESSION];"_SESSION"  -- and the user is authenticated with a LoA that is
                    ;(  sessionAuthLoA;loaGTE;ttReqdLoA~ -- sufficiently large to allow editing
                     /\ sessionAccount;ttValSupAcc~ -- and the user occupies the SHRole that must provide the value
                 )   )
                 ;V
              cRud BOX <RAW>
            [ "My to-do Variables":
                ttScope~ -- All TTexts in the MPTrx
                ;(  (ttIsaVariable-ttValue;ttValue~) -- with the property that they are a Variable without an assigned value
                 /\ V[TText*SESSION];"_SESSION"  -- and the user is authenticated with a LoA that is
                    ;(  sessionAuthLoA;loaGTE;ttReqdLoA~ -- sufficiently large to allow editing
                     /\ sessionAccount;ttValSupAcc~ -- and the user occupies the SHRole that must provide the value
                 )   )
                  INTERFACE "{FillInVariables}"
            ]
         , "Only show to-do Objectives if they exist":
              I /\ ttScope~ -- All TTexts in the MPTrx
                   ;(objIsEnabled-objIsAddressed) -- with the property that they are enabled, unaddressed Objectives
                   ;ttValSupAcc;sessionAccount~;"_SESSION" -- and the user occupies the SHRole that must provide the value
                   ;V
              cRud BOX <RAW>
            [ "Objectives":
                ttScope~ -- All TTexts in the MPTrx
                ;(objIsEnabled-objIsAddressed) -- with the property that they are enabled, unaddressed Objectives
                 INTERFACE "{EvaluateObjective}" -- Ownership is considered by the interface.
            ]
         ]
      , "Transaction": I INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable INTERFACE "{TransactionIsPromisedNotification}"
      ]
   , "Revise/Supply Data" : I[Scope] cRud BOX <RAW> -- These are only TTexts that the user must supply values for
      [ "If we are not done": I-mptrxIsPromisable cRud BOX <RAW>
         [ "Only show evaluatable Variables if they exist":
              I /\ V;"_SESSION"
                   ;(  sessionAuthLoA;loaGTE;ttReqdLoA~
                    /\ sessionAccount;ttValSupAcc~
                    )
                   ;ttScope cRud BOX <RAW>
            [ "Variables to be valuated": I INTERFACE "{EvaluatableVariables}"
            ]
         , "Only show unevaluatable Variables if they exist":
              I /\ V;"_SESSION"
                   ;(  sessionAuthLoA;-loaGTE;ttReqdLoA~
                    /\ sessionAccount;ttValSupAcc~
                    )
                   ;ttScope cRud BOX <RAW>
            [ "Current authentication level": V[Scope*SESSION];"_SESSION" cRud BOX <FORM> [ "You are authenticated at level" : sessionAuthLoA cRud <ShowLoA> ]
            , "Unevaluatable Variables": I INTERFACE "{UnEvaluatableVariables}"
            ]
         ]
      , "Transaction": I INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable INTERFACE "{TransactionIsPromisedNotification}"
      ]
   , "(Re)evaluate Objectives" : I[Scope] cRud BOX <RAW> -- These are objectives the user must evaluate
      [ "If we are not done": I-mptrxIsPromisable cRud BOX <RAW>
         [ "Only show Objectives if they exist": I /\ ttScope~;(objIsEnabled /\ ttValSupAcc;sessionAccount~;"_SESSION";V);ttScope cRud BOX <RAW>
            [ "Objectives" : ttScope~;objIsEnabled INTERFACE "{EvaluateObjective}"
            ]
         ]
      , "Transaction": I INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable INTERFACE "{TransactionIsPromisedNotification}"
      ]
{-
   , "Data transfers & Privacy" : I[Scope] cRud BOX <RAW>
      [ "Only show DataTransfers if they exist for the user":
         I /\ dtrfScope~;(dtrfSrc\/dtrfTgt)
              ;ttPartyAcc;sessionAccount~;"_SESSION";V
         cRud BOX <RAW>
         [ "Data transfers" : I[Scope] INTERFACE "ShowDataTransfers"
         ]
      , "Transaction": I INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable INTERFACE "{TransactionIsPromisedNotification}"
      ]
   , "Revise Objective Semantics" : I[Scope] cRud BOX <RAW> -- These are objectives owned by the user in his capacity as a TTParty
      [ "My Seat(s)" : ttScope~;(ttIsaTTParty /\ ttPartyAcc;sessionAccount~;"_SESSION";V)
         cRud BOX <RAW>
         [ "TTParty header": I cRud BOX <TABLE noHeader>
            [ "TTParty text": TXT "SHRole:"
            , "TTParty name": I cRud
            , "New objective text": TXT "New objective:"
            , "New objective name": ttPartyNewObjectiveName cRUd
            ]
         ]
      , "My Objectives" :
           ttScope~;(ttIsaTTParty /\ ttPartyAcc;sessionAccount~;"_SESSION";V) -- this is the list of TTParties/SHRoles/seats that the user occupies
           ;ttValSupplier~;ttIsaObjective
         INTERFACE "{EditMyObjectives}" -- The INTERFACE selects the objectives owned by the user
      , "My Variables":
           ttScope~;(ttIsaTTParty /\ ttPartyAcc;sessionAccount~;"_SESSION";V)  -- RULE "Re-assign variable ownership" ensures appropriate ownership of variables
           ;ttPartyAcc;(I /\ V;"_SESSION";sessionAccount);ttOwnerAcc~;ttIsaVariable
         INTERFACE "{EditTemplateVariables}" -- The INTERFACE selects the variables owned by the user
      , "My ValSuppliers" :
           ttScope~;(ttIsaTTParty /\ ttOwnerAcc;sessionAccount~;"_SESSION";V) -- this is the list of TTParties/SHRoles/seats that the user occupies
         cRud BOX <TABLE hideOnNoRecords sortable>
         [ "Name" : ttName cRUd
         , "Description" : ttDescr cRUd
         , "Req'd Org(s)" : ttPartyReqdPartyRef cRUd
      -- , "Owner" : ttOwnerAcc cRud <Owner> -- This is automatically filled in to be the session user
         , "ValSupplier for": ttValSupplier~ cRud
         ]
      , "Transaction": I INTERFACE "{OptionalParticipationWarning}"
      , "If we are done": mptrxIsPromisable INTERFACE "{TransactionIsPromisedNotification}"
      ]
-}
   ]
POPULATION IfcText CONTAINS [ "    Include/import template"]

--[TTParties]--
INTERFACE "{TTPartyManagement}" FOR User: ttScope~;ttIsaTTParty cRud BOX <TABLE hideOnNoRecords sortable>
   [ " ": ttIsaTTParty /\ ttScope;(I-mptrxIsPromisable);ttScope~ cRud BOX <TABLE noHeader> -- Buttons, but only when transaction is NOT yet promised
      [  "Claim Role": -- user can claim a SHRole if...
            I-(ttPartyAcc;ttPartyAcc~)  -- the SHRole is not occupied
            /\ ( (ttIsaTTParty-(ttPartyReqdPartyRef;ttPartyReqdPartyRef~)) -- and either no specific organization is required for this TTParty
               \/ V;"_SESSION";sessionPartyRef;ttPartyReqdPartyRef~ -- or the user is in (one of) the required organization(s).
               )
            cRud BOX <PROPBUTTON> [ "property": ttPartyClaimSeatReq cRUd ]
      , "Leave Role": -- user can leave a SHRole if...
            I /\ ttPartyAcc;sessionAccount~;"_SESSION";V -- (s)he occupies that SHRole
            cRud BOX <PROPBUTTON> [ "property": ttPartyLeaveSeatReq cRUd, "popovertext": ttName cRud ]
      , "Kick Party": -- user can kick another party/user off a SHRole if...
            I /\ ttPartyAcc;-I;sessionAccount~;"_SESSION";V -- it is another part that occupies the SHRole
              /\ ttScope;scopeOwnerAcc;sessionAccount~;"_SESSION";V -- and the user himself owns the Casus
            cRud BOX <PROPBUTTON> [ "property" : ttPartyLeaveSeatReq cRUd, "popovertext": ttName cRud ]
      , "Reserved": -- user cannot claim the (unoccupied) SHRole, because he does not belong to a required organization
            I-(ttPartyAcc;ttPartyAcc~)  -- the SHRole is not occupied
            /\ ttPartyReqdPartyRef;ttPartyReqdPartyRef~ -- and the SHRole requires someone from a specific organization
            /\ V;"_SESSION";-(sessionPartyRef;ttPartyReqdPartyRef~) -- and the user is not of such an organization.
            cRud BOX <PROPBUTTON> [ "property": ttPartyLeaveSeatReq cRUd, "popovertext": V;"You are not in one of the required organizations"[PopoverText] cRud ]
      ]
   , "Name": ttName cRud
   , "Description": ttDescr cRud
   ]
POPULATION PopoverText CONTAINS [ "You are not in one of the required organizations" ] REPRESENT PopoverText TYPE ALPHANUMERIC

--[Objectives]--
INTERFACE "{EditMyObjectives}" FOR User: -- A (runtime) Objective is mine iff I play the objSHRrole
   ttIsaObjective /\ ttIsaCasus /\ ttValSupAcc;sessionAccount~;"_SESSION";V
   cRuD BOX <TABLE hideOnNoRecords sortable> -- Adding objectives must be done with a request, because all sorts of other stuff needs to be initialized at the same time.
   [ " ":    (ttIsaObjective-ttICO;ttICO~)                 -- You can delete an objective if it is not a copy,
          \/ (ttIsaObjective /\ ttICO;ttDescr;-I;ttDescr~) -- or if it is a copy and its meaning (description or template) has been altered.
          \/ (ttIsaObjective /\ ttICO;ttTemplate;-I;ttTemplate~)
         cRud BOX <RAW>
      [ "Delete": I cRud BOX <PROPBUTTON>
         [ "property": ttDelObjectiveReq cRUd
         , "disabled": ttIsaObjective-(V;"_SESSION";sessionAccount;ttOwnerAcc~) cRud
         ]
      ]
   , "  ": ttIsaObjective -- You can enable/disable an objective if it is a copy with unchanged meaning, i.e.:
          /\ ttICO;(ttDescr<>ttDescr~) -- its description has not changed and
          /\ ttICO;(ttTemplate<>ttTemplate~) -- its template has not changed
         cRud BOX <TABLE noHeader>
      [ "Disable": I-objIsDisabled cRud BOX <PROPBUTTON>
         [ "property": objIsDisabled cRUd
         , "disabled": ttIsaObjective-(V;"_SESSION";sessionAccount;ttOwnerAcc~) cRud
         ]
      , "Enable": objIsDisabled cRud BOX <PROPBUTTON>
         [ "property": objIsDisabled cRUd
         , "disabled": ttIsaObjective-(V;"_SESSION";sessionAccount;ttOwnerAcc~) cRud
         ]
      ]
   , "Objective" : ttName cRUd -- rough description of the objective
   , "Specification" : ttTemplate cRUd -- criteria by which SHRole decides whether or not the objective is addressed
--   , "Prm" : ttPromise cRUd -- evt. nog een template met uitleg over "Prm"
--   , "Acc" : ttAccept cRUd -- evt. nog een template met uitleg over "Acc"
   ]
POPULATION IfcText CONTAINS [ "SHRole:", "LOA:"]

INTERFACE "{EvaluateObjective}" FOR User:
   ttIsaCasus
   /\ objIsEnabled
   /\ ttValSupAcc;sessionAccount~;"_SESSION";V cRud
   BOX <TABLE hideOnNoRecords sortable>
   [ " " : I cRud BOX <TABLE noHeader>
      [ "Mark as Addressed": I-objIsAddressed cRud BOX <PROPBUTTON>  [ "property": objIsAddressed cRUd, "popovertext": V;"Clicking the button indicates that you have decided that this objective is addressed"[PopoverText] cRud ]
      , "Reopen Objective" :   objIsAddressed cRud BOX <PROPBUTTON> [ "property": objIsAddressed cRUd, "popovertext": V;"If you decide that this objective is NOT satisfied, you should click this button"[PopoverText] cRud ]
      ]
   , "Objective": I cRud
   , "Specification" : I cRud <TTextShowInstance>
--   , "PAVS": I cRud <PAVS> -- Promise, Accept, Valid, Satisfied
   ]
POPULATION PopoverText CONTAINS [ "Clicking the button indicates that you have decided that this objective is addressed" ]
POPULATION PopoverText CONTAINS [ "If you decide that this objective is NOT satisfied, you should click this button" ]

--[Variables]--
INTERFACE "{EditTemplateVariables}" FOR User: -- Allows you to specify variables for generic stakeholders.
   ttIsaVariable /\ ttOwnerAcc;sessionAccount~;"_SESSION";V cRud BOX <TABLE hideOnNoRecords sortable>
   [ "Variable" : ttName cRud -- name of the variables
   , "ValSupplier": ttValSupName cRUd -- SHRole that decides whether or not the objective is addressed
   , "Specification" : ttTemplate cRUd -- criteria by which SHRole decides whether or not the objective is addressed
   , "Reqd LoA" : ttReqdLoA cRUd
--   , "Needed by" : ttIsUsedBy cRud
   ]

INTERFACE "{FillInVariables}" FOR User: ttIsaVariable-ttIsaTTParty cRud BOX <TABLE hideOnNoRecords sortable>
   [ "Variable": I[TText] cRud
   , "Value": ttValue cRUd
   , "Specification": I[TText] cRud <TTextShowInstance>
   ]

INTERFACE "{EvaluatableVariables}" FOR User: I[Scope] cRud BOX <RAW>
   [ "Headerline 1": V;"Variables to be filled in"[IfcText] cRud <STRONG>
   , "Variables to be filled in":
        ttScope~ -- All TTexts in the MPTrx
           ;(  (ttIsaVariable) -- with the property that they are a Variable
            /\ V[TText*SESSION];"_SESSION"  -- and the user is authenticated with a LoA that is
               ;(  sessionAuthLoA;loaGTE;ttReqdLoA~ -- sufficiently large to allow editing
                /\ sessionAccount;ttValSupAcc~ -- and the user occupies the SHRole that must provide the value
            )   )
        INTERFACE "{FillInVariables}"
   ]
POPULATION IfcText CONTAINS [ "Variables to be filled in" ]

INTERFACE "{UnEvaluatableVariables}" FOR User: -- Unevaluatable because TTParty LoA is too low
   ttScope~;V;"_SESSION"
   ;(  sessionAuthLoA;-loaGTE;ttReqdLoA~
    /\ sessionAccount;ttValSupAcc~
    );ttIsaVariable cRud BOX <TABLE hideOnNoRecords sortable>
   [ "LoA required": ttReqdLoA cRud <ShowLoARed>
   , "for Variable": I[TText] cRud
   , "Specification" : I[TText] cRud <TTextShowInstance>
   ]

ENDCONTEXT