CONTEXT "XXXX" IN ENGLISH 

--[XXXX Definition]
xxxID   :: XXXX * XXID [UNI]
xxxName :: XXXX * XXName [UNI]
xxxText :: XXXX * XXText [UNI]
xxxProp :: XXXX * XXXX [PROP]

REPRESENT XXID, XXName, XXText TYPE ALPHANUMERIC

--[XXXX Test population]
-- Populating `xxxIsClean` prevents that XXs are deleted before `xxxIsClean` is computed
POPULATION xxxIsClean CONTAINS [ ("xx1", "xx1") ]  
POPULATION xxxID      CONTAINS [ ("xx1", "ID-1") ]  
POPULATION xxxName    CONTAINS [ ("xx1", "Name-1") ]
POPULATION xxxText    CONTAINS [ ("xx1", "Text-1") ]
POPULATION xxxProp    CONTAINS [ ("xx1", "xx1") ]

POPULATION xxxIsClean CONTAINS [ ("xx2", "xx2") ]  
POPULATION xxxID      CONTAINS [ ("xx2", "ID-2") ]  
POPULATION xxxName    CONTAINS [ ("xx2", "Name-2") ]
POPULATION xxxText    CONTAINS [ ("xx2", "Text-2") ]

POPULATION xxxIsClean CONTAINS [ ("xx3", "xx3") ]  
POPULATION xxxID      CONTAINS [ ("xx3", "ID-3") ]  
POPULATION xxxName    CONTAINS [ ("xx3", "Name-3") ]
POPULATION xxxText    CONTAINS [ ("xx3", "Text-3") ]
POPULATION xxxProp    CONTAINS [ ("xx3", "xx3") ]

POPULATION xxxIsClean CONTAINS [ ("xx4", "xx4") ]  
POPULATION xxxID      CONTAINS [ ("xx4", "ID-4") ]  
POPULATION xxxName    CONTAINS [ ("xx4", "Name-4") ]
POPULATION xxxText    CONTAINS [ ("xx4", "Text-4") ]

sfSetDefaultPermissionsForXXs :: XXContext * XXContext [PROP]
ROLE ExecEngine MAINTAINS "Set default permissions for XXs"
RULE "Set default permissions for XXs": sfSetDefaultPermissionsForXXs |- -V
VIOLATION (TXT "{EX} DelPair;sfSetDefaultPermissionsForXXs;XXContext;", SRC I, TXT ";XXContext;", SRC I
          ,TXT "{EX} InsPair;sfAllowSelectOnXX;XXContext;", SRC I, TXT ";XXXX;xx1"
          ,TXT "{EX} InsPair;sfAllowSelectOnXX;XXContext;", SRC I, TXT ";XXXX;xx2"
          ,TXT "{EX} InsPair;sfAllowSelectOnXX;XXContext;", SRC I, TXT ";XXXX;xx3"
          ,TXT "{EX} InsPair;sfAllowSelectOnXX;XXContext;", SRC I, TXT ";XXXX;xx4"

          ,TXT "{EX} InsPair;sfAllowUpdateOnXX;XXContext;", SRC I, TXT ";XXXX;xx2"
          ,TXT "{EX} InsPair;sfAllowUpdateOnXX;XXContext;", SRC I, TXT ";XXXX;xx4"

          ,TXT "{EX} InsPair;sfAllowDeleteOnXX;XXContext;", SRC I, TXT ";XXXX;xx3"
          ,TXT "{EX} InsPair;sfAllowDeleteOnXX;XXContext;", SRC I, TXT ";XXXX;xx4"
          )


--**From here onward, we just follow the instructions in the top of file "XXXX_ButtonCRUD.adl"**

--[XXXX_ButtonCRUD - Making the XXXX_ButtonCRUD available]
-- 1. Copy this file and do some renaming:
--    - copy this file to your project, and rename it as you find appropriate.
--    - rename `XXXX` into `ThePossiblyLengthyNameOfTheConceptIUse`.
--    - rename `xxx` into whatever few characters you use to name relations whose SRC is `ThePossiblyLengthyNameOfTheConceptIUse`.
--    - rename `XX` into `ShortName` that you use as an abbreviation for `ThePossiblyLengthyNameOfTheConceptIUse`
--      but of course, if `ThePossiblyLengthyNameOfTheConceptIUse` is short, then it can be the same as `ShortName`.
--    - INCLUDE this file into your script, and apply any conditional-compiler variables that you might need, e.g. as follows

INCLUDE "XXXX_ButtonCRUD.adl" -- --# [ "No<interfacename>Ifc", "ApplicationDefinesAllXXInterfaces", "NoEditingOfXXXXs" ]

--[XXXX_ButtonCRUD - Rules that maintain required populations]
-- 2a. You _MUST_ create rules that maintain the population of (the equivalents of)
--    - `xxxIsClean` :: XXXX * XXXX [PROP] -- Property that allows XXXX to be accepted/registered in the database
--    - `sfAppAllowsXXSelReq`:: XXContext * XXContext [PROP] -- Event, that signals that the application has processed whatever was needed before `sfSelReqForXX` could be processed
--    Here is some example-code that you can use if you replace **expression4xxxIsClean** with what you think is appropriate

ROLE ExecEngine MAINTAINS "Equivalence - InsPair xxxIsClean"
RULE "Equivalence - InsPair xxxIsClean": I /\ xxxID;xxxID~ /\ xxxName;xxxName~ /\ xxxText;xxxText~ |- xxxIsClean
VIOLATION (TXT "{EX} InsPair;xxxIsClean;XXXX;", SRC I, TXT ";XXXX;", TGT I)
ROLE ExecEngine MAINTAINS "Equivalence - DelPair xxxIsClean"
RULE "Equivalence - DelPair xxxIsClean": xxxIsClean |- I /\ xxxID;xxxID~ /\ xxxName;xxxName~ /\ xxxText;xxxText~
VIOLATION (TXT "{EX} DelPair;xxxIsClean;XXXX;", SRC I, TXT ";XXXX;", TGT I)

ROLE ExecEngine MAINTAINS "InsPair sfAppAllowsXXSelReq"
RULE "InsPair sfAppAllowsXXSelReq": sfSelReqForXX-sfSelectedXX |- sfAppAllowsXXSelReq;sfSelReqForXX
VIOLATION (TXT "{EX} InsPair;sfAppAllowsXXSelReq;XXContext;", SRC I, TXT ";XXContext;", SRC I
--        ,TXT "{EX} DelPair;sfSelectedYY;YYContext;", SRC sessionXXContext~;sessionYYContext, TXT ";YYYY;", SRC sessionXXContext~;sessionYYContext
--        ,TXT "{EX} DelPair;sfSelectedZZ;ZZContext;", SRC sessionXXContext~;sessionZZContext, TXT ";ZZZZ;", SRC sessionXXContext~;sessionZZContext
          )

-- 2b. You _MUST_ create one or more rules that maintain the population of (the equivalents of)
--    - `sfCreateXXIsAllowed` :: XXContext * XXContext [PROP] -- User is allowed to create a new XX in the session
--    - `sfAllowSelectOnXX`   :: XXContext * XXXX           -- User is allowed to select (view) the XX in the session
--    - `sfAllowUpdateOnXX`   :: XXContext * XXXX           -- User is allowed to update (edit) the XX in the session
--    - `sfAllowDeleteOnXX`   :: XXContext * XXXX           -- User is allowed to delete the XX in the session
--    and/or make sure that you have INTERFACEs by which this population can be maintained. 
--    If you want everyone to be able to do everything with XXs, you can use the following example code:

--**We don't use the below, because `ButtonCRUD.adl` has interfaces that (de)populate these relations
-- ROLE ExecEngine MAINTAINS "XXXX_ButtonCRUD allows all users to create a XXXX"
-- RULE "XXXX_ButtonCRUD allows all users to create a XXXX": I |- sfCreateXXIsAllowed
-- VIOLATION (TXT "{EX} InsPair;sfCreateXXIsAllowed;XXContext;", SRC I, TXT ";XXContext;", TGT I)
-- -- If you change the above rule, make sure you also do the associated `DelPair;sfCreateXXIsAllowed`

-- ROLE ExecEngine MAINTAINS "XXXX_ButtonCRUD allows all users to Select, Update, Delete every XXXX"
-- RULE "XXXX_ButtonCRUD allows all users to Select, Update, Delete every XXXX": V |- sfAllowSelectOnXX /\ sfAllowUpdateOnXX /\ sfAllowDeleteOnXX
-- VIOLATION (TXT "{EX} InsPair;sfAllowSelectOnXX;XXContext;", SRC I, TXT ";XXXX;", TGT I
--           ,TXT "{EX} InsPair;sfAllowUpdateOnXX;XXContext;", SRC I, TXT ";XXXX;", TGT I
--           ,TXT "{EX} InsPair;sfAllowDeleteOnXX;XXContext;", SRC I, TXT ";XXXX;", TGT I
--           )
-- -- If you change the above rule, make sure you also do the associated `DelPair` rules.

--[XXXX_ButtonCRUD - Define VIEWs to summarize what XXXX is about, for several purposes]
-- 3a. You _MUST_ define a VIEW called `XXSelectionSummary`, which is used in the selection dropdown box
-- 3b. You _MUST_ define a VIEW called `XXOverviewSummary`, which is used in the default Overview view
--    In the code provided below, change `I` to something more appropriate

POPULATION XXXName CONTAINS [ "(not initialized)" ]
VIEW XXSelectionSummary : XXXX
{ "Summary": xxxIsInitialized;xxxID \/ (I-xxxIsInitialized);V;"(not initialized)" 
, " (": TXT " (", "Name": xxxName, ")": TXT ")"
} ENDVIEW
VIEW XXOverviewSummary : XXXX
{ "Summary": xxxIsInitialized;xxxID \/ (I-xxxIsInitialized);V;"(not initialized)" 
, " (": TXT " (", "Name": xxxName, ")": TXT ")"
} ENDVIEW

--[XXXX_ButtonCRUD - Interfaces]
-- 4a. The code in this template file has several predefined interfaces that need to be integrated with your application.
--    One way to do that is to copy them into your own code and adapt them there 
--    (you can prevent them being compiled in this file by specifying conditional-compilation variable `No<interfacename>Ifc`)
--    Alternatively, you can use them (i.e.: refer to them from your application script).
--    In that case, you still must define some interfaces, specifically the following:
--    - `INTERFACE "ShowXX": I[XXXX]` (etc.) -- This interface must allow the user to see the details of the XXXX
--    - `INTERFACE "InitXX": I[XXXX]` (etc.) -- This interface must allow the user to make a just created XXXX 'clean'
--    - `INTERFACE "EditXX": I[XXXX]` (etc.) -- This interface must allow the user to edit the XXXX
--    N.B.: Define the interfaces such that they do not show when there is nothing to do.
--          This means that the toplevel should be <DIV>, <CDIV>, <HROWS>, <HCOLS> or such.

INTERFACE "ShowXX": I[XXXX] cRud BOX
   [ "ID" : xxxID cRud
   , "Name" : xxxName cRud
   , "Text" : xxxText cRud
   , "Prop" : xxxProp cRud
   ]

INTERFACE "InitXX": I[XXXX] cRud BOX
   [ "ID" : xxxID cRUd
   , "Name" : xxxName cRUd
   , "Text" : xxxText cRUd
   ]

INTERFACE "EditXX": I[XXXX] cRud BOX 
   [ "Summary": I cRud <XXOverviewSummary>
   , "Text" : xxxText cRUd
   , "Prop" : xxxProp cRUd
   ]

-- 4b. If you want to use the interfaces provided in this file, you must also provide
--    - An interface that allows the user to see an overview of the XXXXs that he is allowed to work with, using
--      `INTERFACE "OverviewXX": I /\ sfAllowSelectOnXX;sfAllowSelectOnXX~`
--    - An interface that allows the user to select one of the XXXXs to start working with it, using
--      `INTERFACE "SelectXX": I /\ sfAllowSelectOnXX;sfAllowSelectOnXX~`
--    If you do not have special requirements, you can use the following code to provide these interfaces:

INTERFACE "OverviewXX": sfAllowSelectOnXX cRud BOX <HCOLS>
   [ "ID" : xxxID cRud
   , "Name" : xxxName cRud
   , "Text" : xxxText cRud
   , "Prop" : xxxProp cRud
   ]

INTERFACE "SelectXX": I[XXContext] INTERFACE "XXXXSelect"

--[XXXX_ButtonCRUD - Navigation]
-- 5. ButtonCRUD uses events (clicking a button) to compute the state of affairs.
--    Every such state typically has its own interface associated with it. 
--    In order to get a smooth user experience, changes of state should be accompanied with switching of interfaces.
--    In order to be flexible and give application developers the control they need,
--    every change in state will navigate to an interface with a predefined name, as listed below
--    You can easily define these interfaces as in instance of an existing interface, as exemplified in the code below.
--    The `INTERFACE "XXXXPortal"` has been designed to accommodate every state.
--    Thus, you can use it as the generic interface to navigate to.
--    Note that `INTERFACE "XXXXPortal"` has been made invisible, because in practice it will be called from the application's portal.
--    Conversely: be sure that you create a portal from which to call it if needed.

INTERFACE "AfterEventSelectXXXX":   I[XXContext] INTERFACE "XXXXPortal" -- Another XXXX has been selected (to further focus on)
INTERFACE "AfterEventDeselectXXXX": I[XXContext] INTERFACE "XXXXPortal" -- Currently selected XXXX has been deselected (so go to some overview)
INTERFACE "AfterEventUpdateXXXX":   I[XXContext] INTERFACE "XXXXPortal" -- Updating has started (ready to edit)
INTERFACE "AfterEventDoneUpdXXXX":  I[XXContext] INTERFACE "XXXXPortal" -- Updating has terminated (done editing)
INTERFACE "AfterEventDeleteXXXX":   I[XXContext] INTERFACE "XXXXPortal" -- XXXX has been deleted (so go to some overview)

--[XXXX_ButtonCRUD - Switching between different portals]
-- 6. If you choose to use `INTERFACE "XXXXPortal"` that is provided by this code
--    you then _MUST_ create `INTERFACE "ApplicationPortalHeaderBar"`
--    You may want this interface to provide a breadcrumb and/or buttons for navigation purposes.
--    Notes:
--    - this file specifies `INTERFACE "GoToXXXXPortalButton"`, that contains a single button that
--      when clicked, navigates the user to `INTERFACE "XXXXPortal"`.
--      You can use this as part of the headerbar navigation buttons.
--    - make sure you properly initialize the switching between portals, e.g. by checking whether
--      `sessionCurrentPortalIfc` is populated, and if not, create a request to do so. 
--    Here is some example code for you to use and adapt in your application script:

-- Initialization of the Home portal should be done in the Main Application file, e.g. as follows:
-- ROLE ExecEngine MAINTAINS "Initialize sessionCurrentPortalIfc as XXXXPortal"
-- RULE "Initialize sessionCurrentPortalIfc as XXXXPortal": 
--    (I - sessionCurrentPortalIfc;sessionCurrentPortalIfc~);sessionXXContext |- sessionXXContext;sfChangePortalToXXReq
-- VIOLATION (TXT "{EX} InsPair;sfChangePortalToXXReq;SESSION;", TGT I, TXT ";XXContext;", TGT I)

POPULATION IfcText CONTAINS [ "In order to switch to the XXXXPortal:" ]
POPULATION IfcText CONTAINS [ "- You must allow 1+ XXXX to be selected;" ]
POPULATION IfcText CONTAINS [ "- or you must allow XXXXs to be created." ]
INTERFACE "ApplicationPortalHeaderBar" FOR User: sessionIsUser cRud BOX <CDIV>
   [ "InfoMsg" : sessionXXContext;(I - ((I /\ sfAllowSelectOnXX;sfAllowSelectOnXX~) \/ sfCreateXXIsAllowed)) cRud BOX <DIV>
      [ "line1": V;"In order to switch to the XXXXPortal:"[IfcText]
      , "line2": V;"- You must allow 1+ XXXX to be selected;"[IfcText]
      , "line3": V;"- or you must allow XXXXs to be created."[IfcText]
      ]
   , "Portal Switch buttons": I cRud BOX <CDIV>
      [ "Settings": I INTERFACE "GoToButtonCRUDPortal"
      , "XXXXs"   : sessionXXContext INTERFACE "GoToXXXXPortalButton"
--    , "YYYYs"   : sessionYYContext INTERFACE "GoToYYYYPortalButton"
      ]
-- The following stuff is just pro memori
-- , "User": sessionXXContext~ cRud BOX <CDIV>
--    [ "User": sessionAccount;accPersonRef cRud
--    , "Logout": I cRud BOX <PROPBUTTON> [ property : sessionLogoutReq cRUd ]
--    ]
   ]

ENDCONTEXT