CONTEXT "SAFE" IN ENGLISH MARKDOWN
PURPOSE CONTEXT "Portfolio SAFe"
{+ This context represents the Scaled Agile Framework for lean enterprises, version 4.6, in the flavour "Portfolio SAFe".
Portfolio SAFe provides portfolio strategy and investment funding, Agile portfolio operations, and Lean governance.
Most of the text in this module is taken from https://www.scaledagileframework.com © Scaled Agile, Inc.
+}
CLASSIFY Epic, Capability, EpicItem, Story IS BacklogItem
CLASSIFY Feature, Enabler IS EpicItem

PURPOSE PATTERN Portfolio
{+ A SAFe portfolio is a single instance of the SAFe-Framework that manages a set of Value Streams for a specific business domain
(e.g., consumer banking, commercial insurance, department of veteran affairs).
Each value stream delivers a set of software and system Solutions.
A canvas represents a single portfolio at a given moment in time.
+}
PATTERN Portfolio
PURPOSE RELATION canvas[Portfolio * Canvas]
{+ The Portfolio Canvas is used to define and elaborate the strategy, serving as a charter for a SAFe portfolio.
   A canvas represents a single portfolio at a given moment in time.
   The LPM periodically reviews the canvas and updates it to address changes to any of the canvas’ nine building blocks.
   Other triggers to revisit the canvas include the introduction of new solutions, mergers and acquisitions,
   and other strategic changes that may affect the portfolio’s value streams or solutions.
+}
RELATION canvas[Portfolio * Canvas] [INJ,SUR]

PURPOSE RELATION valuestream[Portfolio * ValueStream]
{+ A SAFe portfolio consists of a set of development value streams, each of which builds and supports one or more solutions.
+}
RELATION valuestream[Portfolio * ValueStream] [INJ,SUR]

RELATION businessDomain[Portfolio * Domain] [UNI]

PURPOSE CONCEPT ProgramIncrement
{+ Program increments are meant to schedule portfolio items in fixed-length periods, typically 8 – 12 weeks long.
The most common pattern for a PI is four development Iterations, followed by one Innovation and Planning (IP) Iteration.+}
CONCEPT ProgramIncrement
"A Program Increment (PI) is a timebox during which an Agile Release Train (ART) delivers incremental value in the form of working, tested software and systems."
ENDPATTERN

PURPOSE PATTERN Epics
{+ +}
PATTERN Epics
PURPOSE CONCEPT Epic
{+ Epics are the containers that capture and manage the most significant initiatives that occur within a portfolio.
Epics and the Value Streams they affect are the primary concern of the Portfolio level. Business epics directly deliver business value,
while enabler epics are used to advance the Architectural Runway to support upcoming business epics. +}
CONCEPT Epic "An Epic is a container for a Solution development initiative large enough to require analysis, the definition of a Minimum Viable Product (MVP), and financial approval before implementation."

-- The Epic Hypothesis Statement (EHS) has the following structure:
RELATION ehsFor    [Epic * Text] [UNI] -- For <customers>
RELATION ehsWho    [Epic * Text] [UNI] -- who <do something>
RELATION ehsWhat   [Epic * Text] [UNI] -- the <solution>
RELATION ehsHow    [Epic * Text] [UNI] -- is a <something - the "how">
RELATION ehsBenefit[Epic * Text] [UNI] -- that <provides this value>.
RELATION ehsAlt    [Epic * Text] [UNI] -- Unlike <competitor, current solution or non-existant solution>,
RELATION ehsWhy    [Epic * Text] [UNI] -- our solution <does something better - the "why">.
VIEW "Epic Hypothesis Statement": Epic
   { "For ": ehsFor           -- For <customers>
   , " who ": ehsWho          -- who <do something>
   , " the ": ehsWhat         -- the <solution>
   , " is a ": ehsHow         -- is a <something - the "how">
   , " that ": ehsBenefit     -- that <provides this value>.
   , ". Unlike ": ehsAlt      -- Unlike <competitor, current solution or non-existant solution>,
   , " our solution ": ehsWhy -- our solution <does something better - the "why">.
   } ENDVIEW

PURPOSE RELATION owner[Epic * Individual]
{+ [Epic Owners](https://www.scaledagileframework.com/epic-owner/) are responsible for coordinating Epics through the Portfolio.
They define the epic, its Minimum Viable Product (MVP), and Lean business case, and when approved, facilitate implementation.
+}
RELATION owner[Epic * Individual] [UNI]
PRAGMA "The owner of Epic " " is "


PURPOSE RELATION realizedIn[Capability * Epic] MARKDOWN
{+ A [Capability](https://www.scaledagileframework.com/features-and-capabilities/) is a higher-level solution behavior that typically spans multiple ARTs.
Capabilities are sized and split into multiple features to facilitate their implementation in a single Program Increment (PI).
+}
RELATION realizedIn[Capability * Epic] [UNI]
PRAGMA "Capability " " is realized in Epic "

PURPOSE RELATION realizedIn[EpicItem * Capability] MARKDOWN
{+ A [Feature](https://www.scaledagileframework.com/features-and-capabilities/) is a service that fulfills a stakeholder need.
Each feature includes a benefit hypothesis and acceptance criteria,
and is sized or split as necessary to be delivered by a single Agile Release Train (ART) in a Program Increment (PI).
+}
RELATION realizedIn[EpicItem * Capability] [UNI]
PRAGMA "Epic item " " is realized in Capability "

PURPOSE RELATION estimate[Story * Storypoints]
{+ Epic Owners are responsible for coordinating Epics through the Portfolio.
They define the epic, its Minimum Viable Product (MVP), and Lean business case, and when approved, facilitate implementation.
+}
REPRESENT Storypoints TYPE INTEGER
RELATION estimate[Story * Storypoints] [UNI]
PRAGMA "The Story " " is estimated at " " Storypoints."

PURPOSE CONCEPT Enabler MARKDOWN
{+ An [Enabler](https://www.scaledagileframework.com/enablers/) brings visibility to the work necessary to support efficient development and delivery of future business requirements.
Since they reflect the real work, they are treated like all other value-added development activities.
They are subject to estimating, visibility and tracking, Work in Process (WIP) limits, feedback, and presentation of results.
+}
ENDPATTERN

INTERFACE Epic FOR User: I[Epic] cRud BOX
   [ "Epic Hypothesis Statement": I cRud
   , "For <customers>": ehsFor
   , "who <do something>": ehsWho
   , "the <solution>": ehsWhat
   , "is a <something - the \"how\">": ehsHow
   , "that <provides this value>": ehsBenefit
   , "Unlike <competitor, current solution or non-existant solution>": ehsAlt
   , "our solution <does something better - the \"why\">": ehsWhy
   ]

PURPOSE PATTERN Solution
{+ A canvas represents a single portfolio at a given moment in time. +}
PATTERN Solution
CONCEPT Solution "A Solution is a set of products, services, or systems delivered to the Customer, whether internal or external to the Enterprise."
PURPOSE RELATION produces[ValueStream*Solution]
{+  +}
RELATION produces[ValueStream*Solution] [INJ]
MEANING "The relation produces tells which solution is being produced by which value stream."

ROLE User MAINTAINS totProduces
RULE totProduces : I[ValueStream] |- produces;produces~
MEANING "Each Value Stream produces one or more Solutions"

PURPOSE RELATION architect[Solution*Individual]
{+ To ensure the system or Solution under development is fit for its intended purpose, an architect is assigned to each solution. +}
RELATION architect[Solution*Individual] [UNI]
MEANING "The relation 'architect' tells who is responsible for defining a solution."

ROLE User MAINTAINS totProduces
RULE totProduces : I[Solution] |- architect;architect~
MEANING "Each Solution has an architect who is responsible for defining and communicating a shared technical and architectural vision across multiple ARTs to help ensure the system or Solution under development is fit for its intended purpose."

PURPOSE RELATION developedBy[Solution*Epic]
{+ An Epic is a container for a Solution development initiative large enough to require analysis, the definition of a Minimum Viable Product (MVP), and financial approval before implementation.
+}
RELATION developedBy[Solution*Epic] [UNI]
MEANING "The relation develops tells which solution is developed by which epic."

PURPOSE RELATION businessOwner[Solution*Individual]
{+ [Business Owners](https://www.scaledagileframework.com/business-owners/) are a small group of stakeholders
who have the primary business and technical responsibility for governance, compliance, and return on investment (ROI)
for a Solution developed by an Agile Release Train (ART).
They are key stakeholders on the ART who must evaluate fitness for use and actively participate in certain ART events.
+}
RELATION businessOwner[Solution*Individual] [UNI]
PRAGMA "A business owner of solution " " is "

PURPOSE RELATION deliverable[Artifact*Solution]
{+ Solution deliverables are artifacts that are delivered for the purpose of provisioning a solution to end users.
+}
RELATION deliverable[Artifact*Solution]
MEANING "The relation deliverable tells for which solution a deliverable has been produced."

ENDPATTERN

PURPOSE PATTERN Teams
{+ People are brought together in teams to solve the multidisciplinary problems needed to deliver solutions in reliable and predictable ways. +}
PATTERN Teams
CONCEPT Team "A Team is a cross-functional group of 5 to 11 people who have the responsibility to define, build, test, and deploy, components in a short Iteration timebox."
PURPOSE RELATION member[Individual * Team]
{+  +}
RELATION member[Individual * Team]
MEANING "The relation member tells which individual is currently a member of a team."

PURPOSE RELATION productOwner[Team * Individual]
{+ The [Product Owner](https://www.scaledagileframework.com/product-owner/) (PO) is a member of the Agile Team responsible for defining Stories and prioritizing the Team Backlog to streamline the execution of program priorities while maintaining the conceptual and technical integrity of the Features or components for the team. +}
RELATION productOwner[Team * Individual] [UNI]
MEANING "The relation productOwner registers which individual currently serves as product owner of the team."

PURPOSE RELATION scrumMaster[Team * Individual]
{+ The [Scrum Master](https://www.scaledagileframework.com/scrum-master/) facilitates the team toward its delivery objectives and helps build a high-performing and self-managing group. +}
RELATION scrumMaster[Team * Individual] [UNI]
MEANING "The relation scrumMaster registers which individual currently serves as scrum master of the team."

PURPOSE RELATION backlog[Team * Backlog]
{+ The [Team Backlog](https://www.scaledagileframework.com/team-backlog/) contains user and enabler [Stories](https://www.scaledagileframework.com/story/) that originate from the Program Backlog, as well as stories that arise locally from the team’s local context. It may include other work items as well, representing all the things a team needs to do to advance their portion of the system. +}
RELATION backlog[Team * Backlog] [TOT,INJ]
MEANING "The relation allocated tells which backlog item is currently allocated to which team."

PURPOSE RELATION allocated[BacklogItem * Backlog]
{+ The [Team Backlog](https://www.scaledagileframework.com/team-backlog/) contains user and enabler [Stories](https://www.scaledagileframework.com/story/) that originate from the Program Backlog, as well as stories that arise locally from the team’s local context. It may include other work items as well, representing all the things a team needs to do to advance their portion of the system. +}
RELATION allocated[BacklogItem * Backlog] [UNI]
MEANING "The relation allocated tells to which backlog a backlog item is currently allocated."
ENDPATTERN

ENDCONTEXT