CONTEXT TParties IN ENGLISH
{-The purpose of this module is 
- to extend TTexts with the capability of referring to a so-called `TParty`, 
  i.e. a party that is also an actual user of the system, and 
- to provide a service that replaces any reference to a TParty in a ttTemplate phrase 
  with (a representation of) the Account that has succesfully claimed to be that TParty
  (all within the Scope in which both the TText and TParty reside)

To show what this means, consider a system that supports the treatment of damage claims.
In such a s sytem, every claim (case) is represented by a Scope.
Suppose that within such a Scope 'Claim1234', a TText exists with `ttTemplate` phrase:
"The [list of damages] has been validated by [expert]".
Now, a user logs in (with account 'Acc1234', which is registered to Mr. E.X. Pert).
Then, the user succesfully claims to be the TParty named "expert", which
means that relation `tpartyAccount` is populated with ("Claim1234", "Acc1234").
The effect is that every occurrence of the placeholder '[expert]' 
(that is: within a TText that is in the Scope 'Claim1234')
will be replaced with the text "Mr. E.X. Pert". Thus, 
the `ttInstance` associated with the aforementioned ttTemplate phrase thus reads:
"The [list of damages] has been validated by Mr. E.X. Pert"

**How to get this to work:**
1. Make sure that you populate the relation `ttValSupName` with pairs (TText,TTName), at least one for each TText
2. Mention 
-}
CONCEPT TParty "a party that uses the system and may be mentioned in a TText"

INCLUDE "./TText_Basics.adl" -- make sure `ttValSupName` is defined

IDENT TParties: TParty(tPartyScope,tPartyName)  -- In every Scope, every TParty has a unique name.
tPartyScope    :: TParty * Scope [UNI,TOT]   -- Scope in which the TParty exists
--$If you add/remove relations here below, please adjust them in the TParty copying service as well!
tPartyName     :: TParty * TTName [UNI,TOT]  -- name by which a TParty can be identified within its scope
tPartyDescr    :: TParty * TTPhrase [UNI]    -- specification (description, explanation) of the TParty
tPartyIRBTText :: TParty * TText [UNI]       -- the TText by which the TParty is represented (i.e. whose value will be used to replace placeholders that have the same name as the TParty).
tPartyReqdOrg  :: TParty * Organization      -- The organization to which a TParty instance must belong
tPartyAcc      :: TParty * Account [UNI]     -- The account that instantiates the TParty

RULE "TParties designated to (a) specific organization(s) may only be instantiated by a user of such an organization":
   (I /\ tPartyReqdOrg;tPartyReqdOrg~);tPartyAcc |- tPartyReqdOrg;accOrg~
--RULE "TParty templates cannot be assigned accounts": I-tPartyIsaCasus |- -(tPartyAcc;tPartyAcc~)

--[TText extensions: ValueSuppliers]--

RELATION ttValSupName[TText*TTName] -- Name(s) of Parties that are expected to provide the ttValue
RELATION ttValSupplier[TText*TParty] -- TParties that are expected to provide the ttValue

--[Creating and deleting TParties, as specified by ttValSupName]--
ROLE ExecEngine MAINTAINS "Create TParty as specified by ttValSupName"
RULE "Create TParty as specified by ttValSupName": ttScope~;ttValSupName |- tPartyScope~;tPartyName
VIOLATION (TXT "{EX} NewStruct;TParty"
              ,TXT ";tPartyScope;TParty;_NEW;Scope;", SRC I
              ,TXT ";tPartyName;TParty;_NEW;TTName;", TGT I
--            ,TXT ";tPartyOwner;TParty;_NEW;Account;", SRC V;'_SESSION';sessionAccount
          )

{-- We do not discard TParties, because the condition upon which to do so is hard to write and/or modularize.
--  For example, you need a `tPartyOwner` to prevent a TParty from being discarded when it is being created in a form while it is not yet used by a TText.
ROLE ExecEngine MAINTAINS "Discard TParties that are not used"
RULE "Discard TParties that are not used":
   tPartyScope |-                      -- a TParty is discarded, unless
        tPartyICO;tPartyScope;scopeIII -- it is a legitimate copy of another TParty
     \/ (ttTParty~ \/ tPartyName;ttValSupName~);ttScope -- or it is refered to by a TText of the Scope 
     \/ tPartyOwner;sessionAccount~;V   -- or it is occupied by the sessionAccount (necessary while creating TParties in an INTERFACE, where it may not be assigned yet to a TText)
VIOLATION (TXT "{EX} DelAtom;TParty;", SRC I) --}

--[Maintain link between TText and the TParty that is expected to provide its value]--
ROLE ExecEngine MAINTAINS "Create link between TText and the TParty that must provide its value"
RULE "Create link between TText and the TParty that must provide its value": 
  ttScope;tPartyScope~ /\ ttValSupName;tPartyName~ |- ttValSupplier
VIOLATION (TXT "{EX} InsPair;ttValSupplier;TText;", SRC I, TXT ";TParty;", TGT I)
ROLE ExecEngine MAINTAINS "Delete link between TText and the TParty that must provide its value"
RULE "Delete link between TText and the TParty that must provide its value": 
  ttValSupplier |- ttScope;tPartyScope~ /\ ttValSupName;tPartyName~
VIOLATION (TXT "{EX} DelPair;ttValSupplier;TText;", SRC I, TXT ";TParty;", TGT I)

--[Maintain link between TParty and the TText by which the TParty is represented]--
{- For every placeholder that is extracted from a ttTemplate phrase, a TText exists whose
value will be used to replace that placeholder in the  corresponding ttInstance phrases.
Hence, we only need to create (and delete) links between TTexts and TParties that
(a) are in the same Scope and (b) have the same TTName.
-}
ROLE ExecEngine MAINTAINS "Create link between TParty and the TText that represents the TParty"
RULE "Create link between TParty and the TText that represents the TParty":
  tPartyScope;ttScope~ /\ tPartyName;ttName~ |- tPartyIRBTText
VIOLATION (TXT "{EX} InsPair;tPartyIRBTText;TParty;", SRC I, TXT ";TText;", TGT I)
ROLE ExecEngine MAINTAINS "Delete link between TParty and the TText that represents the TParty"
RULE "Delete link between TParty and the TText that represents the TParty":
  tPartyIRBTText |- tPartyScope;ttScope~ /\ tPartyName;ttName~
VIOLATION (TXT "{EX} DelPair;tPartyIRBTText;TParty;", SRC I, TXT ";TText;", TGT I)

--[Determine the text by which the placeholder [<TParty>] is replaced]-- i.e.: determine the way to refer to a TParty (actor)
-- Perhaps this should be moved to `SIAM_TText_Extensions.adl`, because the actual TTValue to be used may depend on the actual application.

INCLUDE "./SIAM_Module.adl" -- Make sure relations `accOrg` and `accPersonRef` are defined.

CLASSIFY PersonRef ISA TTValue

ROLE ExecEngine MAINTAINS "The value of a TParty (TText) is the PersonRef of the Account of that TParty"
RULE "The value of a TParty (TText) is the PersonRef of the Account of that TParty":
  tPartyIRBTText~;tPartyAcc;accPersonRef |- ttValue
VIOLATION (TXT "{EX} InsPair;ttValue;TText;", SRC I[TText], TXT ";TTValue;", TGT I[TTValue])

--[Clear TText value when its TParty is not instantiated]--
ROLE ExecEngine MAINTAINS "Clear TText value when its TParty is not instantiated"
RULE "Clear TText value when its TParty is not instantiated": 
  (I /\ tPartyIRBTText~;tPartyIRBTText);ttValue |- tPartyIRBTText~;tPartyAcc;V
VIOLATION (TXT "{EX} DelPair;ttValue;TText;", SRC I, TXT ";TTValue;", TGT I)

ENDCONTEXT