CONTEXT TTextsPlaceholders IN ENGLISH
--RJ: For increased readability of expressions, and to allow for future extensions, I sometimes chose to use long descriptive relation names over short ones.

PATTERN "TText Reset Service"
PURPOSE PATTERN "TText Reset Service"
{+ This service relinquishes any depencies that the ttInstance of a TText
   has on other TTexts (as registered in `ttValueIsUsedInInstanceOfTText`).
   This condition will be realized by setting the property `ttInstanceResetReq`
   for that TText.
+}

--[Resetting and initializing TText instance phrases]--
{- The purpose of resetting a TText is to ensure that 
- its ttInstance phrase is the same as its ttTemplate phrase, and 
- all administration regarding dependencies of other TTexts is discarded.

The benefit is that the TText can now start to (re)construct 
its ttInstance phrase from scratch.

Populating the property `ttInstanceResetReq` starts the service.
TText template/instance manipulations should not be done while 
this property is set.
-}
RELATION ttInstanceResetReq[TText*TText] [PROP] -- Request to discard all administration related to the construction of the instance phrase of a TText
MEANING "A TText may have the property that its instance phrase needs to be (re)constructed from scratch."

RELATION ttValueIsUsedInInstanceOfTText[TText*TText] [IRF,ASY]
MEANING "SRC TText has been used to replace placeholders in the TGT TText instance phrase"
RULE "ttValueIsUsedInInstanceOfTText integrity": ttValueIsUsedInInstanceOfTText |- ttIsUsedBy

-- When a TText that has a ttTemplate has no ttInstance phrase, a reset must be requested in order to clean up any administration that might exist.
ROLE ExecEngine MAINTAINS "Request TText instance phrase reset if the template phrase does, and the instance phrase does not exist"
RULE "Request TText instance phrase reset if the template phrase does, and the instance phrase does not exist":
  (I-(ttInstance;ttInstance~));ttTemplate |- ttInstanceResetReq;ttTemplate
MEANING "If a TText has a template phrase and no instance phrase, the TText must be reset/initialized, thus allowing its instance phrase to be constructed"
VIOLATION (TXT "{EX} InsPair;ttInstanceResetReq;TText;", SRC I, TXT ";TText;", SRC I)

ROLE ExecEngine MAINTAINS "Resetting a TText implies that the relations with other TTexts in which it is actually used for replacement, are broken"
RULE "Resetting a TText implies that the relations with other TTexts in which it is actually used for replacement, are broken":
  ttValueIsUsedInInstanceOfTText;ttInstanceResetReq |- -V
MEANING "Resetting a TText means that the registration of replaced placeholders (for that TText) must be reset (cleared/deleted)."
VIOLATION (TXT "{EX} DelPair;ttValueIsUsedInInstanceOfTText;TText;", SRC I, TXT ";TText;", TGT I)

-- Every TText that has a template text, must have an instance text which initially is the template text (and all placeholders are not replaced with values).
ROLE ExecEngine MAINTAINS "Resetting a TText is complete if other TTexts are not used by this TText"
RULE "Resetting a TText is complete if other TTexts are not used by this TText": 
   (ttInstanceResetReq-(ttValueIsUsedInInstanceOfTText~;ttValueIsUsedInInstanceOfTText));ttTemplate |- ttInstance
MEANING "A TText that needs to be (re-)initialized and does not use values of TTexts in its UsedValue, must have the specification-text as its UsedValue, which completes the (re-)initialization."
VIOLATION (TXT "{EX} DelPair;ttInstanceResetReq;TText;", SRC I[TText], TXT ";TText;", SRC I[TText]
          ,TXT "{EX}_;InsPair_;ttInstance_;TText_;", SRC I[TText], TXT "_;TTPhrase_;", TGT I
          )

ENDPATTERN

--[[Placeholder Extraction and TText Hierarchy creation Service]]--
PATTERN "Placeholder Extraction and TText Hierarchy creation Service"
PURPOSE PATTERN "Placeholder Extraction and TText Hierarchy creation Service"
{+ This service ensures that
- `ttTemplateParsedText`=`ttTemplate` AND
- `ttTemplatePlaceholders` contains all `TTName`s that are mentioned in the `ttTemplate` of a `TText`.

The idea is that the specification of a TText is parsed to see if it contains names of `TText`s. 
Such names are recognized by the fact that they are surrounded by square brackets (`[` and `]`).

So,
- `ttTemplateParsedText` stores the text that has been parsed (in PHP) to produce the contents of `ttTemplatePlaceholders`.
  This implies that whenever `ttTemplateParsedText` is empty for some `TText`, 
  `ttTemplatePlaceholders` is empty for that same atom.
- whenever `ttTemplateParsedText` differs from `ttTemplate`,
  - it is first removed, and `ttTemplatePlaceholders` are discarded
  - then `ttTemplate` is being parsed, and `ttTemplateParsedText` and `ttTemplatePlaceholders` are filled again. 

All of this happens in the same `Scope`, i.e. in the scope to which the `TText`s belong.
Note that for this to work, all `TText`s that are mentioned in a `ttTemplate` must exist.
+}

--[Extraction of placeholders from templates]--
{- This service maintains the condition that 
   - ttTemplate = ttTemplateParsedText AND
   - ttTemplatePlaceholders has all TTNames of placeholders in ttTemplate
-}
RELATION ttTemplateParsedText[TText*TTPhrase] [UNI] -- The text as it has been parsed - needed to check if the original ttTemplate phrase has changed.
RELATION ttTemplatePlaceholders[TText*TTName] -- The TTNames that have been detected to exist in the ttTemplate of a TText

ROLE ExecEngine MAINTAINS "TText template parsing - extract placeholders"
RULE "TText template parsing - extract placeholders": 
   (I-ttTemplatePlaceholders;ttTemplatePlaceholders~);ttTemplate
|- ttTemplateParsedText
MEANING "TTexts that have no placeholders detected, yet have a ttTemplate, must have been parsed"
-- 'ParsePhraseForPlaceholders' is located in file "..\TText\include\extensions\ExecEngine\functions\TTextFunctions.php"
VIOLATION (TXT "{EX}_;ParsePhraseForPlaceholders_;ttTemplatePlaceholders_;TText_;", SRC I, TXT "_;TTName_;", TGT I
                   -- ParsePhraseForPlaceholders populates `ttTemplatePlaceholders` with all `TTName`s names found in `ttTemplate`
          ,TXT "{EX}_;InsPair_;ttTemplateParsedText_;TText_;", SRC I, TXT "_;TTPhrase_;", TGT I
          ,TXT "{EX}_;DelPair_;ttInstance_;TText_;", SRC I, TXT "_;TTPhrase_;", SRC ttInstance
          )

ROLE ExecEngine MAINTAINS "TText template parsing - delete parsed templates"
RULE "TText template parsing - delete parsed templates": 
   ttTemplateParsedText |- ttTemplate
MEANING "Whenever a template phrase changes, the parsed text must be deleted so that the template is parsed again"
VIOLATION (TXT "{EX}_;DelPair_;ttTemplateParsedText_;TText_;", SRC I[TText], TXT "_;TTPhrase_;", TGT I)

ROLE ExecEngine MAINTAINS "TText template parsing - delete placeholders used in template"
RULE "TText template parsing - delete placeholders used in template": 
   (I-ttTemplateParsedText;ttTemplateParsedText~);ttTemplatePlaceholders |- -V
MEANING "TTexts whose template text is not parsed, must not specify placeholders that are detected"
VIOLATION (TXT "{EX} DelPair;ttTemplatePlaceholders;TText;", SRC I, TXT ";TTName;", TGT I)

--[Creating and Maintaining TText hierarchies]--
{- This service maintains the condition that for every TTName that is
   extracted from a ttTemplate and registered in `ttTemplatePlaceholders`,
   a TText must exist that has this ttName.
-}
IDENT TTexts: TText(ttScope, ttName) -- In order to automatically create TTexts for placeholders, we need them to be identifiable by their scope and name.

RELATION ttIsUsedBy[TText*TText] [IRF,ASY] -- The (SRC) TText is referenced by the ttTemplate of the (TGT) TText
RULE "TTexts can only use TTexts that are in the same ttScope": ttIsUsedBy |- ttScope;ttScope~

--[Transitive closure of `ttIsUsedBy`]-- (leave it here in case we need it)
ttIsUsedByCopy :: TText*TText -- copied value of 'ttIsUsedBy' allows for detecting modifcation events
ttIsUsedByStar :: TText*TText [IRF,ASY,TRN] -- transitive closure of ttIsUsedBy

ROLE ExecEngine MAINTAINS "Compute transitive closure of 'ttIsUsedBy'"
RULE "Compute transitive closure of 'ttIsUsedBy'": ttIsUsedBy = ttIsUsedByCopy
VIOLATION (TXT "{EX} TransitiveClosure;ttIsUsedBy;TText;ttIsUsedByCopy;ttIsUsedByStar") --}

ROLE ExecEngine MAINTAINS "Create TTexts for placeholders (if necessary)"
RULE "Create TTexts for placeholders (if necessary)":
   ttScope~;ttTemplatePlaceholders |- ttScope~;ttName
VIOLATION (TXT "{EX} NewStruct;TText"
              ,TXT ";ttScope;TText;_NEW;Scope;", SRC I[Scope]
              ,TXT ";ttName;TText;_NEW;TTName;", TGT I[TTName]
          )
ROLE ExecEngine MAINTAINS "When the name of a TText is in the list of placeholders of another TText, the first TText is said to be used by the second TText"
RULE "When the name of a TText is in the list of placeholders of another TText, the first TText is said to be used by the second TText": 
   ttName;ttTemplatePlaceholders~ /\ ttScope;ttScope~ |- ttIsUsedBy
VIOLATION (TXT "{EX} InsPair;ttIsUsedBy;TText;", SRC I[TText], TXT ";TText;", TGT I[TText])
ROLE ExecEngine MAINTAINS "A (first) TText is only used by a (second) TText if the name of the first is in the list of placeholders of the second"
RULE "A (first) TText is only used by a (second) TText if the name of the first is in the list of placeholders of the second":
   ttIsUsedBy |- ttName;ttTemplatePlaceholders~ /\ ttScope;ttScope~
VIOLATION (TXT "{EX} DelPair;ttIsUsedBy;TText;", SRC I[TText], TXT ";TText;", TGT I[TText])

-- When a TText is used by another TText, they must be in the same scope
ROLE ExecEngine MAINTAINS "When a TText is used by another TText, it inherits the latter's Scope"
RULE "When a TText is used by another TText, it inherits the latter's Scope": ttIsUsedBy;ttScope |- ttScope
VIOLATION (TXT "{EX} InsPair;ttScope;TText;", SRC I, TXT ";Scope;", TGT I)

ENDPATTERN

ENDCONTEXT