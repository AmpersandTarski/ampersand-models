CONTEXT Scopes_CopyingService IN ENGLISH
PURPOSE CONTEXT Scopes_CopyingService
{+There are many cases in which it is useful to copy the structured contents of a Scope.
The Scope from which the contents is copied is referred to as 'the source Scope'
The Scope to which the contents is copied is referred to as 'the target Scope'
The relation `scopeIncludes[Scope*Scope]` administers pairs (TargetScope,SourceScope), 
where TargetScope includes the structured contents of SourceScope.
Please take care not to confuse the SRC of `scopeIncludes` (which is the target Scope),
and the TGT of `scopeIncludes` (which is the source Scope).

While the existence of (Targetscope,SourceScope) in `scopeIncludes` specifies that 
the creation and updates of structured contents in SourceScope must be copied to Targetscope, 
it does NOT specify whether or not the deletion of structured contents in SourceScope 
must lead to the deletion of the copied structured contents in the Targetscope.
The property relation `scopeIsaCC` of a target Scope defines whether (when set) or not (when cleared)
structured contents in that target scope must be deleted if it was the copy of some structured contents
in the source scope while that structured contents is no longer available in that source scope.

The structured contents of a Scope can be Atoms of any kind.
This service only provides the 'umbrella'-mechanisms for copying the structured contents.
Prerequisite for creating and maintaining copies of specific kinds of Atoms is:
- the existence of a relation that links such Atoms to a Scope;
  An example, taken from `TText`s, is the existence of the relation `ttScope`.
- the existence of a service that maintains the integrity of the copied structured contents.
  An example, taken from `TText`s, is the existence of the file/service `TText_Copying.svc`.

Maintaining a copy has roughly two flavours:
1. The copy must follow any new or changed structured contents.
   This is the case for as long as `scopeIncludes` is populated:
   for as long as this is the case, the target scope will always 
   include a copy of structured contents of the source scope.
2. The copy must ALSO follow deletions of structured contents.
   This is the case for as long as `scopeIsaCC` is populated:
   for as long as this is the case, any strucutured content 
   in the target scope that is not available in the source scope, 
   is discarded.
+}

RELATION scopeIncludes[Scope*Scope] [IRF,ASY] -- SRC Scope 'includes' (i.e.: has a copy of) all the structured content that is in the TGT Scope.
MEANING "A Scope may include (a copy of) the structured content of a(t most one other) Scope"

RELATION scopeIsaCC[Scope*Scope] [PROP] -- A Scope may have the property of being a Carbon Copy (CC), meaning that the structured content in the target Scope contains a copy of all structured content of the source Scope. Note that this does not preclude the existence (in the target Scope) of structured content that cannot be found in the source Scope.
MEANING "A Scope may have the property of being a carbon copy of another Scope"

RULE "Carbon Copies of Scopes have precisely one source Scope": 
   scopeIsaCC |- scopeIncludes;scopeIncludes~ /\ -(scopeIncludes;-I;scopeIncludes~)
MEANING "A Scope that is a carbon copy must have precisely one source Scope" -- If not, you wouldn't know what to delete in the target Scope

--[Delete Carbon Copied Scopes]--

ROLE ExecEngine MAINTAINS "CarbonCopy Scopes must include a source scope"
RULE "CarbonCopy Scopes must include a source scope": scopeIsaCC |- scopeIncludes;scopeIncludes~
VIOLATION (TXT "{EX} DelAtom;Scope;", SRC I)

--[Create/update attributes for included Scopes]--
--**Note that if Scope-attributes are defined/deleted, this must be reflected in the rules below (or elsewhere)**
{-- Here is an example of how to copy Scope specialiazations, i.e. for `CLASSIFY Case ISA Scope`:
ROLE ExecEngine MAINTAINS "Copy 'Case' property"
RULE "Copy 'Case' property": ttICO;I[Case] |- I[Case];ttICO
VIOLATION (TXT "{EX} SetConcept;Scope;Case;", SRC I[Scope]) --}

ROLE ExecEngine MAINTAINS "Initialize/maintain copied scopeDescription"
RULE "Initialize/maintain copied scopeDescription": 
   (scopeIsaCC \/ (I-scopeDescription;scopeDescription~));scopeIncludes;scopeDescription |- scopeDescription
VIOLATION (TXT "{EX} InsPair;scopeDescription;Scope;", SRC I, TXT ";ScopeDescription;", TGT I)

ROLE ExecEngine MAINTAINS "Update deleted scopeDescription"
RULE "Update deleted scopeDescription": 
   scopeIsaCC;scopeIncludes;(I-scopeDescription;scopeDescription~) |- (I-scopeDescription;scopeDescription~);scopeIncludes
VIOLATION (TXT "{EX} DelPair;scopeDescription;Scope;", SRC I, TXT ";ScopeDescription;", TGT I)

ROLE ExecEngine MAINTAINS "Initialize/maintain copied scopeObject"
RULE "Initialize/maintain copied scopeObject": 
   (scopeIsaCC \/ (I-scopeDescription;scopeDescription~));scopeIncludes;scopeObject |- scopeObject
VIOLATION (TXT "{EX} InsPair;scopeObject;Scope;", SRC I, TXT ";ScopeObject;", TGT I)

ROLE ExecEngine MAINTAINS "Update deleted scopeObject"
RULE "Update deleted scopeObject": 
   scopeIsaCC;scopeIncludes;(I-scopeObject;scopeObject~) |- (I-scopeObject;scopeObject~);scopeIncludes
VIOLATION (TXT "{EX} DelPair;scopeObject;Scope;", SRC I, TXT ";ScopeObject;", TGT I)

ENDCONTEXT