CONTEXT TTemplates IN ENGLISH
{-The purpose of this module is to extend TTemplates 
with the capability of recursively referring to TTNames and/or TTValues
of other TTemplates.-}

INCLUDE "../TTemplate/TTemplate_Basics.adl"

CONCEPT TTemplate "a TText of which the ttTemplate phrase contains one or more placeholders"
CLASSIFY TTemplate ISA TText

RELATION ttPlaceholders[TText*TTName] -- The TTNames that have been extracted from the ttTemplate phrase of a TText

ROLE ExecEngine MAINTAINS "Set TTemplate Concept property"
RULE "Set TTemplate Concept property": I[TText] /\ ttPlaceholders;ttPlaceholders~ |- I[TTemplate]
VIOLATION (TXT "{EX} SetConcept;TText;TTemplate;", SRC I[TText])
ROLE ExecEngine MAINTAINS "Clear TTemplate Concept property"
RULE "Clear TTemplate Concept property": 
   I[TTemplate] |- ttPlaceholders;ttPlaceholders~
VIOLATION (TXT "{EX} ClearConcept;TTemplate;", SRC I[TTemplate])

CONCEPT TPlaceholder "a TText whose TTName is instantiated by (or: is bound to) its TTValue"
CLASSIFY TPlaceholder ISA TText
ROLE ExecEngine MAINTAINS "Set TPlaceholder Concept property"
RULE "Set TPlaceholder Concept property": I[TText] /\ ttPlaceholders~;ttPlaceholders |- I[TPlaceholder]
VIOLATION (TXT "{EX} SetConcept;TText;TPlaceholder;", SRC I[TText])
ROLE ExecEngine MAINTAINS "Clear TPlaceholder Concept property"
RULE "Clear TPlaceholder Concept property": 
   I[TPlaceholder] |- ttPlaceholders;ttPlaceholders~
VIOLATION (TXT "{EX} ClearConcept;TPlaceholder;", SRC I[TPlaceholder])

--[Maintaining TTemplate/TPlaceholder hierarchies]--
{- This service maintains the condition that 
   for every TTName that is extracted from
   the ttTemplate of a TText (i.e. `ttPlaceholders`),
   a TPlaceholder must exist that has this ttName,
   and the TText is made to (also) be a TTemplate.
   Note that this requires IDENT TPlaceholders: TPlaceholder(ttScope, ttName)
-}
IDENT TPlaceholders: TPlaceholder(ttScope, ttName) -- In order to automatically create TPlaceholders, we need them to be identifiable by their scope and name.

ROLE ExecEngine MAINTAINS "Create TPlaceholders for placeholders (if necessary)"
RULE "Create TPlaceholders for placeholders (if necessary)":
   ttScope~;ttPlaceholders |- ttScope~;ttName
VIOLATION (TXT "{EX} NewStruct;TPlaceholder"
              ,TXT ";ttScope;TText;_NEW;Scope;", SRC I[Scope]
              ,TXT ";ttName;TText;_NEW;TTName;", TGT I[TTName]
          )

RELATION tmplUsesPlaceholder[TTemplate*TPlaceholder] [IRF,ASY] -- The ttTemplate phrase of TTemplate refers to the TPlaceholder
ROLE ExecEngine MAINTAINS "InsPair tmplUsesPlaceholder"
RULE "InsPair tmplUsesPlaceholder": ttPlaceholders;ttName~;I[TPlaceholder] /\ ttScope;ttScope~ |- tmplUsesPlaceholder
VIOLATION (TXT "{EX} InsPair;tmplUsesPlaceholder;TTemplate;", SRC I[TTemplate], TXT ";TPlaceholder;", TGT I[TPlaceholder])
ROLE ExecEngine MAINTAINS "DelPair tmplUsesPlaceholder"
RULE "DelPair tmplUsesPlaceholder": tmplUsesPlaceholder |- ttPlaceholders;ttName~ /\ ttScope;ttScope~
VIOLATION (TXT "{EX} DelPair;tmplUsesPlaceholder;TTemplate;", SRC I[TTemplate], TXT ";TPlaceholder;", TGT I[TPlaceholder])

-- When a TTemplate is used by another TTemplate, they must be in the same scope
ROLE ExecEngine MAINTAINS "Scope inheritance"
RULE "Scope inheritance": ttIsRefdBy;ttScope |- ttScope
VIOLATION (TXT "{EX} InsPair;ttScope;TTemplate;", SRC I, TXT ";Scope;", TGT I)

--[Placeholder extraction from templates]--
{- This service maintains the condition that 
   - ttTemplate = ttTemplateParsedText AND
   - ttPlaceholders has all TTNames of placeholders in ttTemplate
-}
RELATION ttTemplateParsedText[TTemplate*TTPhrase] [UNI] -- The text as it has been parsed - needed to check if original text is edited.

ROLE ExecEngine MAINTAINS "TTemplate template parsing - extract placeholders"
RULE "TTemplate template parsing - extract placeholders": 
   (I-(ttPlaceholders;ttPlaceholders~));ttTemplate |- ttTemplateParsedText
MEANING "TTemplates that have no placeholders detected, yet have a template, must have been parsed"
VIOLATION (TXT "{EX}_;ParsePhraseForPlaceholders_;ttPlaceholders_;TTemplate_;", SRC I, TXT "_;TTName_;", TGT I
                   -- ParsePhraseForPlaceholders populates `ttPlaceholders` with all `TTName`s names found in `ttTemplate`
          ,TXT "{EX}_;InsPair_;ttTemplateParsedText_;TTemplate_;", SRC I, TXT "_;TTPhrase_;", TGT I
          ,TXT "{EX}_;DelPair_;ttInstance_;TTemplate_;", SRC I, TXT "_;TTPhrase_;", SRC ttInstance
          )

ROLE ExecEngine MAINTAINS "TTemplate template parsing - delete parsed templates"
RULE "TTemplate template parsing - delete parsed templates": ttTemplateParsedText |- ttTemplate
MEANING "Whenever a template phrase changes, the parsed text must be deleted so that the template is parsed again"
VIOLATION (TXT "{EX}_;DelPair_;ttTemplateParsedText_;TTemplate_;", SRC I[TTemplate], TXT "_;TTPhrase_;", TGT I)

ROLE ExecEngine MAINTAINS "TTemplate template parsing - delete placeholders used in template"
RULE "TTemplate template parsing - delete placeholders used in template": 
  (I-(ttTemplateParsedText;ttTemplateParsedText~));ttPlaceholders |- -V
MEANING "TTemplates whose template text is not parsed, must not specify placeholders that are detected"
VIOLATION (TXT "{EX} DelPair;ttPlaceholders;TTemplate;", SRC I, TXT ";TTName;", TGT I)

ENDCONTEXT