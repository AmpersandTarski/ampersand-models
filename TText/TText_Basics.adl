CONTEXT TTexts IN ENGLISH
{-There are many use cases where texts (phrases, statements, ...) are used 
where such texts have (named) placeholders where (smaller) texts have to be substituted.
An example is a rental contract, that may use a text such as 
"[Renter] will pick up [RentalCar] from [StartingBranch] at [StartDate]."
In this phrase, the texts '[Renter]', '[RentalCar]', '[StartingBranch]' and '[StartDate]'
will need to be replaced by other texts or values.

This module provides a mechanism for supporting such kinds of texts.

This support is based around two concepts:
1. the concept `TText`serves as all of the following:
   - a text-template (i.e. a text containing placeholders);
   - a text-instance (i.e. a text where the placeholders have been replaced with actual values);
   - a store for the value of a (named) placeholder.
2. the concept `Scope` serves as a grouping mechanism for such `TTexts`.
   There is an extension file (TText_Scopes.adl) that provides scope-related support.

TTexts are accompanied by a variety of (sometimes optional) services that ensure e.g. that:
- For every placeholder in a text-template of a TText that is within some scope,
  a(nother) TText exists (within that scope) whose name is that of the placeholder.
- Every text-instance of a TText is the text-template of that TText where
  every placeholder is replaced with the value of the TText identified by that placeholder
  unless that TText has no value.
-}
META "authors" "Rieks Joosten (rieks.joosten@tno.nl)"

--[TTexts]--
IDENT TTexts: TText(ttScope,ttName) -- Two distinct `TText`s cannot share both the same scope and the same name.
--**Adding/Changing relations here below requires adjustment of the TText Copying Service.**--
RELATION ttScope[TText*Scope] [UNI,TOT] -- Scope within which the `TText` exists and can be used.
RELATION ttName[TText*TTName] [UNI] -- Name by which a TText can be identified/referenced within its scope.
RELATION ttIsaCasus[TText*TText] [PROP] -- a TText can have the property of being a case/casus (rather than a template).
RELATION ttDescr[TText*TTPhrase] [UNI] -- a description of the meaning/intension of the TText, e.g. to be displayed as a helptext. 
RELATION ttValue[TText*TTValue] [UNI] -- Value by which to replace the `TText`s placeholder text when it is being instantiated.
RELATION ttType[TText*Concept] [UNI] -- the concept/class/type of which `ttValue` is an instantiation.
RELATION ttTemplate[TText*TTPhrase] [UNI] -- Template phrase (may contain placeholders) specifying how to compute the ttValue
RELATION ttInstance[TText*TTPhrase] [UNI] -- Instance phrase (placeholders filled in) specifying how to compute the ttValue
RELATION ttTopLevel[TText*TText] [PROP] -- The TText is at the 'toplevel' of the TText hierarchy (and thus should not be discarded automatically)
RELATION ttIsUsedBy[TText*TText] [IRF,ASY] -- The (SRC) TText is referenced by the ttTemplate of the (TGT) TText

RULE "TTexts can only use TTexts that are in the same ttScope": ttIsUsedBy |- ttScope;ttScope~

-- automatically maintain the property `ttToplevel`
ROLE ExecEngine MAINTAINS "TopLevel TTexts are not used by other TTexts"
RULE "TopLevel TTexts are not used by other TTexts": I - ttIsUsedBy;ttIsUsedBy~ |- ttTopLevel
VIOLATION (TXT "{EX} InsPair;ttTopLevel;TText;", SRC I[TText], TXT ";TText;", TGT I[TText])
ROLE ExecEngine MAINTAINS "TTexts that are used by other TTexts are not TopLevel TTexts"
RULE "TTexts that are used by other TTexts are not TopLevel TTexts": ttTopLevel |-  -(ttIsUsedBy;ttIsUsedBy~)
VIOLATION (TXT "{EX} DelPair;ttTopLevel;TText;", SRC I[TText], TXT ";TText;", TGT I[TText])

-- There are use cases where a descriptions and a templates have the same roles. In order to allow the re-use of Interfaces in cases where the distinction is not made, we equate them by default, but leave the possibility open to modify either.
ROLE ExecEngine MAINTAINS "Set default value for ttDescr"
RULE "Set default value for ttDescr": (I - ttDescr;ttDescr~);ttTemplate |- ttDescr
VIOLATION (TXT "{EX} InsPair;ttDescr;TText;", SRC I, TXT ";TTPhrase;", TGT I)

ROLE ExecEngine MAINTAINS "Set default value for ttTemplate"
RULE "Set default value for ttTemplate": (I - ttTemplate;ttTemplate~);ttDescr |- ttTemplate
VIOLATION (TXT "{EX} InsPair;ttTemplate;TText;", SRC I, TXT ";TTPhrase;", TGT I)

--[TText management]--
{- TTexts are destroyed when outside a scope. 
If you do not want that, then define a default Scope 
and a rule that assigns all TTexts to that default Scope.-}
ROLE ExecEngine MAINTAINS "A TText that is not in a Scope may not exist"
RULE "A TText that is not in a Scope may not exist": I[TText] |- ttScope;ttScope~
MEANING "TTexts are destroyed when they are not assigned a ttScope, or their ttScope ceases to exist"
VIOLATION (TXT "{EX} DelAtom;TText;", SRC I)

--[Assign/revoke 'casus' properties]--
ROLE ExecEngine MAINTAINS "Assign ttIsaCasus property"
RULE "Assign ttIsaCasus property": I /\ ttScope;scopeIsaCasus;ttScope~ |- ttIsaCasus
VIOLATION (TXT "{EX} InsPair;ttIsaCasus;TText;", SRC I, TXT ";TText;", TGT I)
ROLE ExecEngine MAINTAINS "Revoke ttIsaCasus property"
RULE "Revoke ttIsaCasus property": ttIsaCasus |- I /\ ttScope;scopeIsaCasus;ttScope~
VIOLATION (TXT "{EX} DelPair;ttIsaCasus;TText;", SRC I, TXT ";TText;", TGT I)

--[[Glossary]]----------------------------------------

CONCEPT Scope "a set of TTexts that are controlled by a single authority and (together) serve a particular purpose"

CONCEPT TText "the collection of one template string, one instance thereof, and one value within some scope"

CONCEPT TTName "a label used to identify a TText (within a scope)"
REPRESENT TTName TYPE ALPHANUMERIC

CONCEPT TTPhrase "a sequence of words"
REPRESENT TTPhrase TYPE BIGALPHANUMERIC -- should be BIGALPHANUMERIC, but for testing we leave it like this...

CONCEPT TTValue "(the representation of) a value of a TText"
REPRESENT TTValue TYPE ALPHANUMERIC

ENDCONTEXT