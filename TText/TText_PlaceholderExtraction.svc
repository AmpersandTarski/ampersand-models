CONTEXT TTextPlaceholderExtraction IN ENGLISH
--[Extraction of placeholders from templates]--
{- This subsection ensures that 
- `ttParsedText`=`ttTemplate` AND
- `ttPlaceholders` contains all `TTName`s that are mentioned in the `ttTemplate` of a `TText`.

The idea is that the specification of a TText is parsed to see if it contains names of `TText`s. 
Such names are recognized by the fact that they are surrounded by square brackets (`[` and `]`).

So,
- `ttParsedText` stores the text that has been parsed (in PHP) to produce the contents of `ttPlaceholders`.
  This implies that whenever `ttParsedText` is empty for some `TText`, 
  `ttPlaceholders` is empty for that same atom.
- whenever `ttParsedText` differs from `ttTemplate`,
  - it is first removed, and `ttPlaceholders` are discarded
  - then `ttTemplate` is being parsed, and `ttParsedText` and `ttPlaceholders` are filled again. 

All of this happens in the same `TTScope`, i.e. in the scope to which the `TText`s belong.
Note that for this to work, all `TText`s that are mentioned in a `ttTemplate` must exist.
-}
RELATION ttParsedText[TText*TTPhrase] [UNI] -- The text as it has been parsed - needed to check if original text is edited.
RELATION ttPlaceholders[TText*TTName] -- The ttNames that have been detected to exist in the ttTemplate of a TText

ROLE ExecEngine MAINTAINS "TText template parsing - extract placeholders"
RULE "TText template parsing - extract placeholders": 
   (I-(ttPlaceholders;ttPlaceholders~));ttTemplate |- ttParsedText
MEANING "TTexts that have no placeholders detected, yet have a template, must be parsed"
VIOLATION (TXT "{EX}_;ParseTemplatePhrase_;ttPlaceholders_;TText_;", SRC I, TXT "_;TTName_;", TGT I
                   -- ParseTemplatePhrase populates `ttPlaceholders` with all `TTName`s names found in `ttTemplate`
          ,TXT "{EX}_;InsPair_;ttParsedText_;TText_;", SRC I, TXT "_;TTPhrase_;", TGT I
          ,TXT "{EX}_;DelPair_;ttInstance_;TText_;", SRC I, TXT "_;TTPhrase_;", SRC ttInstance
          )

ROLE ExecEngine MAINTAINS "TText template parsing - delete parsed templates"
RULE "TText template parsing - delete parsed templates": ttParsedText |- ttTemplate
MEANING "Whenever a template phrase changes, the parsed text must be deleted so that the template is parsed again"
VIOLATION (TXT "{EX} DelPair;ttParsedText;TText;", SRC I, TXT ";TTPhrase;", TGT I)

ROLE ExecEngine MAINTAINS "TText template parsing - delete placeholders used in template"
RULE "TText template parsing - delete placeholders used in template": 
  (I-(ttParsedText;ttParsedText~));ttPlaceholders |- -V
MEANING "TTexts whose template text is not parsed, must not specify placeholders that are detected"
VIOLATION (TXT "{EX} DelPair;ttPlaceholders;TText;", SRC I, TXT ";TTPhrase;", TGT I)

--[Enable the use of TText by other TTexts]--
RELATION ttIsUsedBy[TText*TText] [IRF,ASY] -- The (SRC) TText is referenced by the ttTemplate of the (TGT) TText
RELATION ttIsAutoCreated[TText*TText] [PROP] -- a TText may have the property that it is created automatically (which means that it may also be automatically deleted)

RULE "TTexts can only use TTexts that are in the same ttScope": ttIsUsedBy |- ttScope;ttScope~

-- For every ttPlaceholder that is extracted from a ttTemplate, a TText must exist.
ROLE ExecEngine MAINTAINS "Creating TTexts"
RULE "Creating TTexts": ttScope~;ttPlaceholders |- ttScope~;ttPlaceholder
VIOLATION (TXT "{EX} NewStruct;TText"
              ,TXT ";ttScope;TText;_NEW;TTScope;", SRC I[TTScope]
              ,TXT ";ttPlaceholder;TText;_NEW;TTName;", TGT I[TTName]
              ,TXT ";ttIsAutoCreated;TText;_NEW;TText;_NEW"
          )
ROLE ExecEngine MAINTAINS "Associate TTexts with one another"
RULE "Associate TTexts with one another": ttPlaceholder;ttPlaceholders~ /\ ttScope;ttScope~ |- ttIsUsedBy
VIOLATION (TXT "{EX} InsPair;ttIsUsedBy;TText;", SRC I[TText], TXT ";TText;", TGT I[TText])
ROLE ExecEngine MAINTAINS "Disassociate TTexts from one another"
RULE "Disassociate TTexts from one another": ttIsUsedBy |- ttPlaceholder;ttPlaceholders~ /\ ttScope;ttScope~
VIOLATION (TXT "{EX} DelPair;ttIsUsedBy;TText;", SRC I[TText], TXT ";TText;", TGT I[TText])

-- When a TText is created because it is used in another TText, it inherits the latter's scope
ROLE ExecEngine MAINTAINS "TTScope inheritance"
RULE "TTScope inheritance": ttIsUsedBy;ttScope |- ttScope
VIOLATION (TXT "{EX} InsPair;ttScope;TText;", SRC I, TXT ";TTScope;", TGT I)

-- TTexts may be destroyed when their ttScope ceases to exist.
ROLE ExecEngine MAINTAINS "Delete TText whose TTScope no longer exists"
RULE "Delete TText whose TTScope no longer exists": I[TText] |- ttScope;ttScope~
VIOLATION (TXT "{EX} DelAtom;TText;", SRC I)

-- TTexts may be destroyed when they are auto-created but no longer used.
ROLE ExecEngine MAINTAINS "Delete TText that are auto-created and no longer used"
RULE "Delete TText that are auto-created and no longer used": 
   ttIsAutoCreated |- ttPlaceholder;ttPlaceholders~;ttScope;ttScope~
VIOLATION (TXT "{EX} DelAtom;TText;", SRC I)

ENDCONTEXT