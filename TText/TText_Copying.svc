CONTEXT TTEXT_CopyingService IN ENGLISH
{- TTexts can be copied from one Scope to another, 
as part of Scope copying (see file `Scope_Copying.svc`).

This service creates and maintains copies of TTexts within Scopes
that include other Scopes. This includes two steps:

1. Maintaining the existence of TTexts in a target Scope St
   that are copies of the TTexts in a source Scope Ss.
   This can mean two things:
   1) If target scope St is a copy of source scope Ss
      (i.e. (Ss, St) is a pair in `scopeIII`),
      then for every TText Ts in the source scope Ss,
      a corresponding TText Tt must exist in the target scope St
      where either
      - Tt and Ts have the same TTNames (in `ttName`), or
      - the pair (Tt, Ts) is registerd in `ttICO`.
      The effect of this definition of 'correspondence' is that 
      inclusion of a source scope Ss does not overwrite TTexts that
      already exist in the target scope St.
   2) If target scope St is a carbon copy of a source scope Ss,
      then for every TText Ts in the source scope Ss
      a TText Tt must exist in the target scope St
      which has the property of being a carbon copy
      (i.e. (Tt, Tt) is a pair in `ttIsaCC`)
      and the pair (Tt, Ts) is registered in `ttICO`.
      The effect of this is that if Tt has the same name as Ts,
      then every attribute of Ts is copied to the 
      corresponding attribute of Tt.
    
2. Maintaining the (values of) attributes of copied TTexts.
   This can mean two things:
   1) If TText Tt is a copy of TText Ts
      (meaning that (Tt, Ts) is registered in `ttICO`),
      and Tt does not have an attribute that Ts has,
      then Tt is given (a copy of) that attribute of Ts.
   2) If TText Tt is a carbon copy of TText Ts
      (meaning that (Tt, Ts) is registered in `ttICO`
       AND that (Tt,Tt) is registered in `ttIsaCC`),
      then Tt has (a copy of) any attribute that Ts has,
      and has no attribute where Ts does not have them.

This comes down to the following:
- Every attribute of a TText Tt is initialized with 
  the value of the corresponding attribute in a TText Ts, 
  for as long as Tt is a (non-carbon) copy of Ts.
- Every attribute of a TText Tt is nonexistent or the same as
  the value of the corresponding attribute in a TText Ts,
  for as long as Tt is a carbon copy of Ts.

Note that while this module creates TTexts as necessary, it does NOT
destroy them, as this is considered too application specific.
-}

-- Make sure the `scopeIII` relation is available
INCLUDE "../TText/Scope_Copying.svc" -- Service that enables various ways of copying Scopes and their contents

{--The below rule will only fire after execution has terminated with an error 'Maximum reruns exceeded for ExecEngine'. To fix this, we need the ability to limit the execution of ExecEngine rules to Services, and the ability to specify preconditions (of which the below rule would then be one).
RULE "Scopes with TTexts with the same name cannot be included into the same target Scope":
  ttScope;(scopeIII;scopeIII~ - I);ttScope~;ttName |- -ttName
VIOLATION (TXT "TText ", SRC ttName, TXT " in Scope ", SRC ttScope, TXT " is included in a Scope that also includes another scope that has a TText with the same name") --}

--[Maintaining the existence of copied TTexts in the target Scope (see introduction, part 1)]--
-- For every TText in the source scope, a corresponding TText must exist in the target scope (a registration of which is found in the relation `ttICO`)
ttICO :: TText * TText [UNI,IRF,ASY] -- SRC TText Is a Copy Of (ICO) TGT TText. 
RULE "A TText can only be a copy of a TText from another scope":
   ttScope~;ttICO;ttScope |- -I

ROLE ExecEngine MAINTAINS "Create TText copies"
RULE "Create TText copies":
   (scopeIII~;ttScope~)-(ttScope~;ttName;ttName~) |- ttScope~;ttICO
-- Rule `ttScope;scopeIII |- ttScope` would lead to violations of IDENT(TText) and UNI(ttName) when the target scope already contains a TText with the copied/same TTName
-- Rule `scopeIII~;ttScope~;ttName |- ttScope~;ttICO;ttName` would not copy nameless TTexts (note that UNI(ttName))
MEANING "A Scope that includes a (source) Scope must have a copy of all (named) TTexts of the source Scope"
VIOLATION (TXT "{EX} NewStruct;TText"
              ,TXT ";ttScope;TText;_NEW;Scope;", SRC I
              ,TXT ";ttICO;TText;_NEW;TText;", TGT I[TText]
              ,TXT ";ttName;TText;_NEW;TTName;", TGT ttName
          )
ROLE ExecEngine MAINTAINS "Automatically depopulate ttICO" -- allows for `scopeIII` to be depopulated.
RULE "Automatically depopulate ttICO": ttICO |- ttScope;scopeIII~;ttScope~
MEANING "A TText can only be a copy of a (source) TText if its scope has included the scope of the (source) TText"
VIOLATION (TXT "{EX} DelPair;ttICO;TText;", SRC I, TXT ";TText;", TGT I)

--$Carbon copies$--
ttICCO :: TText * TText [UNI,IRF,ASY] -- SRC TText Is a Carbon Copy Of (ICCO) TGT TText.
RULE "Carbon copies of TTexts must be (regular) copies, too": ttICCO |- ttICO -- this means that we can rely on the ICO rules before carbon copying...

ROLE ExecEngine MAINTAINS "When its Scope is a carbon copy, then the TText must be, too"
RULE "When its Scope is a carbon copy, then the TText must be, too": -- here it pays that we have ttICCO |- ttICO
   (I /\ ttScope;scopeIsaCC;ttScope~);ttICO |- ttICCO
VIOLATION (TXT "{EX} InsPair;ttICCO;TText;", SRC I, TXT ";TText;", TGT I)
ROLE ExecEngine MAINTAINS "When its Scope is no longer a copy, it no longer is a carbon copy"
RULE "When its Scope is no longer a copy, it no longer is a carbon copy": ttICCO |- ttICO
VIOLATION (TXT "{EX} DelPair;ttICCO;TText;", SRC I, TXT ";TText;", TGT I)

--[Maintaining the (values of) attributes of copied TTexts - regular attributes (see introduction, part 2)]--
--**Note that if TText-attributes are defined/deleted, then this must be reflected in the rules below (or elsewhere)**
{-- Here is an example of how to copy TText specialiazations, i.e. for `CLASSIFY Concern ISA TText`:
ROLE ExecEngine MAINTAINS "Copy 'Concern' property"
RULE "Copy 'Concern' property": ttIsaCC;I[Concern] |- I[Concern];ttIsaCC
VIOLATION (TXT "{EX} SetConcept;TText;Concern;", SRC I[TText]) --}

-- TText: copying `ttName[TText*TTName]`:
ROLE ExecEngine MAINTAINS "Initialize copied ttName"
RULE "Initialize copied ttName": (I-ttName;ttName~);ttICO;ttName |- ttName
VIOLATION (TXT "{EX}_;InsPair_;ttName_;TText_;", SRC I[TText], TXT "_;TTName_;", TGT I)
ROLE ExecEngine MAINTAINS "Create/Update copied ttName"
RULE "Create/Update copied ttName": ttICCO;ttName |- ttName
VIOLATION (TXT "{EX}_;InsPair_;ttName_;TText_;", SRC I[TText], TXT "_;TTName_;", TGT I)
ROLE ExecEngine MAINTAINS "Update deleted ttName"
RULE "Update deleted ttName": ttICCO;(I-ttName;ttName~) |- (I-ttName;ttName~);ttICCO
VIOLATION (TXT "{EX}_;DelPair_;ttName_;TText_;", SRC I[TText], TXT "_;TTName_;", SRC ttName)

-- TText: copying `ttDescr[TText*TTPhrase]`:
ROLE ExecEngine MAINTAINS "Initialize copied ttDescr"
RULE "Initialize copied ttDescr": (I-ttDescr;ttDescr~);ttICO;ttDescr |- ttDescr
VIOLATION (TXT "{EX}_;InsPair_;ttDescr_;TText_;", SRC I[TText], TXT "_;TTPhrase_;", TGT I)
ROLE ExecEngine MAINTAINS "Create/Update copied ttDescr"
RULE "Create/Update copied ttDescr": ttICCO;ttDescr |- ttDescr
VIOLATION (TXT "{EX}_;InsPair_;ttDescr_;TText_;", SRC I[TText], TXT "_;TTPhrase_;", TGT I)
ROLE ExecEngine MAINTAINS "Update deleted ttDescr"
RULE "Update deleted ttDescr": ttICCO;(I-ttDescr;ttDescr~) |- (I-ttDescr;ttDescr~);ttICCO
VIOLATION (TXT "{EX}_;DelPair_;ttDescr_;TText_;", SRC I[TText], TXT "_;TTPhrase_;", SRC ttDescr)

-- TText: copying `ttValue[TText*TTValue]`:
ROLE ExecEngine MAINTAINS "Initialize copied ttValue"
RULE "Initialize copied ttValue": (I-ttValue;ttValue~);ttICO;ttValue |- ttValue
VIOLATION (TXT "{EX}_;InsPair_;ttValue_;TText_;", SRC I[TText], TXT "_;TTValue_;", TGT I)
ROLE ExecEngine MAINTAINS "Create/Update copied ttValue"
RULE "Create/Update copied ttValue": ttICCO;ttValue |- ttValue
VIOLATION (TXT "{EX}_;InsPair_;ttValue_;TText_;", SRC I[TText], TXT "_;TTValue_;", TGT I)
ROLE ExecEngine MAINTAINS "Update deleted ttValue"
RULE "Update deleted ttValue": ttICCO;(I-ttValue;ttValue~) |- (I-ttValue;ttValue~);ttICCO
VIOLATION (TXT "{EX}_;DelPair_;ttValue_;TText_;", SRC I[TText], TXT "_;TTValue_;", SRC ttValue)

-- TText: copying `ttTemplate[TText*TTPhrase]`:
ROLE ExecEngine MAINTAINS "Initialize copied ttTemplate"
RULE "Initialize copied ttTemplate": (I-ttTemplate;ttTemplate~);ttICO;ttTemplate |- ttTemplate
VIOLATION (TXT "{EX}_;InsPair_;ttTemplate_;TText_;", SRC I[TText], TXT "_;TTPhrase_;", TGT I)
ROLE ExecEngine MAINTAINS "Create/Update copied ttTemplate"
RULE "Create/Update copied ttTemplate": ttICCO;ttTemplate |- ttTemplate
VIOLATION (TXT "{EX}_;InsPair_;ttTemplate_;TText_;", SRC I[TText], TXT "_;TTPhrase_;", TGT I)
ROLE ExecEngine MAINTAINS "Update deleted ttTemplate"
RULE "Update deleted ttTemplate": ttICCO;(I-ttTemplate;ttTemplate~) |- (I-ttTemplate;ttTemplate~);ttICCO
VIOLATION (TXT "{EX}_;DelPair_;ttTemplate_;TText_;", SRC I[TText], TXT "_;TTPhrase_;", SRC ttTemplate)

-- TText: copying `ttInstance[TText*TTPhrase]` is not done as `ttInstance` is computed, internal to the Scope

ENDCONTEXT