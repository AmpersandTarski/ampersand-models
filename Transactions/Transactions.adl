CONTEXT Transactions MARKDOWN

PURPOSE CONTEXT Transactions
{+
In globally distributed information systems such as Netflix and Amazon.com, the store in which data resides has become less relevant.
This requires rethinking the concept of a transaction,
because ideas such as commit, rollback, or ACID-transaction are not so obvious outside the scope of a single store.
This work attempts to develop a theory of transactions that is independent of data stores.
+}

PATTERN States
CONCEPT State "A state is a property of an information system that represents a finite prefix of the sequence of actions, which has occured up to a given point in time."
CONCEPT Item "An item is a thing that resides in an information system. Items are the elements of the state of a system."

PURPOSE CONCEPT State
{+The concept of state is needed to represent things that change in time.
Any state-based information system starts in an `initial state`.
New states can be reached by performing actions, which map one state onto another.
+}

RELATION action[State*State]
RELATION elem[State*Item]
RELATION ins[State*Item]
RELATION del[State*Item]

ROLE ExecEngine MAINTAINS IncrState, DecrState
RULE IncrState : (I[State]-endTrans~;endTrans);((action~;elem-del)\/ins) |- elem
   VIOLATION (TXT "{EX} InsPair;elem;State;", SRC I[State], TXT ";Item;", TGT I)
RULE DecrState : (I[State]-endTrans~;endTrans);elem |- (action~;elem-del)\/ins
   VIOLATION (TXT "{EX} DelPair;elem;State;", SRC I[State], TXT ";Item;", TGT I)
ENDPATTERN

PURPOSE PATTERN Transactions
{+
+}
PATTERN Transactions
RELATION trans[State*Transaction] [UNI]
PURPOSE RELATION beginTrans
  {+The beginning of a transaction ...+}
RELATION beginTrans[Transaction*State] [UNI,TOT]
PURPOSE RELATION endTrans
  {+The end of a transaction is a state that succedes more than one state.+}
RELATION endTrans[Transaction*State] [UNI]
ROLE ExecEngine MAINTAINS "beginTransaction ins", "endTransaction ins"
RULE "beginTransaction ins" : action;-I[State];action~/\I[State] |- beginTrans~;beginTrans
VIOLATION ( TXT "{EX} NewStruct;Transaction"
                ,TXT ";beginTrans;Transaction;_NEW;State;",SRC I[State]
          )
RULE "endTransaction ins" : (I[State]/\action~;-I[State];action);action~;trans |- endTrans~
   VIOLATION ( TXT "{EX} InsPair;endTrans;Transaction;", TGT I[Transaction], TXT ";State;",SRC I[State] )

ROLE ExecEngine MAINTAINS "transaction states ins"
RULE "transaction states ins" : action~;((trans\/beginTrans~)-endTrans~) |- trans
   VIOLATION (TXT "{EX} InsPair;trans;State;", SRC I[State], TXT ";Transaction;", TGT I[Transaction])

-- The following rules are only there for prototyping purposes.
--ROLE ExecEngine MAINTAINS "beginTransaction del", "endTransaction del"
--RULE "beginTransaction del" : I[State]/\beginTrans~;beginTrans |- action;-I[State];action~
--   VIOLATION ( TXT "{EX} DelAtom;Transaction;",TGT beginTrans )
--RULE "endTransaction del" : (I[State]-action~;-I[State];action);action~ |- -endTrans
--   VIOLATION ( TXT "{EX} DelPair;endTrans;Transaction;", TGT I[Transaction], TXT ";State;",SRC I[State] )
--
--ROLE ExecEngine MAINTAINS "transaction states del"
--RULE "transaction states del" : trans |- action~;((trans\/beginTrans~)-endTrans~)
--   VIOLATION (TXT "{EX} DelPair;trans;State;", SRC I[State], TXT ";Transaction;", TGT I[Transaction])
ENDPATTERN


PURPOSE PATTERN Cumulations
{+The moment a transaction starts, there are (at least) two separate traces that run independently.
They have no interaction and each trace works as though it has a database of its own.
The cumulative actions of each trace represent the progress of that trace. It is kept in the relations `insCum` and `delCum`.
+}
PATTERN Cumulations
RELATION insCum[State*Item]
RELATION delCum[State*Item]

--ROLE ExecEngine MAINTAINS composeInsCum, composeDelCum
--RULE composeInsCum : ((I[State]/\trans;trans~)-beginTrans;beginTrans~);((action~;insCum-(action~;elem-elem))\/(elem-action~;elem)) |- insCum
--   VIOLATION (TXT "{EX} InsPair;insCum;State;", SRC I[State], TXT ";Item;", TGT I[Item])
--RULE composeDelCum : ((I[State]/\trans;trans~)-beginTrans;beginTrans~);((action~;delCum-(elem-action~;elem))\/(action~;elem-elem)) |- delCum
--   VIOLATION (TXT "{EX} InsPair;delCum;State;", SRC I[State], TXT ";Item;", TGT I[Item])
--ROLE ExecEngine MAINTAINS restoreInsCum, restoreDelCum
--RULE restoreInsCum : ((I[State]/\trans;trans~)-beginTrans;beginTrans~);insCum |- (action~;insCum-(action~;elem-elem))\/(elem-action~;elem)
--   VIOLATION (TXT "{EX} DelPair;insCum;State;", SRC I[State], TXT ";Item;", TGT I[Item])
--RULE restoreDelCum : ((I[State]/\trans;trans~)-beginTrans;beginTrans~);delCum |- (action~;delCum-(elem-action~;elem))\/(action~;elem-elem)
--   VIOLATION (TXT "{EX} DelPair;delCum;State;", SRC I[State], TXT ";Item;", TGT I[Item])


ROLE ExecEngine MAINTAINS delFromInsCum, insIntoDelCum, insIntoInsCum, delFromDelCum
RULE insIntoInsCum: (I[State]/\trans;trans~);(elem-trans;beginTrans;elem) |- insCum
   VIOLATION (TXT "{EX} InsPair;insCum;State;", SRC I[State], TXT ";Item;", TGT I[Item])
RULE insIntoDelCum: (I[State]/\trans;trans~);(trans;beginTrans;elem-(elem-insCum)) |- delCum
   VIOLATION (TXT "{EX} InsPair;delCum;State;", SRC I[State], TXT ";Item;", TGT I[Item])
RULE delFromInsCum: (I[State]/\trans;trans~);insCum |- elem
   VIOLATION (TXT "{EX} DelPair;insCum;State;", SRC I[State], TXT ";Item;", TGT I[Item])
RULE delFromDelCum: (I[State]/\trans;trans~);delCum |- trans;beginTrans;elem-(elem-insCum)
   VIOLATION (TXT "{EX} DelPair;delCum;State;", SRC I[State], TXT ";Item;", TGT I[Item])

RULE conflicts : endTrans;(insCum/\delCum) |- -V
   VIOLATION (TXT "State ", SRC I, TXT " cannot commit item ", TGT I, TXT " because of conflicting elements.")
ROLE ExecEngine MAINTAINS MergeIncr
RULE MergeIncr : (I[State]/\endTrans~;endTrans);((trans;beginTrans;elem-action~;delCum)\/action~;insCum) |- elem
   VIOLATION (TXT "{EX} InsPair;elem;State;", SRC I[State], TXT ";Item;", TGT I)
ROLE ExecEngine MAINTAINS MergeDecr
RULE MergeDecr : (I[State]/\endTrans~;endTrans);elem |- (trans;beginTrans;elem-action~;delCum)\/action~;insCum
   VIOLATION (TXT "{EX} DelPair;elem;State;", SRC I[State], TXT ";Item;", TGT I)
ENDPATTERN

--PURPOSE PATTERN Timeline
--{+
--+}
--PATTERN Timeline
--
--ROLE ExecEngine MAINTAINS "beginTransaction del", "endTransaction del"
--RULE "beginTransaction del" : I[State]/\beginTrans;beginTrans~ |- action;-I[State];action~
--   VIOLATION ( TXT "{EX} DelAtom;Transaction;",SRC beginTrans )
--RULE "endTransaction del" : (I[State]-action~;-I[State];action);action~;trans |- -endTrans
--   VIOLATION ( TXT "{EX} DelPair;endTrans;State;",SRC I[State], TXT ";Transaction;", TGT I[Transaction] )
--
--ROLE ExecEngine MAINTAINS "transaction states del"
--RULE "transaction states del" : trans |- action~;((trans\/beginTrans)-endTrans)
--   VIOLATION (TXT "{EX} DelPair;trans;State;", SRC I[State], TXT ";Transaction;", TGT I[Transaction])
--
--ROLE ExecEngine MAINTAINS resetInsCum, resetDelCum
--RULE resetInsCum : (I[State]/\beginTrans;beginTrans~);insCum |- -V
--   VIOLATION (TXT "{EX} DelPair;insCum;State;", SRC I[State], TXT ";Item;", TGT I[Item])
--ROLE ExecEngine MAINTAINS resetDelCum
--RULE resetDelCum : (I[State]/\beginTrans;beginTrans~);delCum |- -V
--   VIOLATION (TXT "{EX} DelPair;delCum;State;", SRC I[State], TXT ";Item;", TGT I[Item])
--
--ENDPATTERN

INTERFACE State : "_SESSION" cRud
TABS [ States : V[SESSION*State] CRuD
       COLS [ id :     I        cRud
            , succ :   action    CRUd
            , ins :    ins      CRUD
            , del :    del      CRUD
            , elem :   elem     cRud
            ]
     , Transactions : V[SESSION*Transaction] CRuD
       COLS [ start :  beginTrans    cRud
            , end :    endTrans      cRud
            , states : beginTrans\/trans~\/endTrans cRud
                       COLS [ id :     I        cRud
                            , succ :   action   CRUd
                            , ins :    ins      CRUD
                            , del :    del      CRUD
                            , insCum : insCum   cRud
                            , delCum : delCum   cRud
                            , elem :   elem     cRud
                            ]
            ]
     ]

ENDCONTEXT