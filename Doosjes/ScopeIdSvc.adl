CONTEXT ScopeIdNamingSvc IN ENGLISH
-----------------------------------------------------------
INCLUDE "Counters.adl"
-----------------------------------------------------------
PURPOSE PROCESS "Scope Identification and Naming Service"
{+A multitude of identifiers can be envisaged for Scopes:
- identifiers in every context that is stored somwewhere (i.e. within an IController, or a webserver)
- identifiers for displaying or selecting entities on a screen (in various human Contexts/interfaces)
- identifers for use in operational communication protocols between devices in the real world.
These identifiers should be distinguished amonst one another - they are different (re our Identity Model).
In this Ampersand Context, we only know about:
- identifiers for Scope atoms (i.e.: 'dirty identifiers')
- scopeName, i.e. short texts that can be used to construct (lengthier) identifiers for all sorts of other purposes.
- scopeID, i.e. a long(er) text that identifies a Scope within the context of humans using this system.
+}
PROCESS "Scope Identification and Naming Service"
-- IDs are globally identifiable (within a human Context). Note that within the Ampersand Context, there is no need for such IDs.
RELATION scopeID[Scope*Name] [UNI] -- 2.2.2.5 ArtifactId
MEANING "Every Scope may have a Name that is a global identifier"
-- IDENT Scopes: Scope(scopeID)

--[Requesting for the re-computation of global Scope IDs]--
ROLE ExecEngine MAINTAINS "Request re-identification of Scope if scopeID is not unique"
RULE "Request re-identification of Scope if scopeID is not unique": scopeID;scopeID~ |- I
VIOLATION (TXT "{EX} AfterViolationProduceResult;All Scopes have a unique global ID")


RULE "Rule1" : scopeID;scopeID~ |- I TRIGGERS ScopeIDSvc
RULE "Rule2" : scopeIPOPlus;(I-(scopeID;scopeID~)) |- -(scopeID;V) TRIGGERS ScopeIDSvc, OtherService

-- Now the service rules are evaluated and processed

SERVICE ScopeIdSvc RESULT "Rule1", "Rule4"


--[GlobalIDs service results]------------------------------
RULE "All Scopes have a unique global ID": I[Scope] |- scopeID;scopeID~



--[SERVICE DEF]--
PURPOSE RULE "Request re-identification of Scope if scopeID is not unique"
{+Identifiers must be 'unique', meaning that they refer to no more than one entity (in our case: a Scope). If, within the context where an ID is applied, another Scope has been labeled with the same ID, action should be taken to ensure that such IDs are made different again (or else the ID no longer is 'unique').+}
ROLE ScopeIdSvc MAINTAINS "Start re-identification of Scope if scopeID is not unique"
SERVICE ScopeIdSvc MAINTAINS "Start re-identification of Scope if scopeID is not unique"
RULE "Start re-identification of Scope if scopeID is not unique": scopeID;scopeID~ |- I
VIOLATION (TXT "{EX} DelPair;scopeID;Scope;", SRC I, TXT ";Name;", SRC scopeID)

-- Onderstaande regel is nodig omdat bij het her-ID-en van een Scope waar andere Scopes in zitten, die andere Scopes ook geher-IDd moeten worden.
ROLE ScopeIdSvc MAINTAINS "Clear ID for sub-Scopes"
SERVICE ScopeIdSvc MAINTAINS "Request re-identification of Scope if scopeID is not unique"
RULE "Clear ID for sub-Scopes": scopeIPOPlus;(I-(scopeID;scopeID~)) |- -(scopeID;V)
VIOLATION (TXT "{EX} DelPair;scopeID;Scope;", SRC I, TXT ";Name;", SRC scopeID)


--[Computation of global Scope IDs]------------------------

ROLE ScopeIdSvc MAINTAINS "Generate simple Scope IDs"
SERVICE ScopeIdSvc MAINTAINS "Generate simple Scope IDs"
RULE "Generate simple Scope IDs": 
   I[Scope]
   /\ V[Scope]-(scopeIPO;scopeIPO~) -- Scopes that are not part of another Scope are excluded as they cannot inherit their ID
   /\ V[Scope]-(scopeSeqNr;scopeSeqNr~) -- Scopes without SeqNr are excluded since they must inherit this sequence number
-- /\ scopeName;scopeName;scopeName~;scopeName~ -- Not needed, since both 'scopeName' and 'scopeName' are [TOT]
   |- scopeID;scopeID~
VIOLATION (TXT "{EX} InsPair;scopeID;Scope;", SRC I, TXT ";Name;", TGT scopeName)

ROLE ScopeIdSvc MAINTAINS "Generate sequenced IDs for Scopes that are not part of another Scope"
SERVICE ScopeIdSvc MAINTAINS "Generate sequenced IDs for Scopes that are not part of another Scope"
RULE "Generate sequenced IDs for Scopes that are not part of another Scope": 
   I[Scope]-(scopeIPO;scopeIPO~) -- Scopes that are not part of another Scope are excluded as they cannot inherit their ID
   /\ scopeSeqNr;scopeSeqNr~
-- /\ scopeName;scopeName;scopeName~;scopeName~ -- Not needed, since both 'scopeName' and 'scopeName' are [TOT]
|- scopeID;scopeID~
VIOLATION (TXT "{EX} InsPair;scopeID;Scope;", SRC I, TXT ";Name;"
               , TGT scopeName
               , TXT "("
               , TGT scopeSeqNr
               , TXT ")"
          )

ROLE ScopeIdSvc MAINTAINS "Generate simple IDs for Scopes in other Scopes (that have an ID)"
SERVICE ScopeIdSvc MAINTAINS "Generate simple IDs for Scopes in other Scopes (that have an ID)"
RULE "Generate simple IDs for Scopes in other Scopes (that have an ID)": 
   I[Scope]-(scopeSeqNr;scopeSeqNr~) -- Scopes without SeqNr are excluded since they must inherit this sequence number
   /\ scopeIPO;scopeID;scopeID~;scopeIPO~
-- /\ scopeName;scopeName;scopeName~;scopeName~ -- Not needed, since both 'scopeName' and 'scopeName' are [TOT]
|- scopeID;scopeID~
VIOLATION (TXT "{EX} InsPair;scopeID;Scope;", SRC I, TXT ";Name;"
               , TGT scopeIPO;scopeID
               , TXT ":"
               , TGT scopeName
          )

ROLE ScopeIdSvc MAINTAINS "Generate sequenced IDs for Scopes that are part of another Scope"
SERVICE ScopeIdSvc MAINTAINS "Generate sequenced IDs for Scopes that are part of another Scope"
RULE "Generate sequenced IDs for Scopes that are part of another Scope": 
   I[Scope]
   /\ scopeIPO;scopeID;scopeID~;scopeIPO~
   /\ scopeSeqNr;scopeSeqNr~
-- /\ scopeName;scopeName;scopeName~;scopeName~ -- Not needed, since both 'scopeName' and 'scopeName' are [TOT]
|- scopeID;scopeID~
VIOLATION (TXT "{EX} InsPair;scopeID;Scope;", SRC I, TXT ";Name;"
               , TGT scopeIPO;scopeID
               , TXT ":"
               , TGT scopeName
               , TXT "("
               , TGT scopeSeqNr
               , TXT ")"
          )

ENDPROCESS
-----------------------------------------------------------
ENDCONTEXT