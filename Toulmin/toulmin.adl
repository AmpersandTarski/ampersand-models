CONTEXT Toulmin
{- Als inleiding, zie: http://dbnl.org/tekst/_taa008197601_01/_taa008197601_01_0048.php 

Het Toulmin model voor argumentatie bevat de volgende termen:
(Daaropvolgende Nederlandse termen zijn van Keers: "Argumentatie, redeneren, argumenteren, debatteren", Alphen a/d Rijn, 1974, p77)
- `Claim`, Bewering (ook: Conclusie): assertions that authors would like to prove to their audience
- `Ground`, Bewijsmateriaal (ook: Data, Fact): evidence and facts that help support a Claim, 
- `Warrant`, Staving (ook: rechtvaardiging): an assumptions or rules that link a set of Grounds to a Claim
- `Backing`, Ondersteuning van de staving: additional support of the warrant
- `Qualifier`, Beperking: word that shows a claim may not be true in all circumtances (e.g. "presumably", "Some", "many")
- `Rebuttal`, Voorbehoud: acknowledgement of another valid view of the situation (that may contradict the claim)
-}

INCLUDE "./toulmin - Example.xlsx" -- File contains testdata

INCLUDE "./TText_Module.adl" -- Include all TArgument and TText (related stuff) that we need to implement TArgs, Claims, Grounds, etc.

-- INCLUDE "./TArg_Portal.adl"

INCLUDE "./TText_Portal.adl"
INCLUDE "./TText_ButtonCRUD.adl" -- --# [ "No<interfacename>Ifc", "ApplicationDefinesAllTTextInterfaces", "NoEditingOfTTexts" ]

--[Equate `Scope` and `TArgument`]
CLASSIFY TArgument IS Scope -- Issue #851 states that this means that Scope and TArgument are completely equivalent. See https://github.com/AmpersandTarski/Ampersand/issues/851#issuecomment-441285601 

ttTArg :: TText * TArgument [UNI,TOT] -- replace `ttScope` by `ttTArg`
ROLE ExecEngine MAINTAINS "Equivalence - InsPair ttScope"
RULE "Equivalence - InsPair ttScope": ttTArg |- ttScope
VIOLATION (TXT "{EX} InsPair;ttScope;TText;", SRC I, TXT ";Scope;", TGT I[Scope])
ROLE ExecEngine MAINTAINS "Equivalence - DelPair ttScope"
RULE "Equivalence - DelPair ttScope": ttScope |- ttTArg
VIOLATION (TXT "{EX} DelPair;ttScope;TText;", SRC I, TXT ";Scope;", TGT I[Scope])

-- EQUIVALENCE isaClaim[TText] [PROP] == I /\ groundForClaim~;groundForClaim
isaClaim :: TText * TText [PROP] -- define relation isaClaim as shorthand for I /\ groundForClaim~;groundForClaim
ROLE ExecEngine MAINTAINS "Equivalence - InsPair isaClaim"
RULE "Equivalence - InsPair isaClaim": I[TText] /\ groundForClaim~;groundForClaim |- isaClaim
VIOLATION (TXT "{EX} InsPair;isaClaim;TText;", SRC I, TXT ";TText;", TGT I)
ROLE ExecEngine MAINTAINS "Equivalence - DelPair isaClaim"
RULE "Equivalence - DelPair isaClaim": isaClaim |- I[TText] /\ groundForClaim~;groundForClaim
VIOLATION (TXT "{EX} DelPair;isaClaim;TText;", SRC I, TXT ";TText;", TGT I)

groundForClaim :: TText * TText -- SRC TText provides evidence (facts, observations, data) that justifies the claim made by TGT TText
-- EQUIVALENCE isaGround[TText] [PROP] == I /\ groundForClaim~;groundForClaim
isaGround :: TText * TText [PROP] -- define relation isaGround as shorthand for I /\ groundForClaim~;groundForClaim
ROLE ExecEngine MAINTAINS "Equivalence - InsPair isaGround"
RULE "Equivalence - InsPair isaGround": I[TText] /\ groundForClaim;groundForClaim~ |- isaGround
VIOLATION (TXT "{EX} InsPair;isaGround;TText;", SRC I, TXT ";TText;", TGT I)
ROLE ExecEngine MAINTAINS "Equivalence - DelPair isaGround"
RULE "Equivalence - DelPair isaGround": isaGround |- I[TText] /\ groundForClaim;groundForClaim~
VIOLATION (TXT "{EX} DelPair;isaGround;TText;", SRC I, TXT ";TText;", TGT I)

warrantForClaim :: TText * TText -- SRC TText warrants the justification of the claim of TGT TText based on every of its grounds
-- EQUIVALENCE isaWarrant[TText] [PROP] == I /\ warrantForClaim~;warrantForClaim
isaWarrant :: TText * TText [PROP] -- define relation isaWarrant as shorthand for I /\ warrantForClaim~;warrantForClaim
ROLE ExecEngine MAINTAINS "Equivalence - InsPair isaWarrant"
RULE "Equivalence - InsPair isaWarrant": I[TText] /\ warrantForClaim;warrantForClaim~ |- isaWarrant
VIOLATION (TXT "{EX} InsPair;isaWarrant;TText;", SRC I, TXT ";TText;", TGT I)
ROLE ExecEngine MAINTAINS "Equivalence - DelPair isaWarrant"
RULE "Equivalence - DelPair isaWarrant": isaWarrant |- I[TText] /\ warrantForClaim;warrantForClaim~
VIOLATION (TXT "{EX} DelPair;isaWarrant;TText;", SRC I, TXT ";TText;", TGT I)

backingForWarrant :: TText * TText -- SRC TText provides a backing that (further) justifies the Ground (TGT TText) for some Claim.
-- EQUIVALENCE isaBacking[TText] [PROP] == I /\ backingForWarrant~;backingForWarrant
isaBacking :: TText * TText [PROP] -- define relation isaBacking as shorthand for I /\ backingForWarrant~;backingForWarrant
ROLE ExecEngine MAINTAINS "Equivalence - InsPair isaBacking"
RULE "Equivalence - InsPair isaBacking": I[TText] /\ backingForWarrant;backingForWarrant~ |- isaBacking
VIOLATION (TXT "{EX} InsPair;isaBacking;TText;", SRC I, TXT ";TText;", TGT I)
ROLE ExecEngine MAINTAINS "Equivalence - DelPair isaBacking"
RULE "Equivalence - DelPair isaBacking": isaBacking |- I[TText] /\ backingForWarrant;backingForWarrant~
VIOLATION (TXT "{EX} DelPair;isaBacking;TText;", SRC I, TXT ";TText;", TGT I)

rebuttalForClaim :: TText * TText -- SRC TText specifies exceptions where the claim of TGT TText is, or may not be justified.
-- EQUIVALENCE isaRebuttal[TText] [PROP] == I /\ rebuttalForClaim~;rebuttalForClaim
isaRebuttal :: TText * TText [PROP] -- define relation isaRebuttal as shorthand for I /\ rebuttalForClaim~;rebuttalForClaim
ROLE ExecEngine MAINTAINS "Equivalence - InsPair isaRebuttal"
RULE "Equivalence - InsPair isaRebuttal": I[TText] /\ rebuttalForClaim;rebuttalForClaim~ |- isaRebuttal
VIOLATION (TXT "{EX} InsPair;isaRebuttal;TText;", SRC I, TXT ";TText;", TGT I)
ROLE ExecEngine MAINTAINS "Equivalence - DelPair isaRebuttal"
RULE "Equivalence - DelPair isaRebuttal": isaRebuttal |- I[TText] /\ rebuttalForClaim;rebuttalForClaim~
VIOLATION (TXT "{EX} DelPair;isaRebuttal;TText;", SRC I, TXT ";TText;", TGT I)

--[Copying TArguments (and trigger TArgument copying)]--
targIsArgTemplate :: TArgument * TArgument [PROP] -- TArgument contains TTexts that are a template for a Toulmin argument instance
targIsBeingInited :: TArgument * TArgument [PROP] -- Toulmin argument TArgument is being constructed from its template

ROLE ExecEngine MAINTAINS "Create TArgument TTexts from TArgument Template"
RULE "Create TArgument TTexts from TArgument Template":
   ttTArg;targIsArgTemplate;scopeIII;targIsBeingInited |- ttICO~;ttTArg
VIOLATION (TXT "{EX} InsAtom;TText"
              ,TXT "{EX} InsPair;ttTArg;TText;_NEW;TArgument;", TGT I[TArgument]
              ,TXT "{EX} InsPair;ttICO;TText;_NEW;TText;", SRC I[TText]
              ,TXT "{EX} InsPair;ttName;TText;_NEW;TTName;", SRC ttName
          -- Andere attributen (moeten) worden gekopieerd door de regels uit de Inclusion service
          )
ROLE ExecEngine MAINTAINS "Argument remains 'being initialized' until all TTexts from the template have been copied"
RULE "Argument remains 'being initialized' until all TTexts from the template have been copied": 
   targIsArgTemplate;scopeIII;targIsBeingInited |- ttTArg~;-(ttICO~;ttTArg)
VIOLATION (TXT "{EX} DelPair;targIsBeingInited;TArgument;", TGT I, TXT ";TArgument;", TGT I)

--[Request to create TArgument from a Template]
RELATION instantiateTArgumentTemplateReq[TArgument*ScopeID] [UNI] -- Create a copy of an existing scope, (with the newly specified ScopeID)
ROLE ExecEngine MAINTAINS "Decline request to instantiate a new Toulmin Argument Template"
RULE "Decline request to instantiate a new Toulmin Argument Template": -- that is, if a TArgument with that ID already exists 
    instantiateTArgumentTemplateReq |- targIsArgTemplate;-(scopeIII;scopeID)
VIOLATION (TXT "{EX} DelPair;instantiateTArgumentTemplateReq;TArgument;", SRC I, TXT ";ScopeID;", TGT I)

ROLE ExecEngine MAINTAINS "Service request to instantiate a new Toulmin Argument Template"
RULE "Service request to instantiate a new Toulmin Argument Template":
    targIsArgTemplate;instantiateTArgumentTemplateReq - scopeIII;scopeID |- scopeIII;targIsBeingInited;I[Scope];scopeID
VIOLATION (TXT "{EX} InsAtom;TArgument"
              ,TXT "{EX} InsPair;scopeID;TArgument;_NEW;ScopeID;", TGT I
              ,TXT "{EX} InsPair;scopeIII;TArgument;", SRC I[TArgument], TXT ";TArgument;_NEW"
              ,TXT "{EX} InsPair;targIsBeingInited;TArgument;_NEW;TArgument;_NEW"
          ,TXT "{EX} DelPair;instantiateTArgumentTemplateReq;TArgument;", SRC I[TArgument], TXT ";ScopeID;", TGT I
          ,TXT "{EX} SetNavToOnCommit;/TArgument/_NEW"
          )

--[Toulmin Interfaces]

sessionTArgument :: SESSION * TArgument [UNI] -- The TArgument onto which the session user is focusing

INTERFACE "TArgument": I[TArgument] cRud BOX
    [ "TArgument": I cRud BOX <CDIV>
        [ "txt:ID": TXT "ID"
        , "ID": scopeID cRUd
        , "txt:Description": TXT "Description"
        , "Description": scopeDescr cRUd
        ]
    , "Claim": ttTArg~;(isaClaim-groundForClaim) INTERFACE "Claim"
    ]

INTERFACE "Claims": V[SESSION*TText] INTERFACE "Claim"
INTERFACE "Claim": isaClaim CRuD BOX <SHCOLS>
    [ "Name": ttName cRUd
    , "Value": ttValue cRUd
--  , " " : compVar~ cRud
    , "Template": ttTemplate cRUd
    , "Grounds" : groundForClaim~ LINKTO INTERFACE "TText"
    , "Warrant" : warrantForClaim~
    , "Rebuttal": rebuttalForClaim~
    , "Instance": ttInstance cRud
    ]


ENDCONTEXT