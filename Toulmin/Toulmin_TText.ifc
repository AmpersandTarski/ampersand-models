CONTEXT "Toulmin_TText_Portal" IN ENGLISH

VIEW STRONG: IfcText HTML TEMPLATE "View-STRONG.html" ENDVIEW   REPRESENT IfcText TYPE ALPHANUMERIC
VIEW TTScope: TText 
{ "text": ttScope
, "keyword": TXT " "
, "popover": ttScope;scopeDescr
} HTML TEMPLATE "View-TTextWithPopovertext.html" ENDVIEW
VIEW TTInstance_Template: TText 
{ "text": ttInstance
, "keyword": TXT "Text: "
, "popover": ttTemplate
} HTML TEMPLATE "View-TTextWithPopovertext.html" ENDVIEW
VIEW TTValue_Instance: TText 
{ "text": ttValue
, "keyword": TXT "Meaning: "
, "popover": ttInstance
} HTML TEMPLATE "View-TTextWithPopovertext.html" ENDVIEW
VIEW TTName_Value: TText
{ "text": ttName
, "keyword": TXT "Value: "
, "popover": ttValue
} HTML TEMPLATE "View-TTextWithPopovertext.html" ENDVIEW

--[TText_ButtonCRUD]

INCLUDE "Toulmin_TText_BCRUD.adl" -- --# [ "No<interfacename>Ifc", "ApplicationDefinesAllTTextInterfaces", "NoEditingOfTTexts" ]

--[TText_ButtonCRUD - Rules that maintain required populations]
-- 2a. You _MUST_ create rules that maintain the population of (the equivalents of)
--    `ttIsClean`RELATION [TText*TText] [PROP] -- Property that allows TText to be accepted/registered in the database
--    Here is some example-code that you can use if you replace**ttScope;ttScope~**with what you think is appropriate

ROLE ExecEngine MAINTAINS "Equivalence - InsPair ttIsClean"
RULE "Equivalence - InsPair ttIsClean": I /\ ttScope;ttScope~ |- ttIsClean
VIOLATION (TXT "{EX} InsPair;ttIsClean;TText;", SRC I, TXT ";TText;", TGT I)
ROLE ExecEngine MAINTAINS "Equivalence - DelPair ttIsClean"
RULE "Equivalence - DelPair ttIsClean": ttIsClean |- I /\ ttScope;ttScope~
VIOLATION (TXT "{EX} DelPair;ttIsClean;TText;", SRC I, TXT ";TText;", TGT I)

-- 2b. You _MUST_ create rules that maintain the population of (the equivalents of)
--    `sfAppAllowsTTextSelReq`RELATION [TTextContext*TTextContext] [PROP] -- Event, that signals that the application has processed whatever was needed before `sfSelReqForTText` could be processed
--    In cases where TText is used in an application that combines the use of TText, YYYY, ZZZZ etc., 
--    selecting an TText may require that within the contexts of (YYYY, ZZZZ) some (de)selection of YYYY or ZZZZ has to be done.
--    The following rule shows how to set `sfAppAllowsTTextSelReq` to signal that such processing is done.
--    The actual processing can be done in the VIOLATION of this rule (see the comments below).
--    If all this does not apply to TText, then leave the code as it is shown (don't remove it)
ROLE ExecEngine MAINTAINS "InsPair sfAppAllowsTTextSelReq" -- Event, that signals that the application has processed whatever was needed before `sfSelReqForTText` could be processed
RULE "InsPair sfAppAllowsTTextSelReq": sfSelReqForTText-sfSelectedTText |- sfAppAllowsTTextSelReq;sfSelReqForTText
VIOLATION (TXT "{EX} InsPair;sfAppAllowsTTextSelReq;TTextContext;", SRC I, TXT ";TTextContext;", SRC I
--        ,TXT "{EX} DelPair;sfSelectedYY;YYContext;", SRC sessionTTextContext~;sessionYYContext, TXT ";YYYY;", SRC sessionTTextContext~;sessionYYContext;sfSelectedYY
--        ,TXT "{EX} DelPair;sfSelectedZZ;ZZContext;", SRC sessionTTextContext~;sessionZZContext, TXT ";ZZZZ;", SRC sessionTTextContext~;sessionZZContext;sfSelectedZZ
          )

-- 2c. You _MUST_ create one or more rules that maintain the population of (the equivalents of)
--    - `sfCreateTTextIsAllowed`RELATION [TTextContext*TTextContext] [PROP] -- User is allowed to create a new TText in the session
--    - `sfAllowSelectOnTText`RELATION [TTextContext*TText]           -- User is allowed to select (view) the TText in the session
--    - `sfAllowUpdateOnTText`RELATION [TTextContext*TText]           -- User is allowed to update (edit) the TText in the session
--    - `sfAllowDeleteOnTText`RELATION [TTextContext*TText]           -- User is allowed to delete the TText in the session
--    and/or make sure that you have INTERFACEs by which this population can be maintained. 
--    If you want everyone to be able to do everything with TTexts, you can use the following example code:

ROLE ExecEngine MAINTAINS "Creating a TText is only allowed in the context of a TArgument"
RULE "Creating a TText is only allowed in the context of a TArgument":
   sessionTArgument~;"_SESSION";sessionTTextContext |- V;sfCreateTTextIsAllowed
VIOLATION (TXT "{EX} InsPair;sfCreateTTextIsAllowed;TTextContext;", TGT I, TXT ";TTextContext;", TGT I)
-- If you change the above rule, make sure you also do the associated `DelPair;sfCreateTTextIsAllowed`
ROLE ExecEngine MAINTAINS "If there is no TArgument (context), creating a TText is not allowed"
RULE "If there is no TArgument (context), creating a TText is not allowed":
   sfCreateTTextIsAllowed |- V;sessionTArgument~;"_SESSION";sessionTTextContext
VIOLATION (TXT "{EX} DelPair;sfCreateTTextIsAllowed;TTextContext;", SRC I, TXT ";TTextContext;", TGT I)

ROLE ExecEngine MAINTAINS "TText_ButtonCRUD allows all users to Select, Update, Delete every TText"
RULE "TText_ButtonCRUD allows all users to Select, Update, Delete every TText": 
   V |- sfAllowSelectOnTText /\ sfAllowUpdateOnTText /\ sfAllowDeleteOnTText
VIOLATION (TXT "{EX} InsPair;sfAllowSelectOnTText;TTextContext;", SRC I, TXT ";TText;", TGT I
          ,TXT "{EX} InsPair;sfAllowUpdateOnTText;TTextContext;", SRC I, TXT ";TText;", TGT I
          ,TXT "{EX} InsPair;sfAllowDeleteOnTText;TTextContext;", SRC I, TXT ";TText;", TGT I
          )
-- If you change the above rule, make sure you also do the associated `DelPair` rules.

--[TText_ButtonCRUD - Define VIEWs to summarize what TText is about, for several purposes]
-- 3a. You _MUST_ define a VIEW called `TTextSelectionSummary`, which is used in the selection dropdown box
-- 3b. You _MUST_ define a VIEW called `TTextOverviewSummary`, which is used in the default Overview view
--    In the code provided below, change `I` to something more appropriate

VIEW TTextSelectionSummary: TText { "Name": ttName, " (": TXT " (", "Value": ttValue, ") - ": TXT ") - ", "Instance": ttInstance} ENDVIEW
VIEW TTextOverviewSummary:  TText { "Name": ttName, " (": TXT " (", "Value": ttValue, ") - ": TXT ") - ", "Instance": ttInstance} ENDVIEW

--[TText_ButtonCRUD - Interfaces]
-- 4a. The code in this template file has several predefined interfaces that need to be integrated with your application.
--    One way to do that is to copy them into your own code and adapt them there 
--    (you can prevent them being compiled in this file by specifying conditional-compilation variable `No<interfacename>Ifc`)
--    Alternatively, you can use them (i.e.: refer to them from your application script).
--    In that case, you still must define some interfaces, specifically the following:
--    - `INTERFACE "ShowTText": I[TText]` (etc.) -- This interface must allow the user to see the details of the TText
--    - `INTERFACE "InitTText": I[TText]` (etc.) -- This interface must allow the user to make a just created TText 'clean'
--    - `INTERFACE "EditTText": I[TText]` (etc.) -- This interface must allow the user to edit the TText
--    N.B.: Define the interfaces such that they do not show when there is nothing to do.
--          This means that the toplevel should be <DIV>, <CDIV>, <HROWS>, <HCOLS> or such.

INTERFACE "ShowTText": I[TText] cRud BOX
   [ "Name": ttName cRud
   , "Value": ttValue cRud
   , "Instance": I cRud <TTInstance_Template>
   ]
INTERFACE "InitTText": I[TText] cRud BOX
   [ "Scope": ttScope cRUd
   , "Name": ttName cRUd
   ]
INTERFACE "EditTText": I[TText] cRud BOX
   [ "Scope": I cRud <TTScope>
   , "Name": ttName cRUd
   , "Value": ttValue cRUd
   , "Template": ttTemplate cRUd
   ]

-- 4b. If you want to use the interfaces provided in this file, you must also provide
--    An interface that allows the user to see an overview of the TTexts that he is allowed to work with, using
--    `INTERFACE "OverviewTText": I[TTextContext]`
--    Here is an example of how that could be done (which you can modify to suit your needs)

INTERFACE "OneLineSummaryTText": I /\ sfAllowSelectOnTText~;sessionTTextContext~;"_SESSION";sessionTTextContext;sfAllowSelectOnTText BOX <SHCOLS>
   [ "TText": I cRud <TTextOverviewSummary> -- This could become more elaborate
   ]

POPULATION IfcText CONTAINS [ "There is nothing to show" ]
INTERFACE "OverviewTText": I[TTextContext] cRud BOX <DIV>
   [ "Nothing to do": (I - sfAllowSelectOnTText;sfAllowSelectOnTText~);V;"There is nothing to show"[IfcText] <STRONG>
   , "Listing TTexts": sfAllowSelectOnTText INTERFACE "OneLineSummaryTText"
-- Additional stuff can be added here
   ]

--    - An interface that allows the user to select one of the TTexts to start working with it, using
--      `INTERFACE "SelectTText": I[TTextContext]` -- Make sure you only allow the `sfAllowSelectOnTText` to be selectable.
--    If you do not have special requirements, you can use the following code to provide these interfaces:

POPULATION IfcText CONTAINS [ "There is nothing to select from" ]
INTERFACE "SelectTText": I[TTextContext] cRud BOX <DIV>
   [ "Nothing to do": (I - sfAllowSelectOnTText;sfAllowSelectOnTText~);V;"There is nothing to select from"[IfcText] <STRONG>
   , "Selecting TTexts": sfAllowSelectOnTText cRud BOX <CDIV>
      [ "Deselect": sfSelectedTText~ BOX <PROPBUTTON> [ property: sfTTextDeselectReq cRUd ]
      , "Select": I-sfSelectedTText~;sessionTTextContext~;"_SESSION"[SESSION];sessionTTextContext;sfSelectedTText BOX <PROPBUTTON>
         [ property: ttSelectReq cRUd ]
      , "TText": I cRud <TTextOverviewSummary> -- This could be made more elaborate
      ]
   ]

--[TText_ButtonCRUD - Navigation]
-- 5. ButtonCRUD uses events (clicking a button) to compute the state of affairs.
--    Every such state typically has its own interface associated with it. 
--    In order to get a smooth user experience, changes of state should be accompanied with switching of interfaces.
--    In order to be flexible and give application developers the control they need,
--    every change in state will navigate to an interface with a predefined name, as listed below
--    You can easily define these interfaces as in instance of an existing interface, as exemplified in the code below.
--    The `INTERFACE "TTextPortal"` has been designed to accommodate every state.
--    Thus, you can use it as the generic interface to navigate to.
--    Note that `INTERFACE "TTextPortal"` has been made invisible, because in practice it will be called from the application's portal.
--    Conversely: be sure that you create a portal from which to call it if needed.

INTERFACE "AfterEventSelectTText":   I[TTextContext] INTERFACE "TTextPortal" -- Another TText has been selected (to further focus on)
INTERFACE "AfterEventDeselectTText": I[TTextContext] INTERFACE "TTextPortal" -- Currently selected TText has been deselected (so go to some overview)
INTERFACE "AfterEventUpdateTText":   I[TTextContext] INTERFACE "TTextPortal" -- Updating has started (ready to edit)
INTERFACE "AfterEventDoneUpdTText":  I[TTextContext] INTERFACE "TTextPortal" -- Updating has terminated (done editing)
INTERFACE "AfterEventDeleteTText":   I[TTextContext] INTERFACE "TTextPortal" -- TText has been deleted (so go to some overview)
INTERFACE "AfterEventDrpDnSelTText": I[TTextContext] INTERFACE "TTextPortal" -- TText has been selected by dropdown menu (so go to 'portal')

--[TText_ButtonCRUD - Switching between different portals]
-- 6a. This section provides an `INTERFACE "TTextPortal"` that allows users to navigate (select, edit, delete) TText's
--    Usually though, an application also has portals for YYYYs, ZZZZs and perhaps more,
--    and the application will need to switch between such portals. So, we assume that a 
--    general application portal exists (which is out of scope here) that implements such functionality.
--    However, we do support functionality that helps such a portal do things:
--    - in (the header bar of) the general portal, you can use `INTERFACE "GoToTTextPortalButton"`, 
--      that implements a button that when clicked, navigates the user to the TTextPortal.
--      You can customize the name that goes on the button by modifying the text `TTexts` in the below code:

ROLE ExecEngine MAINTAINS "Set name for TTextPortalButton"
RULE "Set name for TTextPortalButton": I |- sfTTextPortalButtonText;"TTexts";sfTTextPortalButtonText~
VIOLATION (TXT "{EX} InsPair;sfTTextPortalButtonText;TTextContext;", SRC I, TXT ";ButtonText;TTexts")

--    - also, we assume that the relation `sessionCurrentPortalIfc` is populated by the name of the interface
--      that the general application portal uses to show its 'working area'. In particular, this means that such
--      a relation must be initialized. If the default portal to be shown is the TTextPortal, then such initialization
--      is performed by the following code:

-- 6c. In order to support such contributions, we provide some example code for
--    `INTERFACE "TTextApplicationHeaderBarComponent"` -- provide TText contribution for ApplicationPortalHeaderBar interface
--    as follows:

INTERFACE "TTextApplicationHeaderBarComponent" FOR User: I[TTextContext] cRud BOX <CDIV>
   [ "Focus on TText": I INTERFACE "GoToTTextPortalButton"
-- add additional breadcrumb stuff here, e.g.
   -- , "Selected TText": sfSelectedTText cRud BOX <CDIV>
   --    [ "TText": I cRud
   --    ]
   ]

-- 6d. Whenever the selection of an TText is changed, this may require resetting the selection of an YYYY and/or ZZZZ.
--    Here is the code that you need to adapt so as to accommodate for this
RELATION sfCurrentTText[TTextContext*TText] [UNI] -- The TText that is, or was previously, selected
ROLE ExecEngine MAINTAINS "Reset BCRUD select/edit statemachines when TText selection is changed"
RULE "Reset BCRUD select/edit statemachines when TText selection is changed": sfSelectedTText |- sfCurrentTText
VIOLATION (TXT "{EX} InsPair;sfCurrentTText;TTextContext;", SRC I, TXT ";TText;", TGT I
      --  ,TXT "{EX} InsPair;yyyBCRUDResetReq;YYContext;", SRC sessionTTextContext~;sessionYYContext, TXT ";YYContext;", SRC sessionTTextContext~;sessionYYContext
      --  ,TXT "{EX} InsPair;zzzBCRUDResetReq;ZZContext;", SRC sessionTTextContext~;sessionZZContext, TXT ";ZZContext;", SRC sessionTTextContext~;sessionZZContext
          )

{-**The following code needs to be placed in the file that implements the generic application portal**,
e.g. that specifies `INTERFACE "Home"`, `INTERFACE AnonHome` and/or `INTERFACE UserHome`.
You should**ONLY transfer the below text**if TText is going to be your main/default user focus.

--[Initialize general application portal]
-- The general application portal must know what the current portal interface is that needs to be used.
-- This is done by populating relation `sessionCurrentPortalIfc`:

ROLE ExecEngine MAINTAINS "Initialize sessionCurrentPortalIfc as TTextPortal"
RULE "Initialize sessionCurrentPortalIfc as TTextPortal": 
   (I - sessionCurrentPortalIfc;sessionCurrentPortalIfc~);sessionTTextContext |- sessionTTextContext;sfChangePortalToTTextReq
VIOLATION (TXT "{EX} InsPair;sfChangePortalToTTextReq;TTextContext;", TGT I, TXT ";TTextContext;", TGT I)

POPULATION isInvisible CONTAINS [ ("UserHome", "UserHome") ]
INTERFACE "UserHome" FOR User: "_SESSION";sessionIsUser;sessionTTextContext INTERFACE "TTextPortal"

-- The general application portal should have a header bar when the application not only uses TTexts
-- but also YYYYs and/or ZZZZs. For each of these, the equivalent of `INTERFACE "TTextApplicationHeaderBarComponent"``
-- will be called to provide the respective contributions.

POPULATION isInvisible CONTAINS [ ("ApplicationPortalHeaderBar", "ApplicationPortalHeaderBar") ]
INTERFACE "ApplicationPortalHeaderBar" FOR User: sessionIsUser cRud BOX <CDIV>
   [ "Portal Switch buttons": I cRud BOX <CDIV>
      [ "TText": sessionTTextContext INTERFACE "GoToTTextPortalButton"
--    , "YYYY": sessionYYContext INTERFACE "GoToYYYYPortalButton"
--    , "ZZZZ": sessionZZContext INTERFACE "GoToZZZZPortalButton"
      ]
   , "User": I cRud BOX <CDIV>
      [ "User": sessionAccount;accPersonRef cRud
      , "Logout": I cRud BOX <PROPBUTTON> [ property : sessionLogoutReq cRUd ]
      ]
   ]

-- 6b. If the general application portal implements a header bar, it should do so by defining
--    `INTERFACE "ApplicationPortalHeaderBar"` -- header bar for the general application portal
--    Such a headerbar would typically show breadcrumbs or contributions from TText (and/or YYYY and/or ZZZZ)
--    Here is example code for such an interface:

POPULATION isInvisible CONTAINS [ ("SessionUserAndLogout", "SessionUserAndLogout") ]
INTERFACE "SessionUserAndLogout" FOR User: sessionIsUser cRud BOX <CDIV>
   [ "Logout": I cRud BOX <PROPBUTTON> [ property : sessionLogoutReq cRUd ]
   , "User": I cRud BOX <CDIV> [ "User": sessionAccount;accPersonRef cRud ]
--#IF Debugging
   , "Show Permissions": I cRud BOX <RDETAILS>
      [  "C": I cRud COLS
         [ "TText": sessionTTextContext;sfCreateTTextIsAllowed cRud
      -- , "YY": sessionYYContext;sfCreateYYIsAllowed cRud
      -- , "ZZ": sessionZZContext;sfCreateZZIsAllowed cRud
         ]
      , "Sel": I cRud BOX <CDETAILS>
         [ "TText": sessionTTextContext;sfAllowSelectOnTText cRud
      -- , "YY": sessionYYContext;sfAllowSelectOnYY cRud
      -- , "ZZ": sessionZZContext;sfAllowSelectOnZZ cRud
         ]
      , "Upd": I cRud BOX <CDETAILS>
         [ "TText": sessionTTextContext;sfAllowUpdateOnTText cRud
      -- , "YY": sessionYYContext;sfAllowUpdateOnYY cRud
      -- , "ZZ": sessionZZContext;sfAllowUpdateOnZZ cRud
         ]
      ]
--#ENDIF Debugging
   ]
-}
ENDCONTEXT