CONTEXT TArg_Portal

INCLUDE "Toulmin_TArg_BCRUD.adl" -- --# [ "No<interfacename>Ifc", "ApplicationDefinesAllTArgInterfaces", "NoEditingOfTArguments" ]

--[TArgument_ButtonCRUD - Rules that maintain required populations]
-- 2a. You _MUST_ create rules that maintain the population of (the equivalents of)
--    `targIsClean` :: TArgument * TArgument [PROP] -- Property that allows TArgument to be accepted/registered in the database
--    Here is some example-code that you can use if you replace **scopeID;scopeID~** with what you think is appropriate

ROLE ExecEngine MAINTAINS "Equivalence - InsPair targIsClean"
RULE "Equivalence - InsPair targIsClean": I[TArgument] /\ scopeID;scopeID~ |- targIsClean
VIOLATION (TXT "{EX} InsPair;targIsClean;TArgument;", SRC I, TXT ";TArgument;", TGT I)
ROLE ExecEngine MAINTAINS "Equivalence - DelPair targIsClean"
RULE "Equivalence - DelPair targIsClean": targIsClean |- I[TArgument] /\ scopeID;scopeID~
VIOLATION (TXT "{EX} DelPair;targIsClean;TArgument;", SRC I, TXT ";TArgument;", TGT I)

-- 2b. You _MUST_ create rules that maintain the population of (the equivalents of)
--    `sfAppAllowsTArgSelReq`:: TArgContext * TArgContext [PROP] -- Event, that signals that the application has processed whatever was needed before `sfSelReqForTArg` could be processed
--    In cases where TArgument is used in an application that combines the use of TArgument, YYYY, ZZZZ etc., 
--    selecting an TArgument may require that within the contexts of (YYYY, ZZZZ) some (de)selection of YYYY or ZZZZ has to be done.
--    The following rule shows how to set `sfAppAllowsTArgumentSelReq` to signal that such processing is done.
--    The actual processing can be done in the VIOLATION of this rule (see the comments below).
--    If all this does not apply to TArgument, then leave the code as it is shown (don't remove it)
ROLE ExecEngine MAINTAINS "InsPair sfAppAllowsTArgSelReq" -- Event, that signals that the application has processed whatever was needed before `sfSelReqForTArg` could be processed
RULE "InsPair sfAppAllowsTArgSelReq": sfSelReqForTArg-sfSelectedTArg |- sfAppAllowsTArgSelReq;sfSelReqForTArg
VIOLATION (TXT "{EX} InsPair;sfAppAllowsTArgSelReq;TArgContext;", SRC I, TXT ";TArgContext;", SRC I
--        ,TXT "{EX} DelPair;sfSelectedYY;YYContext;", SRC sessionTArgContext~;sessionYYContext, TXT ";YYYY;", SRC sessionTArgContext~;sessionYYContext;sfSelectedYY
--        ,TXT "{EX} DelPair;sfSelectedZZ;ZZContext;", SRC sessionTArgContext~;sessionZZContext, TXT ";ZZZZ;", SRC sessionTArgContext~;sessionZZContext;sfSelectedZZ
          )

-- 2c. You _MUST_ create one or more rules that maintain the population of (the equivalents of)
--    - `sfCreateTArgIsAllowed` :: TArgContext * TArgContext [PROP] -- User is allowed to create a new TArgument in the session
--    - `sfAllowSelectOnTArg`   :: TArgContext * TArgument           -- User is allowed to select (view) the TArgument in the session
--    - `sfAllowUpdateOnTArg`   :: TArgContext * TArgument           -- User is allowed to update (edit) the TArgument in the session
--    - `sfAllowDeleteOnTArg`   :: TArgContext * TArgument           -- User is allowed to delete the TArgument in the session
--    and/or make sure that you have INTERFACEs by which this population can be maintained. 
--    If you want everyone to be able to do everything with TArgs, you can use the following example code:

ROLE ExecEngine MAINTAINS "TArgument_ButtonCRUD allows all users to create a TArgument"
RULE "TArgument_ButtonCRUD allows all users to create a TArgument": I[TArgContext] |- sfCreateTArgIsAllowed
VIOLATION (TXT "{EX} InsPair;sfCreateTArgIsAllowed;TArgContext;", SRC I, TXT ";TArgContext;", TGT I)
-- If you change the above rule, make sure you also do the associated `DelPair;sfCreateTArgIsAllowed`

ROLE ExecEngine MAINTAINS "TArgument_ButtonCRUD allows all users to Select, Update, Delete every TArgument"
RULE "TArgument_ButtonCRUD allows all users to Select, Update, Delete every TArgument": V |- sfAllowSelectOnTArg /\ sfAllowUpdateOnTArg /\ sfAllowDeleteOnTArg
VIOLATION (TXT "{EX} InsPair;sfAllowSelectOnTArg;TArgContext;", SRC I, TXT ";TArgument;", TGT I
          ,TXT "{EX} InsPair;sfAllowUpdateOnTArg;TArgContext;", SRC I, TXT ";TArgument;", TGT I
          ,TXT "{EX} InsPair;sfAllowDeleteOnTArg;TArgContext;", SRC I, TXT ";TArgument;", TGT I
          )
-- If you change the above rule, make sure you also do the associated `DelPair` rules.

--[TArgument_ButtonCRUD - Define VIEWs to summarize what TArgument is about, for several purposes]
-- 3a. You _MUST_ define a VIEW called `TArgSelectionSummary`, which is used in the selection dropdown box
-- 3b. You _MUST_ define a VIEW called `TArgOverviewSummary`, which is used in the default Overview view
--    In the code provided below, change `I` to something more appropriate

VIEW TArgSelectionSummary: TArgument { "Summary": scopeID } ENDVIEW
VIEW TArgOverviewSummary:  TArgument { "Summary": scopeID } ENDVIEW

--[TArgument_ButtonCRUD - Interfaces]
-- 4a. The code in this template file has several predefined interfaces that need to be integrated with your application.
--    One way to do that is to copy them into your own code and adapt them there 
--    (you can prevent them being compiled in this file by specifying conditional-compilation variable `No<interfacename>Ifc`)
--    Alternatively, you can use them (i.e.: refer to them from your application script).
--    In that case, you still must define some interfaces, specifically the following:
--    - `INTERFACE "ShowTArg": I[TArgument]` (etc.) -- This interface must allow the user to see the details of the TArgument
--    - `INTERFACE "InitTArg": I[TArgument]` (etc.) -- This interface must allow the user to make a just created TArgument 'clean'
--    - `INTERFACE "EditTArg": I[TArgument]` (etc.) -- This interface must allow the user to edit the TArgument
--    N.B.: Define the interfaces such that they do not show when there is nothing to do.
--          This means that the toplevel should be <DIV>, <CDIV>, <HROWS>, <HCOLS> or such.

INTERFACE "ShowTArg": I[TArgument] cRud BOX
[ "ID": scopeID cRud
, "Description": scopeDescr cRud
--, "Owner": scopeOwner
]
INTERFACE "InitTArg": I[TArgument] INTERFACE "EditTArg"
INTERFACE "EditTArg": I[TArgument] cRud BOX
[ "ID": scopeID cRUd
, "Description": scopeDescr cRUd
--, "Owner": scopeOwner
]

-- 4b. If you want to use the interfaces provided in this file, you must also provide
--    An interface that allows the user to see an overview of the TArguments that he is allowed to work with, using
--    `INTERFACE "OverviewTArg": I[TArgContext]`
--    Here is an example of how that could be done (which you can modify to suit your needs)

INTERFACE "OneLineSummaryTArg": I /\ sfAllowSelectOnTArg~;sessionTArgContext~;"_SESSION";sessionTArgContext;sfAllowSelectOnTArg BOX <SHCOLS>
   [ "TArgument": I cRud <TArgOverviewSummary> -- This could become more elaborate
   ]

POPULATION IfcText CONTAINS [ "There is nothing to show" ]
INTERFACE "OverviewTArg": I[TArgContext] cRud BOX <DIV>
   [ "Nothing to do": (I - sfAllowSelectOnTArg;sfAllowSelectOnTArg~);V;"There is nothing to show"[IfcText] <STRONG>
   , "Listing TArgs": sfAllowSelectOnTArg INTERFACE "OneLineSummaryTArg"
-- Additional stuff can be added here
   ]

--    - An interface that allows the user to select one of the TArguments to start working with it, using
--      `INTERFACE "SelectTArg": I[TArgContext]` -- Make sure you only allow the `sfAllowSelectOnTArg` to be selectable.
--    If you do not have special requirements, you can use the following code to provide these interfaces:

POPULATION IfcText CONTAINS [ "There is nothing to select from" ]
INTERFACE "SelectTArg": I[TArgContext] cRud BOX <DIV>
   [ "Nothing to do": (I - sfAllowSelectOnTArg;sfAllowSelectOnTArg~);V;"There is nothing to select from"[IfcText] <STRONG>
   , "Selecting TArgs": sfAllowSelectOnTArg cRud BOX <CDIV>
      [ "Deselect": sfSelectedTArg~ BOX <PROPBUTTON> [ property: sfTArgDeselectReq cRUd ]
      , "Select": I-sfSelectedTArg~;sessionTArgContext~;"_SESSION"[SESSION];sessionTArgContext;sfSelectedTArg BOX <PROPBUTTON>
         [ property: targSelectReq cRUd ]
      , "TArgument": I cRud <TArgOverviewSummary> -- This could be made more elaborate
      ]
   ]

--[TArgument_ButtonCRUD - Navigation]
-- 5. ButtonCRUD uses events (clicking a button) to compute the state of affairs.
--    Every such state typically has its own interface associated with it. 
--    In order to get a smooth user experience, changes of state should be accompanied with switching of interfaces.
--    In order to be flexible and give application developers the control they need,
--    every change in state will navigate to an interface with a predefined name, as listed below
--    You can easily define these interfaces as in instance of an existing interface, as exemplified in the code below.
--    The `INTERFACE "TArgumentPortal"` has been designed to accommodate every state.
--    Thus, you can use it as the generic interface to navigate to.
--    Note that `INTERFACE "TArgumentPortal"` has been made invisible, because in practice it will be called from the application's portal.
--    Conversely: be sure that you create a portal from which to call it if needed.

INTERFACE "AfterEventSelectTArgument":   I[TArgContext] INTERFACE "TArgumentPortal" -- Another TArgument has been selected (to further focus on)
INTERFACE "AfterEventDeselectTArgument": I[TArgContext] INTERFACE "TArgumentPortal" -- Currently selected TArgument has been deselected (so go to some overview)
INTERFACE "AfterEventUpdateTArgument":   I[TArgContext] INTERFACE "TArgumentPortal" -- Updating has started (ready to edit)
INTERFACE "AfterEventDoneUpdTArgument":  I[TArgContext] INTERFACE "TArgumentPortal" -- Updating has terminated (done editing)
INTERFACE "AfterEventDeleteTArgument":   I[TArgContext] INTERFACE "TArgumentPortal" -- TArgument has been deleted (so go to some overview)
INTERFACE "AfterEventDrpDnSelTArgument": I[TArgContext] INTERFACE "TArgumentPortal" -- TArgument has been selected by dropdown menu (so go to 'portal')

--[TArgument_ButtonCRUD - Switching between different portals]
-- 6a. This section provides an `INTERFACE "TArgumentPortal"` that allows users to navigate (select, edit, delete) TArgument's
--    Usually though, an application also has portals for YYYYs, ZZZZs and perhaps more,
--    and the application will need to switch between such portals. So, we assume that a 
--    general application portal exists (which is out of scope here) that implements such functionality.
--    However, we do support functionality that helps such a portal do things:
--    - in (the header bar of) the general portal, you can use `INTERFACE "GoToTArgumentPortalButton"`, 
--      that implements a button that when clicked, navigates the user to the TArgumentPortal.
--      You can customize the name that goes on the button by modifying the text "TArguments" in the below code:

ROLE ExecEngine MAINTAINS "Set name for TArgPortalButton"
RULE "Set name for TArgPortalButton": I |- sfTArgPortalButtonText;"TArguments";sfTArgPortalButtonText~
VIOLATION (TXT "{EX} InsPair;sfTArgPortalButtonText;TArgContext;", SRC I, TXT ";ButtonText;TArguments")

--    - also, we assume that the relation `sessionCurrentPortalIfc` is populated by the name of the interface
--      that the general application portal uses to show its 'working area'. In particular, this means that such
--      a relation must be initialized. If the default portal to be shown is the TArgumentPortal, then such initialization
--      is performed by the following code:

-- 6c. In order to support such contributions, we provide some example code for
--    `INTERFACE "TArgumentApplicationHeaderBarComponent"` -- provide TArgument contribution for ApplicationPortalHeaderBar interface
--    as follows:

INTERFACE "TArgumentApplicationHeaderBarComponent" FOR User: I[TArgContext] cRud BOX <CDIV>
   [ "Focus on TArgument": I INTERFACE "GoToTArgumentPortalButton"
-- add additional breadcrumb stuff here, e.g.
   , "Selected TArg": sfSelectedTArg cRud BOX <CDIV>
      [ "TArgument": I cRud
      ]
   ]

-- 6d. Whenever the selection of an TArgument is changed, this may require resetting the selection of an YYYY and/or ZZZZ.
--    Here is the code that you need to adapt so as to accommodate for this
sfCurrentTArg :: TArgContext * TArgument [UNI] -- The TArgument that is, or was previously, selected
ROLE ExecEngine MAINTAINS "Reset BCRUD select/edit statemachines when TArg selection is changed"
RULE "Reset BCRUD select/edit statemachines when TArg selection is changed": sfSelectedTArg |- sfCurrentTArg
VIOLATION (TXT "{EX} InsPair;sfCurrentTArg;TArgContext;", SRC I, TXT ";TArgument;", TGT I
      --  ,TXT "{EX} InsPair;yyyBCRUDResetReq;YYContext;", SRC sessionTArgContext~;sessionYYContext, TXT ";YYContext;", SRC sessionTArgContext~;sessionYYContext
      --  ,TXT "{EX} InsPair;zzzBCRUDResetReq;ZZContext;", SRC sessionTArgContext~;sessionZZContext, TXT ";ZZContext;", SRC sessionTArgContext~;sessionZZContext
          )

{- **The following code needs to be placed in the file that implements the generic application portal**,
e.g. that specifies `INTERFACE "Home"`, `INTERFACE AnonHome` and/or `INTERFACE UserHome`.
You should **ONLY transfer the below text** if TArgument is going to be your main/default user focus.

--[Initialize general application portal]
-- The general application portal must know what the current portal interface is that needs to be used.
-- This is done by populating relation `sessionCurrentPortalIfc`:

ROLE ExecEngine MAINTAINS "Initialize sessionCurrentPortalIfc as TArgumentPortal"
RULE "Initialize sessionCurrentPortalIfc as TArgumentPortal": 
   (I - sessionCurrentPortalIfc;sessionCurrentPortalIfc~);sessionTArgContext |- sessionTArgContext;sfChangePortalToTArgReq
VIOLATION (TXT "{EX} InsPair;sfChangePortalToTArgReq;TArgContext;", TGT I, TXT ";TArgContext;", TGT I)

POPULATION isInvisible CONTAINS [ ("UserHome", "UserHome") ]
INTERFACE "UserHome" FOR User: "_SESSION";sessionIsUser;sessionTArgContext INTERFACE "TArgumentPortal"

-- The general application portal should have a header bar when the application not only uses TArguments
-- but also YYYYs and/or ZZZZs. For each of these, the equivalent of `INTERFACE "TArgumentApplicationHeaderBarComponent"``
-- will be called to provide the respective contributions.

POPULATION isInvisible CONTAINS [ ("ApplicationPortalHeaderBar", "ApplicationPortalHeaderBar") ]
INTERFACE "ApplicationPortalHeaderBar" FOR User: sessionIsUser cRud BOX <CDIV>
   [ "Portal Switch buttons": I cRud BOX <CDIV>
      [ "TArgument": sessionTArgContext INTERFACE "GoToTArgumentPortalButton"
--    , "YYYY": sessionYYContext INTERFACE "GoToYYYYPortalButton"
--    , "ZZZZ": sessionZZContext INTERFACE "GoToZZZZPortalButton"
      ]
   , "User": I cRud BOX <CDIV>
      [ "User": sessionAccount;accPersonRef cRud
      , "Logout": I cRud BOX <PROPBUTTON> [ property : sessionLogoutReq cRUd ]
      ]
   ]

-- 6b. If the general application portal implements a header bar, it should do so by defining
--    `INTERFACE "ApplicationPortalHeaderBar"` -- header bar for the general application portal
--    Such a headerbar would typically show breadcrumbs or contributions from TArgument (and/or YYYY and/or ZZZZ)
--    Here is example code for such an interface:

POPULATION isInvisible CONTAINS [ ("SessionUserAndLogout", "SessionUserAndLogout") ]
INTERFACE "SessionUserAndLogout" FOR User: sessionIsUser cRud BOX <CDIV>
   [ "Logout": I cRud BOX <PROPBUTTON> [ property : sessionLogoutReq cRUd ]
   , "User": I cRud BOX <CDIV> [ "User": sessionAccount;accPersonRef cRud ]
--#IF Debugging
   , "Show Permissions": I cRud BOX <RDETAILS>
      [  "C": I cRud COLS
         [ "TArg": sessionTArgContext;sfCreateTArgIsAllowed cRud
      -- , "YY": sessionYYContext;sfCreateYYIsAllowed cRud
      -- , "ZZ": sessionZZContext;sfCreateZZIsAllowed cRud
         ]
      , "Sel": I cRud BOX <CDETAILS>
         [ "TArg": sessionTArgContext;sfAllowSelectOnTArg cRud
      -- , "YY": sessionYYContext;sfAllowSelectOnYY cRud
      -- , "ZZ": sessionZZContext;sfAllowSelectOnZZ cRud
         ]
      , "Upd": I cRud BOX <CDETAILS>
         [ "TArg": sessionTArgContext;sfAllowUpdateOnTArg cRud
      -- , "YY": sessionYYContext;sfAllowUpdateOnYY cRud
      -- , "ZZ": sessionZZContext;sfAllowUpdateOnZZ cRud
         ]
      ]
--#ENDIF Debugging
   ]
-}

ENDCONTEXT