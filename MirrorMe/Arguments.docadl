CONTEXT Arguments IN ENGLISH MARKDOWN
INCLUDE "Arguments.adl"
INCLUDE "Login_doc.adl"
INCLUDE "Login.xlsx"

PURPOSE PATTERN Arguments
{+This pattern describes how one statement can be used to support another statement in an argument.
Each argument has one reason and one supported statement.
The reason of an argument is a statement, so it can be substantiated with other arguments.
+}

PURPOSE RELATION supports[Argument*Statement] IN DUTCH
{+De applicatie registreert van elk argument de onderbouwde bewering.
+}
PURPOSE RELATION supports[Argument*Statement] IN ENGLISH
{+Of every argument, the application registers the supported statement.
+}

PURPOSE RELATION reason[Argument*Statement] IN DUTCH
{+De applicatie registreert de reden van elk argument.
+}
PURPOSE RELATION reason[Argument*Statement] IN ENGLISH
{+The application registers the reason of every argument.
+}

PURPOSE RELATION arg[Statement*Text] IN DUTCH
{+Om een bewering in te voeren, kan de gebruiker de tekst van de bewering in een invulveld formuleren.
De applicatie dient dit vervolgens te administreren in het systeem.
+}
PURPOSE RELATION arg[Statement*Text] IN ENGLISH
{+To enter a statement, the user can phrase the text of a statement in an input field.
The application must then administer this in the system.
+}

PURPOSE RELATION ofClaim[Claim*Argument] IN DUTCH  -- ofClaim = states;(supports~;reason)*;reason~
{+Om de onderbouwing van een claim te registreren dient de applicatie argumenten aan die claim te kunnen koppelen.
Dit geeft de gebruiker maximale vrijheid om op een willekeurig moment tijdens het werken aan een zaak argumenten toe te voegen en/of wijzigen.
+}
PURPOSE RELATION ofClaim[Claim*Argument] IN ENGLISH  -- ofClaim = states;(supports~;reason)*;reason~
{+To substantiate a claim with arguments, the application must be able to associate arguments with that claim.
This gives the user maximum freedom to add or change arguments at an arbitrary moment when working on a case.
+}

PURPOSE RELATION legalGround[Argument*LegalGround] IN DUTCH
{+De applicatie kan een willekeurig aantal juridische gronden voor een argument registreren.
Dit geeft de gebruiker maximale vrijheid, omdat deze gronden op een willekeurig moment tijdens het werken aan de zaak kunnen worden gegeven.
+}
PURPOSE RELATION legalGround[Argument*LegalGround] IN ENGLISH
{+The application can register any number of legal grounds for an argument.
This gives the user maximum freedom, because those grounds may be provided at an arbitrary moment when working on the case.
+}

PURPOSE RULE addPhrase IN DUTCH -- arg |- V;phrasing
{+Een gebruiker mag een bewering als vrije tekst formuleren.
De applicatie reageert door een `Statement` aan te maken en de relatie `phrasing` te vullen met de ingevoerde tekst.
Hiervoor gebruikt de applicatie een geautomatiseerde regel.
+}
PURPOSE RULE addPhrase IN ENGLISH -- arg |- V;phrasing
{+A user can enter free text to make a statement.
The application reacts by creating a `Statement` and filling the relation `phrasing` with the text entered by the user.
The application uses an automated rule for that purpose.
+}

PURPOSE RULE addSupport IN DUTCH -- arg;phrasing~ |- supports~;reason
{+Wanneer de gebruiker een text formuleert in een invoerveld als reden voor een bewering,
dient de applicatie een `Argument` aan te maken waarin deze bewering als reden in dat argument wordt opgevoerd.
Hiervoor gebruikt de applicatie een geautomatiseerde regel.
+}
PURPOSE RULE addSupport IN ENGLISH -- arg;phrasing~ |- supports~;reason
{+When the user formulates a text as reason for a statement in an input field,
the application must create an `Argument` in which this statement is used as reason.
The application uses an automated rule for this purpose.
+}

PURPOSE RULE clearArg IN DUTCH -- supports~;reason |- -(arg;phrasing~)
{+Wanneer een bewering uit een invoerveld is overgenomen in een `Statement`, dient de applicatie de bewering uit het invoerveld te verwijderen.
+}
PURPOSE RULE clearArg IN ENGLISH  -- supports~;reason |- -(arg;phrasing~)
{+When a statement has been copied from an input field into a `Statement`, the application must remove that statement from the input field.
+}

PURPOSE RULE TOTsupports IN DUTCH -- I |- supports;supports~
{+Wanneer de bewering, die door een argument ondersteund wordt, niet meer bestaat, dient de applicatie het argument te verwijderen.
Hiervoor is een geautomatiseerde regel nodig.
+}
PURPOSE RULE TOTsupports IN ENGLISH -- I |- supports;supports~
{+When the statement that supports an argument no longer exists, the application must delete the argument by means of an automated rule.
+}


PURPOSE RULE TOTreason IN DUTCH -- I |- reason;reason~
{+Wanneer het deel van een argument, wat de reden voor dat argument vormt, niet meer bestaat, dient de applicatie het argument te verwijderen.
Hiervoor is een geautomatiseerde regel nodig.
+}
PURPOSE RULE TOTreason IN ENGLISH -- I |- reason;reason~
{+When the part of an argument that forms the reason no longer exists, the application must delete the argument by means of an automated rule.
+}

PURPOSE RELATION madeBy[Statement*Account] IN DUTCH
{+De applicatie dient de persoon, die een bewering heeft geponeerd, te registreren.
Dit maakt traceerbaarheid van beweringen mogelijk, zodra deze beweringen gebruikt worden in redeneringen.
Hiervoor wordt een account gebruikt, omdat daar een persoonsidentificatie aan gekoppeld is.
+}
PURPOSE RELATION madeBy[Statement*Account] IN ENGLISH
{+The application must register the person who has made a statement.
This allows traceability of statements when these statements are used in arguments.
For this purpose, we use an account, because each account comes with an identification of an individual.
+}

PURPOSE RELATION moment[Statement*Moment] IN DUTCH
{+De applicatie dient het moment te registreren dat een bewering is gemaakt.
+}
PURPOSE RELATION moment[Statement*Moment] IN ENGLISH
{+The application must register the moment on which a statement has been made.
+}

PURPOSE RELATION phrasing[Statement*Text] IN DUTCH
{+De applicatie dient de precieze formulering van een bewering als vrije tekst te registreren.
+}
PURPOSE RELATION phrasing[Statement*Text] IN ENGLISH
{+The application must register the exact phrasing of a statement as free text.
+}

PURPOSE RELATION evidence[Statement*Document] IN DUTCH
{+De applicatie dient documenten te registreren, die als bewijsmiddel aan een bewering zijn toegevoegd.
+}
PURPOSE RELATION evidence[Statement*Document] IN ENGLISH
{+The application must register documents that are used as evidence for a statement.
+}

PURPOSE RELATION case[Claim*Case] IN DUTCH
{+De applicatie dient de claims bij elke zaak (`Case`) te registreren.
De gebruiker van de applicatie dient deze claims vervolgens te voorzien van onderbouwing.
+}
PURPOSE RELATION case[Claim*Case] IN ENGLISH
{+The application must register claims in every case.
The user of the application must then provide argumentation for these claims.
+}

PURPOSE RELATION states[Claim*Statement] IN DUTCH
{+De applicatie dient elke claim in de vorm van een bewering (`Statement`) te registreren.
Daarmee kan de gebruiker een onderbouwing construeren in de vorm van een boomstructuur van beweringen.
+}
PURPOSE RELATION states[Claim*Statement] IN ENGLISH
{+The application must register each statement in the form of a statement.
The user can then construct argumentation in the form of a tree-structure of statements.
+}

PURPOSE RELATION object[Claim*LegalThing] IN DUTCH
{+
+}
PURPOSE RELATION object[Claim*LegalThing] IN ENGLISH
{+
+}

PURPOSE RELATION caseType[Case*CaseType] IN DUTCH
{+Omdat gelijksoortige zaken eenzelfde behandeling krijgen, heeft het zin een zaaksoort aan elke zaak te koppelen.
+}
PURPOSE RELATION caseType[Case*CaseType] IN ENGLISH
{+As similar cases receive similar treatment, it makes sense to associate each case with a case type.
+}

PURPOSE RELATION owner[Case*Account] IN DUTCH
{+De applicatie dient één eigenaar van elke zaak (`Case`) te kunnen registreren, om te weten wie zeggenschap heeft over inzage in en veranderingen aan de zaak.
+}
PURPOSE RELATION owner[Case*Account] IN ENGLISH
{+The application must be able to register one owner of each case, in order to know who can authorize access and changes to the case.
+}

PURPOSE RELATION created[Case*Moment] IN DUTCH
{+Om administratieve redenen dient de applicatie het moment te registreren waarop een zaak wordt aangemaakt.
Dit gebeurt automatisch bij creatie van een case record.
+}
PURPOSE RELATION created[Case*Moment] IN ENGLISH
{+For administrative purposes, the application must register the moment a case is created.
This is done automatically upon creation of the case record.
+}

PURPOSE RELATION claims[Case*Text] IN DUTCH
{+Elke claim, die in een zaak wordt gedaan mag als vrije tekst worden ingevoerd.
De gebruiker moet volkomen vrij zijn om elke formulering te kiezen die voor een goede afloop van de zaak nodig geacht wordt.
+}
PURPOSE RELATION claims[Case*Text] IN ENGLISH
{+Every claim made in a particular case may be entered as free text.
The user must feel free to choose any phrasing deemed necessary for that case.
+}

PURPOSE RULE sessionAuthor IN DUTCH -- (I[Statement]#"_SESSION"[SESSION]);ingelogd |- madeBy;V
{+Om het bestaan van een auteur voor elke bewering (`Statement`) te garanderen,
registreert de applicatie de gebruiker van de lopende sessie wordt als degene die de bewering heeft geponeerd.
Dit gebeurt met behulp van een geautomatiseerde regel.
+}
PURPOSE RULE sessionAuthor IN ENGLISH -- (I[Statement]#"_SESSION"[SESSION]);ingelogd |- madeBy;V
{+To secure the existence of an author for every statement,
the application registers the user of the current session as the person who has made this statement.
This is done by means of an automated rule.
+}

PURPOSE RULE addStatement IN DUTCH -- claims~;owner |- phrasing~;madeBy
{+Om een nieuwe `Claim` te maken moet er eerst een bewering (`Statement`) bestaan met de juiste formulering.
Deze formulering komt uit de relatie `claims`, omdat daarin alle claims van de onderhavige zaak zijn geformuleerd.
Om deze bewering automatisch te genereren, neemt het systeem aan dat de eigenaar van de zaak degene is die de bewering heeft geponeerd.
(Mocht iemand anders als steller gelden, dan kan de gebruiker dat op een later moment aanpassen.)
+}
PURPOSE RULE addStatement IN ENGLISH -- claims~;owner |- phrasing~;madeBy
{+To create a new `Claim`, there must be a `Statement` with the correct phrasing.
This phrasing comes from the relation `claims`, in which all claims of the current case have been formulated.
For the purpose of automatic generation, the application assumes that the owner of a case is the person who has made the statement.
(If someone else is to be seen as the maker of that statement, the user can alter this at a later moment.)
+}

PURPOSE RULE addClaim IN DUTCH -- claims;phrasing~ |- case~;states
{+In de relatie `claim` formuleert de gebruiker een bewering (`statement`), om die in de onderhavige zaak als claim te gaan onderbouwen.
Daartoe gebruiken we een geautomatiseerde regel.
Wanneer de gebruiker een nieuwe claim formuleert, maakt de applicatie de bijbehorende `Claim` aan.
De gebruiker hoeft zich dus slechts te bekommeren om een correcte formulering, en niet om het aanmaken van een nieuwe datastructuur.
+}
PURPOSE RULE addClaim IN ENGLISH -- claims;phrasing~ |- case~;states
{+In the relation `claim`, the user phrases a statement, and uses it as claim in the current case.
For this reason we have an automated rule.
Whenever the user phrases a new claim, the application creates a corresponding `Claim`.
The user only formulates a claim, but needs not worry about creating a new data structure.
+}

PURPOSE RULE caseAuthor IN DUTCH -- V[Case*SESSION];"_SESSION";ingelogd |- owner;V
{+Om het bestaan van een auteur voor elke zaak (`Case`) te garanderen,
registreert de applicatie de gebruiker van de lopende sessie als (initiële) zaakeigenaar (`owner`).
Dit gebeurt met behulp van een geautomatiseerde regel.
+}
PURPOSE RULE caseAuthor IN ENGLISH -- (I[Statement]#"_SESSION"[SESSION]);ingelogd |- madeBy;V
{+To secure the existence of an author for every case,
the application registers the user of the current session as the (initial) case owner.
This is done by means of an automated rule.
+}

PURPOSE INTERFACE "Zaken" IN DUTCH
{+De functie `Zaken` geeft een overzicht van de onderhanden zaken,
inclusief de claims die de zaak karakteriseren.
+}
PURPOSE INTERFACE "Zaken" IN ENGLISH
{+The function `Zaken` provides an overview of all cases in progress,
including all claims that characterize each case.
+}

PURPOSE INTERFACE "Redeneerstap" IN DUTCH
{+De functie `Redeneerstap` stelt een gebruiker in staat om een bewering te onderbouwen door redenen te geven voor die bewering.
Elke reden is zelf een bewering, die op zijn beurt weer onderbouwd kan worden met andere redenen.
Iedere reden kan worden gegrond door een juridische referentie op te geven.
+}
PURPOSE INTERFACE "Redeneerstap" IN ENGLISH
{+The function `Redeneerstap` lets a user substantiate a statement by providing reasons for that statement.
Each reason is given in the form of a statement, which can in turn be substantiated with other reasons.
Every reason can be grounded by providing a legal reference.
+}

PURPOSE INTERFACE "Nieuwe Zaak" IN DUTCH
{+De functie `Nieuwe Zaak` stelt een gebruiker in staat een nieuwe zaak te openen.
Ook formuleert de gebruiker een bewering (of een aantal beweringen),
wat de claim van de client weergeeft (of weergeven).
+}
PURPOSE INTERFACE "Nieuwe Zaak" IN ENGLISH
{+The function `Nieuwe Zaak` lets a user create a new case.
The user phrases a statement (or several statements),
representing the claim (or claims) of the client.
+}

ENDCONTEXT