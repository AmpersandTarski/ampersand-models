CONTEXT History IN ENGLISH LATEX
PURPOSE PATTERN "Historic records"
{+Maintaining historic records of specific data is a recurring theme in database design.
The pattern ``Historic records'' defines a notion of variable with history.
A variable can be adapted to a specific situation by means of specialization.
+}

PURPOSE CONCEPT Variable
{+Let us use the word variable to denote something that stores an element of data.
Each historic record is kept in a variable.
The idea is that all changes in the past will be accessible at all times.
+}
CONCEPT Variable "A variable is a device that is meant to contain a data element and its history of changes."

PURPOSE CONCEPT Assignment
{+Let us use the word assignment to denote a change made to a data element.
We assume that the most recent assignment represents the actual value of the variable.
The idea is to store all past assignments in temporal order.
+}
CONCEPT Assignment "An assignment is a change that has occured to a variable."

PURPOSE RELATION trace
{+In order to keep track of history, each variable points to a list of assignments.
Consequently, we apply the usual recursive definition of lists:
A list is either empty, or it has a head (one element) and a tail (a list).
If the list is not empty, its head is the most recent assignment.
We say that the list ``starts with'' that assignment.
The tail is a list that contains the remaining history, i.e. all assignments that are older.
+}

PURPOSE RELATION pred
{+In order to keep track of history, the temporal order in which assignments have taken place must be registered.
If assignment $a$ is more recent than assignment $a'$, we say that $a$ succedes $a'$ or (equivalently) $a'$ precedes $a$.
So we need a relation, $\id{pred}$, that represents a temporal order between assignments.
The successor relation needs no separate representation, because it is equal to $\flip{\id{pred}}$.
+}

PURPOSE RULE "head of trace"
{+If the head of a trace is the most recent assignment, there cannot be any assignments that are more recent.
Without a predecessor, the assignment represents the oldest value ever assigned to a variable.
If an assignment has no successor, it represents the last (most recent) value assigned to a variable.
We need a rule to state that each variable refers to the most recent assignment of a trace.
+}

PURPOSE RULE "attached assignments"
{+In order to detect any ``dangling'' assignments,
we require that assignments without a successor must be attached to a variable.
+}

{-PURPOSE RULE "transitive pred"
{+In order to ensure that each trace is actually a list,
we require that relation $\kleenestar{\id{pred}}$ is transitive.
+} -}

PATTERN "Historic records"
--TODO: making the function trace TOT exposes bugs in the prototype. Please test this after Michiel has finished the transactions in the new frontend.
RELATION trace[Variable*Assignment] [UNI,INJ] -- For the purpose of initializing a variable, `trace` may not be total.
MEANING "A variable may be related to an assignment, referring to the most recent value of that variable."
RELATION pred[Assignment*Assignment] [UNI,INJ]
MEANING "An assignment may be related to another assignment, referring to its immediate predecessor."

RULE "head of trace" : -(trace;pred~)
MEANING "The trace of each variable starts with an assignment that has no successors."

RULE "attached assignments" : V[ONE*Assignment];pred \/ V[ONE*Variable];trace
MEANING "Every assignment either has a successor (which is an assignment) or it represents the current value of a variable."

--RULE "transitive pred" : pred*;pred |- pred*
--MEANING "The predecessor relation corresponds to its transitive closure."
ENDPATTERN

PURPOSE PROCESS "Demo History"
{+This pattern is an example of the way in which pattern ``Historic records'' can be used.
It demonstrates specialization of variables with a (scalar) value.
Of course, that can be generalized further to larger structures.
This pattern also defines relations that are needed to let users work with variables (in an interface).
These relations depend on the context of use as well.
+}

PURPOSE CONCEPT Name
{+Let us use a concept called $\id{Name}$ as a representation of the way in which the name of a variable is represented in the actual system.
+}
CONCEPT Name "A name is used to identify a particular variable."

PURPOSE CONCEPT Value
{+Let us use a concept called $\id{Value}$ to represent the type of values that are assigned to variables in the actual system.
+}
CONCEPT Value "A value represents the contents of a variable."

PURPOSE RELATION name
{+In order to refer to a variable, it gets a name.
In different situations, other means of identifying a variable are conceivable.
For this demo, the name is merely used to display to a user.
This makes unique identification of variables unnecessary for this demo.
+}

PURPOSE RELATION value
{+Each assignment allocates a value to a variable.
In order to record all previous values, each value is registered along with the assignment.
The list of assignments thus registers the trace of values in the history of the variable.
+}

PURPOSE RELATION varvalue
{+The idea of a variable is that it has a value.
That value is registered in the system in order to build an interface where a change of value can be noticed by the engine.
This yields a demo in which we can simply edit the value and the history is maintained automatically.
+}

PURPOSE RELATION var
{+In order to quickly select all assignments that are related to a variable,
we register the variable of each assignment.
+}

PURPOSE RULE precedence
{+If the system registers the variable to which each assignment belongs,
we need a rule to say that two assignments refer to the same variable if they are related by precedence.
+}

PURPOSE RULE CreateTrace
{+In order to perform the administration of history, we need a rule to initialize a new variable.
Initialization means to create a trace, make a new assignment, add the value to that assignment and restore invariants as required.
+}

PURPOSE RULE UpdateTrace
{+Also, a rule is needed to react on editing a variable.
This is very similar (but not identical) to initializing a variable, because in both cases a new assignment is made.
+}

PROCESS "Demo History"
VIEW Variable : Variable(name, TXT " (value = '", trace;value, TXT "')")

RELATION name[Variable*Name] [UNI,TOT]
MEANING "Every variable has a name."
RELATION varvalue[Variable*Value] [UNI,TOT]
MEANING "Every variable has a current value."
RELATION value[Assignment*Value] [UNI,TOT]
MEANING "Every assignment has a value."
RELATION var[Assignment*Variable] [UNI,TOT]
MEANING "Every assignment belongs to precisely one variable."

RULE precedence : var~;pred;var |- I
MEANING "If one assignment precedes another, they affect the same variable."

ROLE ExecEngine MAINTAINS CreateTrace
RULE CreateTrace: (I /\ -(trace;trace~));varvalue |- trace;value
MEANING "Every variable must have a trace."
VIOLATION (TXT "{EX} NewStruct;Assignment" -- Create new atom of type Assignment
                ,TXT ";trace;Variable;", SRC I, TXT ";Assignment;NULL" -- Initialize relation 'trace' for this atom
                ,TXT ";var;Assignment;NULL;Variable;", SRC I           -- Initialize relation 'var' for this atom
                ,TXT ";value;Assignment;NULL;Value;", TGT I            -- Init relation 'value' for this atom
          )

ROLE ExecEngine MAINTAINS UpdateTrace
RULE UpdateTrace: (I /\ trace;trace~);varvalue |- trace;value
MEANING "The predecessor of a changed variable is its previous trace."
VIOLATION (TXT "{EX} NewStruct;Assignment" -- Create new atom of type Assignment
                ,TXT ";pred;Assignment;NULL;Assignment;", SRC trace
                ,TXT ";trace;Variable;", SRC I, TXT ";Assignment;NULL" -- Initialize relation 'trace' for this atom
                ,TXT ";var;Assignment;NULL;Variable;", SRC I           -- Initialize relation 'var' for this atom
                ,TXT ";value;Assignment;NULL;Value;", TGT I            -- Init relation 'value' for this atom
          )

ENDPROCESS

{-
POPULATION name[Variable*Name] CONTAINS
  [("r1","Zwitserleven")]
POPULATION trace[Variable*Assignment] CONTAINS
  [("r1","t1")]
POPULATION current[Context*Variable] CONTAINS
  [("C","r1")]
POPULATION value[Assignment*Value] CONTAINS
  [("t1","4")]
POPULATION var[Assignment*Variable] CONTAINS
  [("t1","r1")]
-}

INTERFACE overview FOR user : I[ONE]
BOX [ Variables : V[ONE*Variable]
    , History : V[ONE*Variable];var~
      BOX [ assignment : I
          , variable : var;name
          , value : value
          , pred : pred
          , status : (I /\ trace~;trace);V;'Current value'[TEXT] \/ (I /\ -(trace~;trace));V;'Archived value'[TEXT] 
          ]
    ]

INTERFACE Variable (name, varvalue) FOR user : I[Variable]
BOX [ name : name
    , varvalue: varvalue
    ]

ENDCONTEXT