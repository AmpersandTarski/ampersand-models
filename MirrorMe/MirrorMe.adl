CONTEXT MirrorMe IN ENGLISH MARKDOWN -- This version has been compiled with Ampersand v3.5.0[branch_#228:44da3d6], build time: 08-Apr-16 08:36:09 West-Europa (zomertijd)

 --! Note: this file needs the PHP-function `ParseTermText` to be included as an ExecEngine extension !--

INCLUDE "MirrorMe_TTextMod.adl"

--INCLUDE "MirrorMe.xlsx" -- NOTE: if you include Excel files, create the prototype with the `--dev` option so that any work (e.g. the creation of Assignments) will be done at installation time

    CLASSIFY Case ISA Scope
    CLASSIFY Binding ISA TText
    CLASSIFY Template ISA TText
-- ttTopLevel = claimProperty --RJ: `ttToplevel` bestaat niet meer in TTexts

    RELATION class[TText*Concept] [UNI] -- The type/class of the value of the TText
    RELATION legalGround[TText*LegalGround] -- The (legal) reason for wanting the TText
    RELATION evidence[TText*Evidence] -- Evidence to underpin the validity of the TTValue


PATTERN Wetsartikelen
VIEW RechtsGrond : RechtsGrond DEFAULT {url:url, regelingTitel:regeling;titel, artikel:artikel, lid:lid} HTML TEMPLATE "Rechtsgrondlink.html" ENDVIEW
RELATION url[RechtsGrond*URL]
RELATION regeling[RechtsGrond*Regeling] [UNI]
RELATION bijlage[RechtsGrond*Bijlage] [UNI]
RELATION aanwijzing[RechtsGrond*Aanwijzing] [UNI]
RELATION artikel[RechtsGrond*Artikel]
RELATION lid[RechtsGrond*Lid]
RELATION sub[RechtsGrond*Sub]
--VIEW Regeling : Regeling DEFAULT {url:url, regelingTitel:titel} HTML TEMPLATE "Regelinglink.html" ENDVIEW
RELATION bwb[Regeling*BasisWettenBestand] [UNI]
RELATION titel[Regeling*Titel] [UNI,TOT]
RELATION artikelen[Regeling*Aantal] [UNI]
REPRESENT Aantal TYPE INTEGER
RELATION url[Regeling*URL]
RELATION gedelegeerdUit[Regeling*Regeling] [UNI]
RELATION regelgeving[Domein*Regeling]
RELATION soort[Regeling*Regelingsoort] [UNI]
RELATION onderwerp[Regeling*Concept]
RELATION procesflow [Regeling*Procesflow] [UNI]
RELATION afkorting[Regeling*Tekst] [UNI]
ENDPATTERN

INTERFACE Rechtsgrond FOR TO: I[RechtsGrond] BOX
    [ regeling   : regeling
    , artikel    : artikel
    , lid        : lid
    , sub        : sub
    , url        : url
    , bijlage    : bijlage
    , aanwijzing : aanwijzing
    ]

PATTERN Arguments
    PURPOSE CONCEPT TText
    {+If people make claims, they do observations, and they will reason about them.
    In order to decide whether a claim is true, statements are organised in a structure that represents the argument.
    The concept "statement" is used to represent claims, observations, and all other utterances that can be considered true or false.
    Statements and Claims are modeled/implemented as TTexts. 
    +}
--RJ: Suggestie: CLASSIFY Actor ISA Account -- omdat Actors ook users zijn.
    PURPOSE RELATION claimant[TText*Actor] REF "http://www.thefreedictionary.com/claimant"
    {+ Let us treat a statement made by an individual as a claim of that individual that the statement is true.
    For this reason, each individual who makes the claim can be registered in the relation "claimant".
    The `claimant` 'claims' (a) the validity of the `ttTemplate` and (b) the veracity of `ttValue`.
    Thus, the `claimaint` is solely authorized to change `ttValue` and `ttTemplate`.
    +}
    RELATION claimant[TText*Actor]
    MEANING "A claimant is the party that makes a claim, especially one that is legally cognizable."

    RELATION object[Claim*LegalThing] [UNI] -- het onderwerp van de onenigheid.

--RJ: de relatie `scopeOwner[Scope*Account]` kun je hier mogelijk (ook) gebruiken. Deze relatie wordt gepopuleerd op het moment dat de Scope wordt aangemaakt.
    RELATION owner[Scope*Actor] [UNI] -- the Actor that is the claimant of all toplevel TTexts.
    MEANING IN ENGLISH "the Actor that is the claimant of all toplevel TTexts."
    RELATION created[Scope*Moment] [UNI]
    MEANING IN DUTCH "De applicatie kan een moment registeren als het moment waarop de zaak is aangemaakt."
    MEANING IN ENGLISH "The application can register a moment as the time a case has been created."
    RELATION requires[TText*TText]
    MEANING IN ENGLISH "A statement that needs another statement to be true, is registered in the relation `requires`."


{-The following code depends on a login mechanism. Revive when it is active
    RULE sessionAuthor : (I[TText]#'_SESSION'[SESSION]);ingelogd |- madeBy;V
    MEANING "Every statement must must be stated by someone. If not, the application will assign the user of the current session as the person who made the statement."
    VIOLATION ( TXT "{EX} InsPair;madeBy;TText;", SRC I, TXT ";Actor;" , TGT I
              , TXT "{EX} InsPair;observed;TText;", SRC I, TXT ";Moment;{php}date(DATE_ISO8601)" -- Current date in ISO 8601 date format
              )
    ROLE ExecEngine MAINTAINS sessionAuthor

    RULE caseAuthor : V[Scope*SESSION];'_SESSION';ingelogd |- owner;V
    MEANING "Every case must have an owner. If not, the application will assign the user of the current session as the initial owner."
    VIOLATION ( TXT "{EX} InsPair;owner;Scope;", SRC I, TXT ";Actor;" , TGT I
              , TXT "{EX} InsPair;created;Scope;", SRC I, TXT ";Moment;{php}date(DATE_ISO8601)" -- Current date in ISO 8601 date format
              )
    ROLE ExecEngine MAINTAINS caseAuthor
-}
ENDPATTERN

PURPOSE PATTERN Validity
    {+In order to talk about true and false statements in a precise way, we need the idea of contexts.
    +}
    PATTERN Validity
    PURPOSE RELATION true[TText*Scope] -- The truth of the TText value (as decided by its claimant) is accepted by the owner of the Scope
    {+Consider the statement "John has blond hair". If this statement is known to be true in some context `c`,
    the tuple ("John has blond hair", c) can exist in the relation `true`.
    However, if this tuple is not in the relation `true`, it does not follow that John does not have blond hair.
    The truth of the TText value (as decided by its claimant) is accepted by the owner of the Scope
    +}
    RELATION true[TText*Scope] [UNI]
    MEANING "A statement that is considered true within a context is registered in the relation `true`."

    PURPOSE RELATION false[TText*Scope] -- The truth of the TText value (as decided by its claimant) is rejected by the owner of the Scope
    {+The relation `false` is dual to `true`.
    +}
    RELATION false[TText*Scope] [UNI]
    MEANING "A statement that is considered false within a context is registered in the relation `false`."

    RELATION valid[TText*Scope] [UNI] -- The validity (not: veracity) the TText value (as decided by its claimant) is accepted by the owner of the Scope
    MEANING "Statements that are valid within a case are registered in the relation `valid`."
    PURPOSE RULE TrueFalseValid
    {+It makes no sense to consider a statement true or false, if it is not valid.
    Therefore, validity is considered a necessary condition for truth or falsehood.
    +}
    RULE TrueFalseValid : true \/ false |- valid
    MEANING "A statement can be true or false in a context only if it is valid within that context."

    REPRESENT Moment TYPE DATETIME
    PURPOSE RELATION observed[TText*Moment]
    {+For reconstructing events, it can be necessary to administer the moment an observation or a claim is made.
    For this reason, we use the relation "observed".
    +}
    RELATION observed[TText*Moment] [UNI]
    MEANING IN DUTCH "De applicatie kan een moment registeren als tijdstip waarop een bewering is gedaan."
    MEANING IN ENGLISH "The application can register a moment as the time a statement has been made."

ENDPATTERN

PURPOSE PATTERN "Case Management"
    {+This pattern contains some basic administration for cases.
    +}
    PATTERN "Case Management"
    RULE caseAuthor : V[Case*SESSION];'_SESSION';sessionAccount |- owner;V
--  MEANING "The default/initial owner of a case is the actor that created it."
    VIOLATION ( TXT "{EX} InsPair;owner;Case;", SRC I, TXT ";Actor;" , TGT I
              , TXT "{EX} InsPair;created;Case;", SRC I, TXT ";Moment;{php}date(DATE_ISO8601)" -- Current date in ISO 8601 date format
              )
    ROLE ExecEngine MAINTAINS caseAuthor

ENDPATTERN


--[INTERFACE]--

INTERFACE "Cases": V[SESSION*Case] CRuD COLS -- BOX <SHCOLS>
   [ id : I cRud
   , "case number" : scopeID cRUd
   , "owner" : scopeOwner cRUd
   , created : created cRud
   ]

VIEW Template : Template(ttTemplate)
VIEW Case : Case(scopeID)

INTERFACE "Case": I[Case] cRud BOX <ROWSNL>
   [ "Templates" : ttScope~;I[Template] CRuD COLS
      [ "statement" : ttTemplate cRUD
      , "instance" : ttInstance cRud
      , "ground" : legalGround cRUd
      ]
   , "Bindings": ttScope~;I[Binding] cRuD COLS
      [ placeholder : ttName cRUd
      , value : ttValue cRUd
      , warrant : ttInstance cRUd
      , "ground" : legalGround cRUd
      , "requires" : requires cRUd
      ]
   ]

INTERFACE "Garbage": I[SESSION] cRud COLS -- BOX <SHCOLS>
   [ "empty scopes" : V[SESSION*Scope];(I-ttScope~;ttScope) cRuD
   , "unused statements" : V[SESSION*TText];((I-ttTemplate;ttTemplate~)-ttInstance;ttInstance~) cRuD
   , "unused Legal Grounds" : V[SESSION*LegalGround];(I-legalGround~;legalGround) cRuD
   , "unused evidence" : V[SESSION*Evidence];(I-evidence~;evidence) cRuD
   , "unused Time points" : V[SESSION*Moment];((I-observed~;observed)-created~;created) cRuD
   ]

ROLE ExecEngine MAINTAINS "Every TText with scope and name can be used as a binding"
RULE "Every TText with scope and name can be used as a binding": 
   I[TText] /\ ttScope;ttScope~ /\ ttName;ttName~ |- I[Binding]
VIOLATION (TXT "{EX} SetConcept;TText;Binding;", SRC I[TText])


-----------------------------------------------------------
ENDCONTEXT