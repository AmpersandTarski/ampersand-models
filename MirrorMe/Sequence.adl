CONTEXT Sequence IN ENGLISH MARKDOWN

PURPOSE CONTEXT Sequence
{+Maintaining sequences is a recurring theme in computer science.
For backgrounds, we refer to section 7.2 of Gordon J. Pace, "Mathematics of Discrete structures for Cmputer Science", Springer, 2012, ISBN 9783642298394.
The pattern "Sequences" defines the basics for modeling a sequence of items.
The pattern "Demo of Sequences" is included to demonstrate sequences out-of-the-box.
A demonstrator is also meant to adapt sequences to specific situations by means of specialization.
+}

PURPOSE PATTERN Sequences
{+This pattern defines constraints that a concept must satisfy in order to be called sequence.
This pattern lines up with the computer science notion of sequences.
A 'graphical' view of such sequences is presented in the below figure:

-------------------------------------------------------------
|    Item 0    |    Item 1    |    Item 2    |    Item 3    |
-------------------------------------------------------------
 head^      ‼-succ-^       ‼-succ-^       ‼-succ-^

In words: 
- Item 0 is the head of the sequence. 
- Item k+1 is the successor of item k, as long as both items exist.
- Item k is the predecessor of item k+1, as long as both items exist.
- (therefore:) the head of the sequence has no predecessor.

Note that in computer science:
- Items are numbered starting at the head, which is item 0 (per definition)
- The tail of a sequence is the (possibly empty) sequence without its head: if a sequence has items 0..n, then the tail would be the sequence consisting of items 1..n.

The pattern as described here allows items to be an element of only one sequence. 
The reason for imposing this constraint is that it makes the modelling easier,
in particular of the 'successor'-relation: if an item were allowed to be part of
multiple sequences, it could also have multiple successors, depending on the 
sequences it is an element of.
+}

CONCEPT Sequence "A sequence is a device that stores items in a total order."

CONCEPT Item "An item is an element of a sequence."

PURPOSE RELATION head
{+A sequence is related to its content by means of a partial function called `head`.
If the head of a sequence is undefined, we say that the sequence is empty.
Since `head` is a partial function, it is univalent.
For this reason we can talk about "the head" of a (non-empty) sequence,
in contrast with "a head" of a sequence.
+}

PURPOSE RELATION succ
{+The total order of items is represented by a relation called `succ` (successor).
The predecessor relation needs no separate representation, because it is equal to `succ~`.
The wording of succ(i,j) is: the successor of `i` is `j` (or: `j` is the successor of `i`).
+}

PURPOSE RULE "no predecessor of head"
{+We need a rule to state that the head of each sequence refers to the first item.
That is the item in the sequence that has no successor.
Using a smart choice of words, the definition applies to empty as well as nonempty sequences.
+}

PURPOSE RULE "sequence heads"
{+We need a rule to state that every non-empty sequence has a head (i.e.: a first item).
+}

PATTERN "Sequences"
-- RJ: `head` does not need to be INJ, as this is already implied by UNI(seq).
RELATION head[Sequence*Item] [UNI] -- For the purpose of initializing a sequence, `head` may not be total.
MEANING "One of the items that are the ends of a sequence is called the head of that sequence."
RELATION succ[Item*Item] [UNI,INJ,IRF]
MEANING "An item may be related to another item, referring to its immediate successor."
RELATION seq[Item*Sequence] [UNI] -- The deletion rules discard items that are not in a sequence.
MEANING "Every item exists in one sequence." -- see comments in `PURPOSE PATTERN Sequences`

RULE "no predecessor of head" : -(head;succ~)
MEANING "A predecessor of the head of a sequence does not exist."

RULE "sequence heads": seq |- seq;head;head~
MEANING "Every non-empty sequence has a head"

-- The following should hold, but is unnecessary to adopt in the documentation.
-- RULE "total order" : head;succStar = seq~
--
-- RULE "transitive succ" : succStar;succ |- succStar
-- MEANING "The successor relation corresponds to its transitive closure."

ENDPATTERN

PURPOSE PROCESS "Demo of Sequences"
{+For demonstration purposes, we introduce a relation `seqHead` by which users can create new items in a sequence.
We also need to give sequences a name, which is nice when a user creates a sequence.
Every item must have an identifier.
For use in practice, the user may change this demo for his or her own purposes.
+}

PURPOSE CONCEPT Name
{+Let us use a concept called `Name` as a representation of the way in which the name of a sequence is represented in the actual system.
+}
CONCEPT Name "A name is used to identify a particular sequence."

PURPOSE CONCEPT Identifier
{+Let us use a concept called `Identifier` to identify the elements in the sequence.
+}
CONCEPT Identifier "An identifier represents the contents of a sequence."

PROCESS "Demo of Sequences"
VIEW Sequence : Sequence(name)

RELATION madeIn[Sequence*SESSION] [UNI]
RELATION insSeq[SESSION*Name] [UNI]
PURPOSE RULE InsSeq
{+Whenever a `Name` is entered in `insSeq`, the system should create a new `Sequence`.
This is achieved by an invariant, which states that for every session/name-pair in `insSeq`, there must be a `Sequence`.
The Exec-Engine then picks it up and creates the `Sequence`.
After a new sequence is made, the system clears the name from the insert-box on the screen.
This adds to the illusion that the system is ready for new input, as the previous identifier has been moved to the sequence.
+}
RULE InsSeq: insSeq |- madeIn~;name
MEANING "Providing a name in insSeq creates a new sequence with that name."
VIOLATION (TXT "{EX} NewStruct;Sequence"
             , TXT ";name;Sequence;_NEW;Name;", TGT I
             , TXT ";madeIn;Sequence;_NEW;SESSION;", SRC I
          ,TXT "{EX} DelPair;insSeq;SESSION;", SRC I, TXT ";Name;", TGT I -- clean up immediately
          )
ROLE ExecEngine MAINTAINS InsSeq

REPRESENT Name TYPE ALPHANUMERIC
RELATION name[Sequence*Name] [UNI]
MEANING "Every sequence has a name."
RELATION seqHead[Sequence*Identifier] [UNI]
MEANING "Every sequence has a current identifier."
REPRESENT Identifier TYPE ALPHANUMERIC
RELATION identifier[Item*Identifier] [UNI]
MEANING "Every item has an identifier."

PURPOSE RULE InsItem
{+Whenever an `Identifier` is entered in `seqHead`, the system should create a new `Item`.
This is achieved by an invariant, which states that for every sequence/identifier-pair in `seqHead`, there must be an `Item`.
The Exec-Engine then picks it up and creates the `Item`.
After a new item is inserted, the system clears the identifier from the insert-box on the screen.
This adds to the illusion that the system is ready for new input, as the previous identifier has been moved to the sequence.
+}
RULE InsItem: seqHead |- head;identifier
MEANING "Pushing an item into an empty sequence creates pair in head."
VIOLATION ( TXT "{EX} NewStruct;Item"
          , TXT ";succ;Item;_NEW;Item;", SRC head
          , TXT ";seq;Item;_NEW;Sequence;", SRC I
          , TXT ";head;Sequence;", SRC I, TXT ";Item;_NEW"
          , TXT ";identifier;Item;_NEW;Identifier;", TGT I
          , TXT "{EX} DelPair;seqHead;Sequence;", SRC I, TXT ";Identifier;", TGT I
          ) -- Initialize relation 'head' for this atom
ROLE ExecEngine MAINTAINS InsItem

    RULE delVar : (I/\succ;succ~);succ~;seq |- seq
    VIOLATION ( TXT "{EX} InsPair;succ;Item;", SRC succ~, TXT ";Item;", SRC succ
--            , TXT "{EX} DelPair;succ;Item;", SRC succ~, TXT ";Item;", SRC I[Item]    -- superfluous, because succ is univalent.
--            , TXT "{EX} DelPair;succ;Item;", SRC succ~, TXT ";Item;", SRC I[Item]    -- superfluous, because of "{EX} DelAtom;Item;", SRC I.
              , TXT "{EX} DelAtom;Item;", SRC I[Item]
              )
    ROLE ExecEngine MAINTAINS delVar

    RULE delVarLast : (I - succ;succ~);succ~;seq |- seq
    VIOLATION ( TXT "{EX} DelPair;succ;Item;", SRC succ~, TXT ";Item;", SRC I[Item]    -- superfluous, because succ is univalent.
              , TXT "{EX} DelAtom;Item;", SRC I[Item]
              )
    ROLE ExecEngine MAINTAINS delVarLast

    RULE delVarHead : (I - succ~;succ);head~ |- seq
    VIOLATION ( TXT "{EX} InsPair;head;Sequence;", TGT I[Sequence], TXT ";Item;", SRC succ
--            , TXT "{EX} DelPair;head;Sequence;", TGT I, TXT ";Item;", SRC I    -- superfluous, because head is univalent.
--            , TXT "{EX} DelPair;succ;Item;", SRC I, TXT ";Item;", SRC succ     -- superfluous, because of "{EX} DelAtom;Item;", SRC I.
              , TXT "{EX} DelAtom;Item;", SRC I[Item]
              )
    ROLE ExecEngine MAINTAINS delVarHead

    RULE delValue : I[Identifier] |- identifier~;I[Item];identifier
    VIOLATION ( TXT "{EX} DelAtom;Identifier;", SRC I[Identifier] )
    ROLE ExecEngine MAINTAINS delValue

ENDPROCESS

PURPOSE INTERFACE overview
{+This interface is meant for testing the functioning of sequences.
This overview depicts all sequences together with all pointers that connect items.+}
INTERFACE overview(name[Sequence*Name], insSeq, seq, seqHead, madeIn) : '_SESSION'
ROWS[ "Name your new sequence here:" : insSeq
    , Sequences : V[SESSION*Sequence]
      COLS[ sequence : name
          , "Name your items here:" : seqHead
          , items : seq~
            COLS[ identifier : identifier
                , seq    : seq
                , succ   : succ
                , pred   : succ~
                , stat   : (I /\ head~;head);V;'head'[TEXT] \/ (I - succ;succ~);V;'last'[TEXT] 
                , status : (I -  succ~;succ);V;'head'[TEXT] \/ (I - succ;succ~);V;'last'[TEXT] 
                ]
          ]
    ]

{- If the need arises, it can be useful to compute closures of succ
PROCESS "Compute Closures of succ"
    RELATION succStar[Item*Item] -- Transitive, reflexive closure of succ, aka succ*
    MEANING "`succStar` is the reflexive, transitive closure of `succ`."
    RELATION succPlus[Item*Item] -- Transitive closure of succ, aka succ+
--    MEANING "`succPlus` is the transitive closure of `succ`."

    RELATION succCopy[Item*Item] -- necessary only for calling the Transitive closure function.
    ROLE ExecEngine MAINTAINS "Compute transitive closure of succ"
    RULE "Compute transitive closure of succ" : succ = succCopy
    VIOLATION (TXT "{EX} TransitiveClosure;succ;Item;succCopy;succPlus")

    ROLE ExecEngine MAINTAINS "Compute transitive closure of succ by Ins", "Compute transitive closure of succ by Del"
    RULE "Compute transitive closure of succ by Ins" : succPlus\/I |- succStar
    VIOLATION (TXT "{EX} InsPair;succStar;Item;", SRC I, TXT ";Item;", TGT I)
    RULE "Compute transitive closure of succ by Del" : succStar |- succPlus\/I
    VIOLATION (TXT "{EX} DelPair;succStar;Item;", SRC I, TXT ";Item;", TGT I)
ENDPROCESS
-}
ENDCONTEXT