CONTEXT Temporal LATEX
    PURPOSE CONTEXT Temporal
    {+Many databases register only the current state of objects.
    When the state changes, the data in the database must be changed accordingly.
    To store the history of objects is .
    However, the moment a change is registered tends do differ from the moment a change has occured in real life.
    An accurate registration takes that into account.
    A temporal database helps to reconstruct the history of an object accurately.
    +}

    PURPOSE PATTERN "Events and Histories"
    {+Let us proceed to define the notions ``event'' and ``history''.
	We need events to describe things that happen\footnote{Cambridge Dictionary meaning of ``event'': anything that happens} in a DIS.
	We need histories to describe past events\footnote{Cambridge Dictionary meaning of ``history'': a record of past events considered together, especially events of a particular period, country, or subject}.
    Let $\mathbb E$ be the set of all events.
	Let $\mathbb H$ be the set of all histories.
	We have formulated the following requirements:
    +}
    PATTERN "Events and Histories" 
        PURPOSE RELATION elem[Event*History]
        {+To represent the fact that an event {\em belongs to} a history or
		(equivalently) that a history {\em contains} certain events,
		let $e\ \id{elem}\ h$ represent the statement that event $e$ belongs to history $h$.
        +}
        RELATION elem[Event*History] PRAGMA "Event " " belongs to History "
        MEANING "$e elem h$ means that Event $e$ belongs to History $h$."

        PURPOSE RULE EqHistories
        {+To reuse the conventional order theory for histories,
		we have deliberately defined equivalence of histories to resemble the equivalence of sets.
        +}
        RULE EqHistories : I[History] = elem~ <> elem
        MEANING "Histories that contain the same events are considered equal."

        PURPOSE RELATION before[History*History]
        {+To express that history $h_1$ comes {\em before} history $h_2$ we define relation before.
        It is represented by symbol $\preceq$.
        +}
        RELATION before[History*History]
        MEANING "$a \preceq b$ ($a\ \id{before}\ b$) means that Event $a$ comes before (precedes) Event $b$."

        PURPOSE RULE "Order of histories"
        {+We want the order of histories to represent temporal order.
		For that reason we require a partial order, i.e. the order must be reflexive, transitive, and antisymmetric.
		Since sets have a partial order (the subset relation),
		the proofs of these properties are well known.
        +}
        RULE "Order of histories" : before = elem\elem
        MEANING "History $h_1$ precedes $h_2$ if $h_2$ contains all events that belong to $h_1$."

        PURPOSE RELATION pres[Event*History]
        {+Let every event $e$ have a history $\id{pres}(e)$ (called "present")
		that represents the history just after the event has occured.
        +}
        RELATION pres[Event*History] [UNI,TOT]

        RULE Present : I[Event] = elem;pres~
        MEANING "Every event belongs to its own present."

        PURPOSE RELATION past[Event*History]
        {+Let every event $e$ have a history $\id{past}(e)$ (called "past")
		that represents the history just before the event occured.
        +}
        RELATION past[Event*History] [UNI,TOT]

        RULE Past : I[Event] |- past;before;pres~
        MEANING "The past of an event $e$ comes before its present."

        RULE "Equality of Events" : I[Event] = past;past~ /\ pres;pres~
        MEANING "Events with equal past and present are considered equal."
    ENDPATTERN

    PURPOSE PATTERN "Processes"
    {+	We need the notion of process\footnote{Cambridge Dictionary meaning of ``process'': a series of actions that you take in order to achieve a result} to describe how components of a DIS interact.
	Let $\mathbb P$ be the set of all processes.
	We have formulated the following requirements:
    +}
    PATTERN "Processes"
        PURPOSE RELATION elem[Event*Process]
        {+To represent the fact that an event {\em belongs to} a process or
		(equivalently) that a process {\em contains} certain events,
		let $e\ \id{elem}\ p$ represent the statement that event $e$ belongs to process $p$.
        +}
        RELATION elem[Event*Process] PRAGMA "Event " " belongs to Process "
        MEANING "$e elem p$ means that Event $e$ belongs to Process $p$."

        RELATION partOf[Process*History] PRAGMA "Process " " is part of History "
        MEANING "$p\ \id{partOf}\ h$ means that Process $p$ is part of History $h$."
        PURPOSE RULE sharedHistory LATEX
        {+To abstract away from location, we make no assumptions with respect to the place where a process lives.
		However, to partake in a distributed system, processes must be able to share history.
		For that purpose we define what it means to be part of a history.+}
        RULE sharedHistory : partOf[Process*History] = elem\elem
        MEANING "The statement $p_1\ \id{partOf}\ h_2$ means that every event that belongs to process $h_1$ is an event that belongs to process $h_2$."

        RELATION partof[Process*Process] PRAGMA "Process " " is part of Process "
        MEANING "$p_1\preceq p_2$ (pronounce ``part of'') means that Process $p_1$ is part of Process $p_2$."

        RULE distributed : partof[Process*Process] = partOf;partOf~ /\ elem\elem
        MEANING "The statement $p_1\ \id{partof}\ p_2$ means that the two processes share some history and that all events that belong to process $p_1$ belong to process $h_2$ as well."

        PURPOSE RULE totalP
        {+We require a process to have predictable behaviour, for which we need the process to contain a series (sequence) of events.
		So we require that $(\{e|e\ \id{elem}\ p\}, \preceq)$ is a total order.+}
        RULE totalP : elem;I[Process];elem~ |- partof \/ partof~
        MEANING "Any two events in a process are ordered by the relation $\preceq$ "
    ENDPATTERN

    PURPOSE PATTERN States
    {+ We need the notion of state\footnote{Cambridge Dictionary meaning of ``state'': a condition or way of being that exists at a particular time} to describe how a DIS stores things that change over time.
	Let $\mathbb S$ be the set of all states.
	We have formulated the following requirements:
    +}
    PATTERN States
        PURPOSE RELATION state[History*State]
        {+Let $\id{state}(h)$ represent the state at a specific moment in time. That moment is represented by history $h$.
        +}
        RELATION state[History*State] [UNI,TOT]

		PURPOSE CONCEPT Oplus
        {+To deal with state changes, we must express the fact that
		a state has changed from $\id{state}(\id{past}(e))$ to $\id{state}(\id{pres}(e))$ for some event $e$.
		To describe that change we require an operator $\oplus$ to determine the successive state $s_2$ from a given state $s_1$ and a given $\Delta$.
        +}
        RELATION l[Oplus*State] [UNI,TOT]
        RELATION r[Oplus*State] [UNI,TOT]
        RELATION result[Oplus*State] [UNI,TOT]

        PURPOSE RULE Oplus LATEX
        {+The rule Oplus is meant to compute the present state from the past state and the delta. +}
        RULE Oplus : I[Oplus];l;state;past /\ r;delta = result;state;pres

		PURPOSE CONCEPT Ominus
        {+A change can be used to compute a previous state.
		For this purpose we require a concept to represent operator $\ominus$.+}
        RELATION l[Ominus*State] [UNI,TOT]
        RELATION r[Ominus*State] [UNI,TOT]
        RELATION result[Ominus*State] [UNI,TOT]

        PURPOSE RULE Ominus LATEX
        {+The rule Ominus is meant to compute the past state from the present state and the delta. +}
        RULE Ominus : I[Ominus];l;state;past = result;state;pres /\ r;delta

    ENDPATTERN

    PURPOSE PATTERN "New event"
    {+A history evolves by adding new events to it.
    This pattern describes how the administration of histories is kept consistent.
    +}
    PATTERN "New event"
        PURPOSE RELATION occ[Event*History]
        {+This relation is intended for adding new events to a history. 
        +}
        RELATION occ[Event*History]

        PURPOSE RULE IncrHistory LATEX
        {+The verb {\em occur} means adding an event to a history ($h\odot e$).
        +}
        RULE IncrHistory : occ |-pres;before~ /\ past
        MEANING "A new pair in relation occ causes corresponding new pairs in relations before, past, and pres."
        VIOLATION (TXT "{EX} NewStruct;History"
                  ,TXT ";pres;Event;", SRC I, TXT ";History;_NEW"
                  ,TXT ";before;History;", TGT I, TXT ";History;_NEW"
                  ,TXT ";past;Event;", SRC I, TXT ";History", TGT I
                  )
    ENDPATTERN
   
    PURPOSE PATTERN "Merge Histories" LATEX
    {+Merging two histories is used to synchronize two processes.
    This pattern describes an implementation of this merge.
    The idea is to add a new history, $h_1\sqcup h_2$, as an upper bound to $h_1$ and $h_2$.
    +}
    PATTERN "Merge Histories"
        PURPOSE RELATION mrg[History*History]
        {+The relation ``merge'' is intended for adding new merge events to a history. 
        +}
        RELATION mrg[History*History]

        PURPOSE RULE Merge LATEX
        {+The verb {\em merge} means adding a history ($h_1\sqcup h_2$) to two existing histories ($h_1$ and $h_2$).
        +}
        RULE Merge : mrg |-before;before~
        MEANING "To insert $h_1$ and $h_2$ into relation mrg causes a new history that is preceded by both $h_1$ and $h_2$."
        VIOLATION (TXT "{EX} NewStruct;History"
                  ,TXT ";before;History;", SRC I, TXT ";History;_NEW"
                  ,TXT ";before;History;", TGT I, TXT ";History;_NEW"
                  )
        PURPOSE RULE Merge LATEX
        {+Inserting events is necessary for two histories that precede each other ($h_1\ \text{before}\ h_2$).
        +}
        RULE InsertEvents : before-past~;pres |- past~;pres
        VIOLATION (TXT "{EX} NewStruct;Event"
                  ,TXT ";pres;Event;_NEW;History;", TGT I
                  ,TXT ";past;Event;_NEW;History;", SRC I
                  )
    ENDPATTERN


ENDCONTEXT