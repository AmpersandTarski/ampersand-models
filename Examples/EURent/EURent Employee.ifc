CONTEXT EURentBRANCHInterfaces IN ENGLISH
-----------------------------------------------------------
sessionDroppedoffRC     :: SESSION * RentalCase [UNI]  -- Field for filling in 


--[Functionality for logged in users]----------------------

ROLE ExecEngine MAINTAINS "In an Employee-session, there shall always be a current rental"
RULE "In an Employee-session, there shall always be a current rental": 
   '_SESSION' /\ sessionAccount;I[Employee];sessionAccount~ |- sessionRC;sessionRC~
VIOLATION (TXT "{EX} NewStruct;RentalCase"
          ,TXT ";sessionRC;SESSION;", SRC I, TXT ";RentalCase;_NEW"
          )

INTERFACE "EU-Rent Branch Office": '_SESSION' cRud BOX <ROWSNL>
   [ "Branch-related Sessions": I /\ sessionBranch;sessionBranch~ cRud TABS
      [ "My Session" : I cRud BOX <ROWSNL>
         [ "Todays date" : I cRud BOX [ "Today is": sessionToday cRud ]
         , "Logout" : I cRud INTERFACE "Logout"
         ]
      , "New rental" : I cRuD BOX <ROWSNL>
         [ "Create rental" : sessionRC cRud INTERFACE "New Rental and/or Pick-up"
         ]
      , "Pick-ups": I cRud BOX <ROWSNL>
         [ "Find the rental": I - (sessionRC;(rentalHasBeenPromised-rentalHasBeenStarted);sessionRC~) cRud BOX <ROWSNL>
            [ "Specify search arguments": I COLS
               [ "Renter/Driver"   : sessionCustomerRef cRUd
               , "Driving License" : sessionDrivingLicense cRUd
               ]
            , "Select from list of found rental cases" : 
                  (    sessionBranch;rcPickupBranch~
                  /\ ( sessionCustomerRef;(rcRenter\/rcDriver)~ \/ -(sessionCustomerRef;V[PersonRef*RentalCase]) )
                  /\ ( sessionDrivingLicense;rcDrivingLicense~  \/ -(sessionDrivingLicense;V[DrivingLicense*RentalCase]) )
                  )
                  ;(rentalHasBeenPromised-rentalHasBeenStarted) cRud INTERFACE "User to select a rental case"
            ]
         , "Handle the found rental": sessionRC;(rentalHasBeenPromised-rentalHasBeenStarted) cRud BOX <ROWSNL>
            [ "Wrong rental selected": sessionRC~ cRud BOX -- possible, since sessionRC is [INJ]
               [ "Search for other rental?": sessionRCDelReq cRUd
               ]
            , "Right rental selected": I cRud INTERFACE "New Rental and/or Pick-up"
            ]
         ]
      , "Drop-offs": I cRud BOX <ROWSNL>
         [ "Find the rental": I - (sessionRC;(rentalHasBeenStarted-rentalHasBeenEnded);sessionRC~) cRud BOX <ROWSNL>
            [ "Specify search arguments": I COLS
               [ "Car (License plate)": sessionCarID cRUd
               , "Renter/Driver"   : sessionCustomerRef cRUd
               , "Driving License" : sessionDrivingLicense cRUd
               ]
            , "Select from list of found rental cases" : 
                  (    sessionBranch;rcDropOffBranch~
                  /\ ( sessionCarID;(rcAssignedCar;carID)~        \/ -(sessionCarID;V[LicensePlate*RentalCase]) )
                  /\ ( sessionCustomerRef;(rcRenter \/ rcDriver)~ \/ -(sessionCustomerRef;V[PersonRef*RentalCase]) )
                  /\ ( sessionDrivingLicense;rcDrivingLicense~    \/ -(sessionDrivingLicense;V[DrivingLicense*RentalCase]) )
                  )
                  ;(rentalHasBeenStarted-rentalHasBeenEnded) cRud INTERFACE "User to select a rental case"
            ]
         , "Handle the found rental": sessionRC;(rentalHasBeenStarted-rentalHasBeenEnded) cRud BOX <ROWSNL>
            [ "Wrong rental selected": sessionRC~ cRud BOX -- possible, since sessionRC is [INJ]
               [ "Search for other rental?": sessionRCDelReq cRUd
               ]
            , "Right rental selected": I cRud INTERFACE "Drop-off"
            ]
         ]
      , "Available cars" : sessionBranch;carAvailableAt~ cRud COLS
         [ "License plate" : I cRud
         , "Type" : carType cRud
         ]
      , "Branch rental history" : sessionBranch cRud TABS
         [ "(Contr)actual pick-ups" : rcPickupBranch~;rentalHasBeenPromised cRud INTERFACE "View Rental Cases"
         , "Contractual drop-offs" : rcDropOffBranch~;rentalHasBeenPromised cRud INTERFACE "View Rental Cases"
         , "Actually dropped-Offs" : rcDroppedOffBranch~                    cRud INTERFACE "View Rental Cases"
         ]
      ]
   , "Non-branch related sessions": (I-(sessionBranch;sessionBranch~)) cRud BOX <ROWSNL>
      [ "Message": V;'You must login as an EURent employee to use this interface'[IfcMsg] cRud
      , "Login"  : I-(sessionAccount;sessionAccount~)  cRud INTERFACE "Login as EURent employee"
      , "Logout" : I /\ sessionAccount;sessionAccount~ cRud INTERFACE "Logout"
      ]
   ] 
POPULATION IfcMsg CONTAINS [ "You must login as an EURent employee to use this interface" ]

--[Login for Employees (and Developers)]-------------------
INTERFACE "Login as EURent employee": '_SESSION'[SESSION] cRud BOX <ROWSNL>
   [ "Login": '_SESSION'-(sessionAccount;sessionAccount~) cRud BOX <HCOLS>
      [ "Userid": loginUserid cRUd
      , "Password": loginPassword crUd -- crUd is needed for Passwords
--$The following two lines are meant for demonstration/development contexts only
      , "Please help": sessionLoginAssist cRUd
      , " ": sessionLoginAssist;(V-(V;I[Employee];V));'Cannot help - there are no Employee-accounts'[LoginMessage] cRud
      ]
--$This is for an easy login, for ease of demonstration/development
   , "LoginAssist ": sessionLoginAssist;V[SESSION*Employee] cRud BOX <SHCOLS>
      [ "Login?": autoLoginAccount cRUd
      , "Userid": accUserid cRud
      , "Branch": emplBranch cRud
      , "Person": accPerson cRud
      ]
   , "Show logged in user": I /\ sessionAccount;sessionAccount~ cRud BOX
      [ "Logged in as" : sessionAccount;accPersonRef cRud
      ]
   ]
POPULATION LoginMessage CONTAINS [ "Cannot help - there are no Employee-accounts" ]

--$Account extensions for Employees
CONCEPT Employee "an Account that is used by employees of EURent"
CLASSIFY Employee ISA Account
ROLE ExecEngine MAINTAINS "All Employee accounts have the (default) role 'Employee'"
RULE "All Employee accounts have the (default) role 'Employee'": 
  I[Employee] |- accAllowedRoles;'Employee';accAllowedRoles~
VIOLATION (TXT "{EX} InsPair;accAllowedRoles;Account;", SRC I, TXT ";Role;Employee"
          ,TXT "{EX} InsPair;accDefaultRoles;Account;", SRC I, TXT ";Role;Employee"
          )

emplBranch :: Employee * Branch [UNI] -- Branch office(s) that the Account is allowed to service.

sessionBranch :: SESSION * Branch [UNI]
ROLE ExecEngine MAINTAINS "Set sessionBranch"
RULE "Set sessionBranch": sessionAccount;emplBranch |- sessionBranch
VIOLATION (TXT "{EX} InsPair;sessionBranch;SESSION;", SRC I, TXT ";Branch;", TGT I)

--[Rental Creation and Pick-ups]----------------------------

INTERFACE "New Rental and/or Pick-up" FOR Employee : I[RentalCase]
--             -- /\ rentalHasBeenPromised
                  /\ -rentalHasBeenStarted cRud BOX
   [ "Customer details" : I cRud INTERFACE "Edit Customer Details"
   , "Contract details" : I cRud INTERFACE "Edit Contract Details"
   , "Car assignment"   : I cRud INTERFACE "Car Assignment and Pickup"
   , "Projected costs"  : I cRud INTERFACE "Show Projected Regular Costs"
   , "Workitems" : (sessionRC~;sessionActiveRoles;workitemRole~ /\ rcWorkItem);workitemText cRud
   , "Rental status" : I cRud BOX
      [ "Request submitted?" : rentalHasBeenRequested cRud
      , "Has rental been promised?" : rentalHasBeenPromised cRud
      , "Has rental car been picked up?" : rentalCarHasBeenPickedUp cRud
      , "Has rental been started?" : rentalHasBeenStarted cRud
      ]
   ]

-----------------------------------------------------------
PROCESS "Branch Interface: Handling New Rentals and Pickups"
PURPOSE PROCESS "Branch Interface: Handling New Rentals and Pickups"
{+The interfaces provided for branch offices, related to handling new rentals and pickups, provide some automated functionality. This section describes the features for filling in or changing the contents of forms that are presented in such interfaces. The assumption is that this interface is only provided within branch offices, allowing EU-Rent employees to create new rental applications for 'walk in customers' (see P2:1).+}

PURPOSE RULE "Single available car assignment"
{+If there is only one car available at the pick-up branch when a rental is being picked up, it shall be automatically assigned to a rental.+} 
ROLE ExecEngine MAINTAINS "Single available car assignment"
RULE "Single available car assignment":
    (  I[RentalCase] -- Rental case...
       /\ -- for which the branch has only one car available of the required type:
          -(  (rcCarType;carType~ /\ rcPickupBranch;carAvailableAt~)
             ;-I[Car]
             ;(rcCarType;carType~ /\ rcPickupBranch;carAvailableAt~)~
           )
       /\ -- AND the branch has no other rental that needs to be picked up and that requires a car of the same type 
          ( I[RentalCase] ! (rcCarType;-I;rcCarType~) )
    );(rcCarType;carType~ /\ rcPickupBranch;carAvailableAt~)
|- rcAssignedCar
MEANING "If there is only one (free) car available of the selected type, it will be assigned to the rental"
VIOLATION (TXT "{EX} InsPair;rcAssignedCar;RentalCase;", SRC I, TXT ";Car;", TGT I)

PURPOSE RULE "Remove car assignments"
{+When a car has been assigned, and the type of the requested car has changed, it should be removed.+}
ROLE ExecEngine MAINTAINS "Remove car assignments"
RULE "Remove car assignments": rcAssignedCar |- rcCarType;carType~
MEANING "If the car type changes, the assigned car must be removed."
VIOLATION (TXT "{EX} DelPair;rcAssignedCar;RentalCase;", SRC I, TXT ";Car;", TGT I)

PURPOSE RULE "Default pick-up branch of rental"
{+When a rental request is filled in by a branch, this branch will play the role of pick-up branch.+}
ROLE ExecEngine MAINTAINS "Default pick-up branch of rental"
RULE "Default pick-up branch of rental":
   (I[RentalCase]-(rcPickupBranch;rcPickupBranch~));sessionRC~;sessionBranch |- rcPickupBranch
MEANING "When a rental has not been started the default pickup branch will be the branch that handles it."
VIOLATION (TXT "{EX} InsPair;rcPickupBranch;RentalCase;", SRC I, TXT ";Branch;", TGT I)

PURPOSE RULE "Default start date of rental"
{+The date at which a rental request is filled in at a branch, is the default date at which the rental will start.+}
ROLE ExecEngine MAINTAINS "Default start date of rental"
RULE "Default start date of rental":
   (I /\ -(rcStartDate;rcStartDate~))
   ;sessionRC~
   ;'_SESSION';(I /\ sessionBranch;sessionBranch~)
   ;sessionToday |- rcStartDate
MEANING "The value of the start date of a rental handled in a branch office session defaults to todays date."
VIOLATION (TXT "{EX} InsPair;rcStartDate;RentalCase;", SRC I, TXT ";Date;", TGT I)

PURPOSE RULE "Car availability at branch"
{+When a contract is being created, cars and/or branches may only be selected if such cars are available at these branches.+}
RULE "Car availability at branch":  
   rcCarType~;(I /\ -rentalCarHasBeenPickedUp /\ sessionRC~;'_SESSION';sessionRC);rcPickupBranch |- carType~;carAvailableAt
MEANING "When creating a new rental contract, car types and pick-up branch must be selected such that the branch has cars of that type available."
VIOLATION (TXT "Cars of type ", SRC I, TXT " are not available at ", TGT I)

PURPOSE RULE "Handing over car keys is an implicit rental request"
{+When a rental request in a branch is filled in, and they keys have already been handed over, the request is considered to be submitted.+}
ROLE ExecEngine MAINTAINS "Handing over car keys is an implicit rental request"
RULE "Handing over car keys is an implicit rental request": rcKeysHandedOver |- rentalHasBeenRequested
MEANING "A rental that for which the car keys have been handed over, is considered to be requested."
VIOLATION (TXT "{EX} InsPair;rentalHasBeenRequested;RentalCase;", TGT I, TXT ";RentalCase;", TGT I)

PURPOSE RULE "Assigning a car to a rental"
{+A car may only be assigned to a promised rental if it car is available at that branch;
 also, a rental to which a car is assigned may only be promised if that car is available at the pick-up branch.+}
RULE "Assigning a car to a rental":
   rcAssignedCar~;(rentalHasBeenPromised-rentalCarHasBeenPickedUp);rcPickupBranch |- carAvailableAt
MEANING "A branch office may only assign cars that are available at that location."
VIOLATION (SRC I, TXT " is not available at ", TGT I)

PURPOSE RULE "Car key handover to the driver"
{+When a branch office has assigned a car to a (new or existing) rental, the keys must be handed to the contracted driver.+}
ROLE Employee MAINTAINS "Car key handover to the driver"
RULE "Car key handover to the driver": 
   I[RentalCase]
   /\ (rcPickupBranch;sessionBranch~;'_SESSION';sessionRC)
   /\ (rentalHasBeenPromised-rentalCarHasBeenPickedUp)
   /\ (rcAssignedCar;carAvailableAt;rcPickupBranch~)
|- rcKeysHandedOver
MEANING "The key handover must be registered."
VIOLATION (TXT "When keys are handed over, answer 'Are car keys handed over?' with 'TRUE'.")

ENDPROCESS
------------------------------------------------------------
sessionCarID :: SESSION * LicensePlate [UNI]
sessionDroppedoffRC  :: SESSION * RentalCase [UNI]

INTERFACE "Drop-off" FOR Employee : (rentalCarHasBeenPickedUp-rentalHasBeenEnded) cRud BOX
   [ "Contract details" : I cRud INTERFACE "Show Contract Details"
   , "Customer details" : I cRud INTERFACE "Show Customer Details"
   , "Drop-off details" : I cRud INTERFACE "Edit Drop-off Details"
   , "Billing details"  : I cRud INTERFACE "Show Billing Details"
   , "Payment received?": rentalIsPaid cRUd
   , "Rental status": I cRud BOX
      [ "Has rental been started?" : rentalHasBeenStarted cRud
      , "Has car been dropped-off?" : rentalCarHasBeenDroppedOff cRud
      , "Has payment been requested?" : paymentHasBeenRequested cRud
      , "Has payment been received?" : rentalIsPaid cRud
      , "Has rental been ended?" : rentalHasBeenEnded cRud
      ]
   ]

-----------------------------------------------------------
PROCESS "Branch Drop-offs and Payment Signaling"

ROLE Branch MAINTAINS "Register dropped-off car"
RULE "Register dropped-off car":
   I /\ sessionDroppedoffRC~;'_SESSION';sessionDroppedoffRC
|- rcDroppedOffCar;rcDroppedOffCar~
VIOLATION (TXT "After acceptance of the dropped-off car and having received the keys, please register the car's license plate.")

ROLE Branch MAINTAINS "Request rental payment"
RULE "Request rental payment": 
   I /\ sessionDroppedoffRC~;'_SESSION';sessionDroppedoffRC
     /\ rentalCarHasBeenDroppedOff
|- paymentHasBeenRequested
VIOLATION (TXT "Request ", SRC rcRenter, TXT " to pay ", SRC rentalCharge, TXT " Euros, for having rented ", SRC rcDroppedOffCar, TXT ".")

ROLE Branch MAINTAINS "Obtain rental payment"
RULE "Obtain rental payment": 
   I /\ sessionDroppedoffRC~;'_SESSION';sessionDroppedoffRC
     /\ paymentHasBeenRequested
|- rentalIsPaid
VIOLATION (TXT "Obtain payment from ", SRC rcRenter, TXT " for the amount of ", SRC rentalCharge, TXT " Euros, for having rented ", SRC rcDroppedOffCar, TXT ".")

ENDPROCESS
-----------------------------------------------------------
PROCESS "Branch Interface: Handling Drop-offs and Payment"
PURPOSE PROCESS "Branch Interface: Handling Drop-offs and Payment"
{+The interfaces provided for branch offices, related to handling drop-offs, bill presentment and receiving payment, provide some automated functionality. This section describes the features for filling in or changing the contents of forms that are presented in such interfaces. The assumption is that this interface is only provided within branch offices, allowing EU-Rent employees to handle the dropping off of cars and obtaining rental payments.+}

PURPOSE RULE "Registration of car drop-off"
{+Whenever a drop-off is requested, the associated rental case must be identified. This rental case has the following properties:
/start{itemize}
/item it lists the returned car as being rented
/item it shows that the car has been picked up and the rental has not yet been ended
/item the person returning the car is either the renter or the driver
/end{itemize}
+}
ROLE ExecEngine MAINTAINS "Registration of car drop-off"
RULE "Registration of car drop-off":
   '_SESSION';(I /\ sessionBranch;sessionBranch~)
   ;(sessionCarID;(rcAssignedCar;carID)~)
   ;(rentalCarHasBeenPickedUp-rentalCarHasBeenDroppedOff)
|- sessionRC
MEANING "The rental case of a drop-off is the one that has not ended and where the car is presented for drop-off"
VIOLATION (TXT "{EX} InsPair;sessionRC;SESSION;", SRC I, TXT ";RentalCase;", TGT I
          ,TXT "{EX} InsPair;rcDroppedOffCar;SESSION;", TGT I, TXT ";Car;", SRC sessionCarID;carID~
          )

PURPOSE RULE "Registration of (actual) drop-off branch"
{+When a car is returned to a branch, this branch will play the role of drop-off branch.+}
ROLE ExecEngine MAINTAINS "Registration of (actual) drop-off branch"
RULE "Registration of (actual) drop-off branch":
   ('_SESSION' /\ sessionBranch;sessionBranch~)
   ;( sessionRC;(rentalCarHasBeenPickedUp-rentalCarHasBeenDroppedOff)
    /\ sessionCarID;(rcDroppedOffCar;carID)~
    )
 |- sessionBranch;rcDroppedOffBranch~
MEANING "The (actual) drop-off branch is the branch at which the car is presented for drop-off."
VIOLATION (TXT "{EX} InsPair;rcDroppedOffBranch;RentalCase;", TGT I, TXT ";Branch;", SRC sessionBranch)

PURPOSE RULE "Cars are returned on the drop-off date"
{+When a car is returned to a branch, that date is the drop-off date.+}
ROLE ExecEngine MAINTAINS "Cars are returned on the drop-off date"
RULE "Cars are returned on the drop-off date":
   (I /\ -rentalCarHasBeenDroppedOff /\ rcDroppedOffCar;rcDroppedOffCar~)
  ;(rcDroppedOffCar;carID;sessionCarID~ \/ (rcRenter \/ rcDriver);sessionCustomerRef~)
  ;'_SESSION';sessionToday |- rcDroppedOffDate
MEANING "The (actual) drop-off date is the date at which the car is presented for drop-off at a branch."
VIOLATION (TXT "{EX} InsPair;rcDroppedOffDate;RentalCase;", SRC I, TXT ";Date;", TGT I)

ENDPROCESS
-----------------------------------------------------------
ENDCONTEXT