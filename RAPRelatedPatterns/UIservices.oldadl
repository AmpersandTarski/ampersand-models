{----------------------------------------------------------------------
Revision history
20110327 - Revision, mostly of documentation (e.g. Session, Portal). Distinction between 'Person', 'User', 'Actor'
20110326 - Inspiration from techneutenweekend and discussions with Bas about
           the implementation of services and UI-components in the context of a user session.

----------------------------------------------------------------------}
-- Markup uses `reStructuredTexts <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`__
-----------------------------------------------------------------------

CONTEXT RAP IN ENGLISH

PATTERN Portals

PURPOSE PATTERN Portals IN ENGLISH
{+This pattern was made in the process of building services into RAP.
The problem at hand is to invent how user interface components relate to services
such that portals can be generated automatically.
The Ampersand script specifies user interface components on top of the language defined in patterns.
So that is the starting point of our reasoning.
-} 

CONCEPT User "an identifier that represents (refers to) a registered user." ""
PURPOSE CONCEPT User IN ENGLISH
{+There is a need to clearly distinguish between humans (or persons, i.e. people of flesh and blood as defined elsewhere) that we encounter in the 'real world', and virtual actors that inhabit the virtual world within computers. RAP follows the tradition of calling such virtual actors 'users', since they have 'user names'. Typically, users and persons communicate through user-interfaces, consisting of UIComponents. For traceability and other purposes that we do not indulge into very deeply for now, users should be associated to at most one person. 
-}

CONCEPT Role "a name that identifies a set of users." ""
PURPOSE CONCEPT Role IN ENGLISH
{+Roles are used in an Ampersand script to define who will maintain which rules. A role identifies the set of all users that will maintain the rules assigned to that role.
-}

CONCEPT Rule "a term that is meant to be true." ""
PURPOSE CONCEPT Rule IN ENGLISH
{+Ampersand helps people to live by rules.
Rules followed by people are called "process rules".
Ampersand helps people to make these rules come true,
by signalling the cases that still need attention.
Rules that are not maintained by people are maintained by a computer.
Those rules cannot be broken and remain true all the time (in the perception of users).
-}

CONCEPT Session "a period in time where a person communicates with a user by means of a user interface" ""
PURPOSE CONCEPT Session IN ENGLISH
{+In a similar fashion as there is a need to define 'conversation' as the time that people interact with one another, we need a concept by which we can distinguish whether or not a computer and a person are having a conversation.+}

CONCEPT Portal "a user interface component that allows persons and computers to start (communications in) a session" ""
PURPOSE CONCEPT Portal IN ENGLISH
{+In order to start a session (conversation between a person and a user), there should be a starting point for the user interface. This outermost user interface from which a session is initiated, is called the portal.
This definition allows for portals on a computer, on other devices such as handhelds, virtual devices such as remote login sessions, etcetera.
In each case, the term 'portal' refers to the outermost user interface (from the session's perspective).
-}

CONCEPT UIcomp "a software component of an information system that allows a person to interact with that system." ""
PURPOSE CONCEPT UIcomp IN ENGLISH
{+In order for persons and users to communicate in a session, it must be necessary for both the person and the user to represent what it is they need to communicate. User interface components facilitate both persons and users in doing just that.
-}

SPEC Portal ISA UIcomp

isPartOf :: UIcomp * UIcomp PRAGMA "" "is part of"
PURPOSE RELATION isPartOf[UIcomp*UIcomp] IN ENGLISH
{+User interface components are defined in a hierarchical structure, allowing complex portals to be built as a hierarchy of UIcomps.
For example, let ``UIcomp`` number 5 be a widget that asks for a social security number, and let ``UIcomp`` 16 be a tax return form.
If we say that ``UIcomp`` 5 is part of ``UIcomp`` 16, we mean that the tax return form contains a widget that asks for a social security number.
Note that a UIcomp can be part of itself. 
For example, let ``UIcomp`` number 2 be a construct that lets you enter expressions. 
If we say that ``UIcomp`` 2 is part of ``UIcomp`` 2, we mean that the construct for entering expressions contains a construct for entering expressions as well (which are likely to be sub expressions).
-}

RULE "portals are outermost user interfaces": -(I[Portal];isPartOf)
MEANING "No portal can be part of a user interface component."

user :: Session * User [UNI] PRAGMA "" "serves"
PURPOSE RELATION user IN ENGLISH
{+An important reason for having sessions is to allow tracing
every activity that has taken place in a session, to the user and/or person associated with the session.
For this reason, each session is linked to (at most) one person and the associated user, 
for the duration that this person/user stays logged on.
-}

role :: User * Role PRAGMA "" "has been assigned"
PURPOSE RELATION role[User*Role] IN ENGLISH
{+Process rules are rules that need to be maintained by people.
In order for the automated support to properly assist people in doing this,
it must be clear which users take responsibility for maintaining which rules.
Since a role identifies the set of users that maintain rules associated with that role,
we need a relation that assigns users to roles, i.e. make them part of the set that the role identifies.
In order to link registered users to roles, we need a relation.
``p role r`` means that user ``u`` has role ``r`` at the moment.
-}

role :: Session -> Role PRAGMA "" "has"
 = [("s1", "user")]
PURPOSE RELATION role[Session*Role] IN ENGLISH
{+During a session, a user has one specific role. 
**Dat valt nog te bezien, maar vooralsnog gaan we hier even mee leven. Als rollen in processen worden gedefinieerd, en wel zodanig dat elke rol bij precies 1 proces gaat horen - daar is wel wat voor te zeggen vanuit procesontwerp-optiek - dan is dit mogelijk niet houdbaar. Een persoon wil - zeker in een portaal, naar verschillende processen toe kunnen 'navigeren'. Dat gaat dan niet zomaar lukken.**
This is done because the functionality presented to each user is role specific.
-}

RULE "role match" : user~;role |- role
MEANING "As long as user ``u`` is user in a session, then user ``u`` must have been assigned that session's role."
PURPOSE RULE "role match" IN ENGLISH
{+In order to give people access to the right functionality,
without having to do access right administration,
any session is open only to persons that have that session's role.
-}


curr :: Session -> Portal PRAGMA "" "is using" "as its user interface"
 = [("s1", "p1")]
PURPOSE RELATION curr IN ENGLISH
{+At any moment during its lifetime, a session corresponds to a specific portal.
During the session, that portal may change, as the user navigates through the application.
By saying ``s curr p`` we mean that session ``s`` currently corresponds to portal ``p``.
-}

core :: Portal -> Concept PRAGMA "" "has" "as its core"
 = [("p1", "Session")]
PURPOSE RELATION core[Portal*Concept] IN ENGLISH
{+Every portal corresponds to a concept.
When the portal is instantiated, the instance works on one particular atom.
For instance, when a user logs in, the user gets a portal with that user (a ``User``) as its starting point.
From that point, the user can navigate to wherever he or she is allowed to go.
For this reason, it makes sense to talk about the core concept of a portal.
-}

core :: Session -> Atom PRAGMA "" "has" "as its core"
 = [("s1", "s1")]
PURPOSE RELATION core[Session*Atom] IN ENGLISH
{+Every session corresponds to an atom.
This atom is the starting point from where all navigation begins.
From that point, the user can navigate to wherever he or she is allowed to go.
For this reason, it makes sense to talk about the core atom of a session.
-}

type :: Atom -> Concept PRAGMA "" "has" "as its type"
 = [("s1", "Session")]
PURPOSE RELATION type[Atom*Concept] IN ENGLISH
{+Every atom has a fixed type, which is a concept.
In speech, we can refer to that concept as *the type of* the atom.
-}

--? RULE portaltype : curr;core = core;type -- deze equivalentie houdt in dat er geen sessie kan bestaan die een portaal gebruikt waarvan het concept niet is gepopuleerd. Dat lijkt niet logisch en moet op zijn minst (beter) worden onderbouwd. Omdat ik me afvraag waartoe het afdwingen daarvan nodig is - dat blijkt niet uit de MEANING noch uit de PURPOSE - gaan we deze implicatie er maar uit mikken.
RULE portaltype : core; type |- curr; core
MEANING "The type of a session's central atom corresponds to the type of the current portal of that session."
PURPOSE RULE portaltype IN ENGLISH
{+In order to obtain the right functionality, the type of a session and its portal must correspond.
-}


maintains :: Role * Rule PRAGMA "" "maintains"
PURPOSE RELATION maintains IN ENGLISH
{+Maintaining a rule means to ensure that it will become true.
If at some point in time a rule is violated, someone has work to do.
In order to allocate that work to a role, we introduce: ``role r maintains rule p``.
This means that a person in role ``r`` gets all functionality required te restore truth in rule ``p``.
-}

visible :: Portal * Role PRAGMA "" "is visible to"
PURPOSE RELATION visible IN ENGLISH
{+Since a portal opens functionality to its user,
access to portals may be restricted to certain roles.
To say that a portal ``p`` is visible to role ``r`` means that a user in role ``r`` may use portal ``p``.
(Of course, other restrictions may be in place that limit the access further.)
-}

signals :: Portal * Rule PRAGMA "" "signals"
PURPOSE RELATION signals IN ENGLISH
{+The phrase \"Portal ``p`` signals rule ``r``\" means that violations of rule ``r`` are made visible in that portal or one of its components.
-}

RULE signalling : maintains |- visible~;signals
MEANING "Portals that signal rules shall be visible to every rol that maintain any of these rules"
PURPOSE RULE signalling IN ENGLISH
{+In order to maintain a rule, a user must be able to see the violations of that rule.
There must be a portal, visible to the user, which signals that rule.
-}

ENDPATTERN

PATTERN Services
PURPOSE PATTERN Services IN ENGLISH
{+This pattern was made in the process of building services into RAP.
The problem at hand is to make a definition that allows Ampersand to
generate all services fully automatically.
The Ampersand script specifies which rules are being maintained by which roles,
so that is the starting point of our reasoning.
-}

CONCEPT Service "a unit of software that executes precisely one transaction." ""
PURPOSE CONCEPT Service IN ENGLISH
{+A service is needed to change data, i.e. the contents of the database.
At all times, the data satisfies all invariants.
A service must ensure that the set of changes made by a user leaves the database in that condition that satisfies all invariants.
This corresponds precisely with the notion of transaction in the world of databases.
-}

CONCEPT ECArule "an executable rule that restores invariance after a single event." ""
PURPOSE CONCEPT ECArule IN ENGLISH
{+To restore invariance means that all rules are kept true.
After a user does an insert or delete in a relation ``r``,
some rules may be violated.
An ``ECArule`` (this is short for event-condition-action rule) does this.
Note that, as a consequence of executing an ``ECArule``,
other relations may be changed.
In order to keep all rules satisfied, several ``ECArule`` may have to be called.
All of this happens automatically.
The user will notice nothing other than certain fields that are filled "by magic".
-}

role :: Service -> Role PRAGMA "The definition of " " has been derived from the process logic for "
PURPOSE RELATION role[Service*Role] IN ENGLISH
{+A service is made for one specific role.
It contains the functionality that is derivable from the process logic for that specific role
together with the invariant rules in the system.
For this reason, it makes sense to say "the role of service ``s``"
Note that this does not imply that other roles cannot use the Service
-}

rels :: Relation * Service PRAGMA "" "is used in"
PURPOSE RELATION rels[Relation*Service] IN ENGLISH
{+We need a way to identify which relations are affected by a service,
because they will be within the scope of any transaction performed by this service.
The statement "Relation ``r`` is used in service ``s``" means that the population of this relation may change
or may have to be changed as a result of using the service.
-}

rels :: Relation * Rule PRAGMA "" "is used in"
PURPOSE RELATION rels[Relation*Rule] IN ENGLISH
{+Since all rules are built with relations, we use the sentence "Relation ``r`` is used in rule ``p``"
to indicate that ``r`` is among those building blocks.
This language is used, for instance, to analyse how the population of relations is affected when rules are maintained.
-}

RULE "relations in service": rels;maintains~|- rels;role
PURPOSE RULE "relations in service" IN ENGLISH
{+This rule defines the scope of a service.
All relations that are being maintained by this service are in scope.
These are the relations whose population may change as a result of executing the service.
-}

derivedfrom :: ECArule * Service PRAGMA "" ""
PURPOSE RELATION derivedfrom[ECArule*Service] IN ENGLISH
{+ECArules that are derived (by a compiler) from a service are in the relation ``derivedfrom``.
These rules help the user by changing the population of relations such that invariants are being restored and
rules are being maintained.
-}

affects :: Relation * ECArule PRAGMA "" ""
PURPOSE RELATION affects[Relation*ECArule] IN ENGLISH
{+The statement "ECArule ``e`` affects relation ``r``" means that
execution of this ECArule may cause the population of ``r`` to change.
-}

RULE "ECArules in scope" : affects;derivedfrom |- rels[Relation*Service]
MEANING "Wherever an ECArule is derived from a service, the relation(s) it affects must be in scope of that service."
PURPOSE RULE "ECArules in scope" IN ENGLISH
{+The scope of a service can be perceived as the relations that are affected by that service.
ECArules may affect relations.
Therefore, only those ECArules are permitted that respect the scope of the service.
-}

ENDPATTERN

ENDCONTEXT
